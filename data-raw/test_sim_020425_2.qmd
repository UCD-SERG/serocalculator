---
title: "Simulation 02.04.2025 renew_params"
format: 
  pdf:
    number-sections: true
    number-depth: 2
    number-offset: [0, 0]
output:
  pdf_document:
    orientation: landscape
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE,echo=FALSE}
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
```

```{r, echo=FALSE, message=FALSE}
library(gridExtra)
library(mgcv)  # For advanced GAM smoothing
library(haven)
library(knitr)
library(plotly)
library(kableExtra)
library(tidyr)
library(arsenal)
library(dplyr)
library(forcats)
library(huxtable)
library(magrittr)
library(parameters)
library(kableExtra)
library(ggplot2)
library(ggeasy)
library(scales)
library(plotly)
library(patchwork)
library(tidyverse)
library(gtsummary)
library(readxl)
library(purrr)
library(serocalculator)
library(runjags)
library(coda)
library(ggmcmc)
library(here)
library(bayesplot)
library(table1)
library(tibble)
library(furrr)
library(dplyr)
```

# Simulation (renew_params=TRUE)

The true lambda is 0.01 and lambda_start is 0.005.

# Get parameters from longitudinal data

```{r,echo=FALSE, message=FALSE, warning=FALSE,results='hide'}
test_sim<-"https://osf.io/download/rtw5k" %>%
  load_curve_params() %>%
  dplyr::filter(iter < 500) 

```

# Approach 2 (Simulate Data Fresh for Each Sample)

## Function for approach2

```{r,echo=FALSE, message=FALSE, warning=FALSE,results='hide'}
# Define the simulation function
simulate_seroincidence <- function(nrep, n_sim) {
  # Parameters
  dmcmc <- test_sim  # Curve parameters
  antibodies <-c("HlyE_IgA", "HlyE_IgG")
  lambda <- 0.01  # Simulated incidence rate per person-year
  lifespan <- c(0, 10)  # Age range
  
  # biologic noise distribution
  dlims <- rbind(
    "HlyE_IgA" = c(min = 0, max = 0.5),
    "HlyE_IgG" = c(min = 0, max = 0.5)
  )
  
  # Noise parameters
  cond <- tibble(
    antigen_iso = c("HlyE_IgG", "HlyE_IgA"),
    nu = c(0.5, 0.5),  # Biologic noise (nu)
    eps = c(0, 0),     # Measurement noise (eps)
    y.low = c(1, 1),   # Low cutoff (llod)
    y.high = c(5e6, 5e6)  # High cutoff (y.high)
  )
  
  # Perform simulations in parallel
  results <- future_map(1:n_sim, function(i) {
    # Generate cross-sectional data
    csdata <- sim.cs(
      curve_params = dmcmc,
      lambda = lambda,
      n.smpl = nrep,
      age.rng = lifespan,
      antigen_isos = antibodies,
      n.mc = 0,
      renew.params = TRUE,  # Use different parameters for each simulation
      add.noise = TRUE,
      noise_limits = dlims,
      format = "long"
    )
    
    # Estimate seroincidence
    est <- est.incidence(
      pop_data = csdata,
      curve_params = dmcmc,
      noise_params = cond,
      lambda_start = 0.005,
      build_graph = TRUE,
      verbose = FALSE,
      print_graph = FALSE,
      antigen_isos = antibodies
    )
    
    # Return results for this simulation
    list(
      csdata = csdata,
      est1 = est
    )
  }, .options = furrr_options(seed = TRUE))
  
  return(results)
}

```

```{r,echo=FALSE, message=FALSE, warning=FALSE,results='hide'}
## Run simulation
plan(multisession)  # Use multiple sessions for parallelism (local machine)

# Run the simulations in parallel
set.seed(129251)
results_50 <- simulate_seroincidence(nrep = 50, n_sim = 300)

set.seed(129252)
results_100 <- simulate_seroincidence(nrep = 100, n_sim = 300)

set.seed(129253)
results_150 <- simulate_seroincidence(nrep = 150, n_sim = 300)

set.seed(129254)
results_200 <- simulate_seroincidence(nrep = 200, n_sim = 300)

# Stop parallel processing
plan(sequential)  # Return to sequential processing

```

```{r,echo=FALSE, message=FALSE, warning=FALSE,results='hide'}
# Define a function to generate final tables
generate_sim_table <- function(results_list, sample_size) {
  # Initialize an empty list to store the results
  summary_results <- list()
  
  # Loop through each of the 100 results and extract the required columns
  for (i in 1:300) {
    # Extract the summary for each result
    result_summary <- summary(results_list[[i]]$est1)
    
    # Select the required columns
    extracted_columns <- result_summary %>%
      select(incidence.rate, SE, CI.lwr, CI.upr)
    
    # Add a column for the index (optional, for tracking)
    extracted_columns <- extracted_columns %>%
      mutate(index = i)
    
    # Append to the list
    summary_results[[i]] <- extracted_columns
  }
  
  # Combine all results into a single data frame
  final_table <- bind_rows(summary_results) %>%
    mutate(sample_size = sample_size) # Add sample size column for clarity
  
  return(final_table)
}

# Store each sample size's summary as table
final_table_50 <- generate_sim_table(results_50, 50)
final_table_100 <- generate_sim_table(results_100, 100)
final_table_150 <- generate_sim_table(results_150, 100)
final_table_200 <- generate_sim_table(results_200, 100)

# Define the true lambda
true_lambda <- 0.01

```

## Bias, SE, RMSE, CI Width, and CI Coverage

```{r, echo=FALSE, message=FALSE}
# Define the function to compute statistics


statistics_50<-analyze_sims(final_table_50, true_lambda)
statistics_100<-analyze_sims(final_table_100, true_lambda)
statistics_150<-analyze_sims(final_table_150, true_lambda)
statistics_200<-analyze_sims(final_table_200, true_lambda)


# Convert the statistics lists to data frames
df_50 <- as_tibble(statistics_50) %>% mutate(Sample_Size = 50)
df_100 <- as_tibble(statistics_100) %>% mutate(Sample_Size = 100)
df_150 <- as_tibble(statistics_150) %>% mutate(Sample_Size = 150)
df_200 <- as_tibble(statistics_200) %>% mutate(Sample_Size = 200)

# Combine all statistics into a single table
final_statistics_table <- bind_rows(df_50, df_100, df_150, df_200) %>%
  select(Sample_Size, everything())  # Reorder to show Sample Size first

# Convert Bias to scientific notation for better visibility
final_statistics_table <- final_statistics_table %>%
  mutate(Bias = formatC(Bias, format = "e", digits = 4)) # Scientific notation

```

Since some values in CI.upr and CI.lwr are Inf or extremely large due to outliers, we should filter them out before computing the statistics.

# Table (renew_params=TRUE)

Make a table with columns bias, standard error, root mean squared error, confidence interval width, confidence interval coverage, sample size, and renew_params, for various sample sizes and each value of renew_params

```{r, echo=FALSE, message=FALSE}
# Display the table in a simple format for PDF output
kable(final_statistics_table, 
      format = "latex",  # Use "latex" for PDF output
      digits = 4, 
      caption = "Statistics Results for Different Sample Sizes")

```

\newpage

# Simulation (renew_params=FALSE)

The true lambda is 0.01 and lambda_start is 0.005.

```{r,echo=FALSE, message=FALSE, warning=FALSE,results='hide'}
# Define the simulation function
simulate_seroincidence2 <- function(nrep, n_sim) {
  # Parameters
  dmcmc <- test_sim  # Curve parameters
  antibodies <-c("HlyE_IgA", "HlyE_IgG")
  lambda <- 0.01  # Simulated incidence rate per person-year
  lifespan <- c(0, 10)  # Age range
  
  # biologic noise distribution
  dlims <- rbind(
    "HlyE_IgA" = c(min = 0, max = 0.5),
    "HlyE_IgG" = c(min = 0, max = 0.5)
  )
  
  # Noise parameters
  cond <- tibble(
    antigen_iso = c("HlyE_IgG", "HlyE_IgA"),
    nu = c(0.5, 0.5),  # Biologic noise (nu)
    eps = c(0, 0),     # Measurement noise (eps)
    y.low = c(1, 1),   # Low cutoff (llod)
    y.high = c(5e6, 5e6)  # High cutoff (y.high)
  )
  
  # Perform simulations in parallel
  results <- future_map(1:n_sim, function(i) {
    # Generate cross-sectional data
    csdata <- sim.cs(
      curve_params = dmcmc,
      lambda = lambda,
      n.smpl = nrep,
      age.rng = lifespan,
      antigen_isos = antibodies,
      n.mc = 0,
      renew.params = FALSE,  # Use different parameters for each simulation
      add.noise = TRUE,
      noise_limits = dlims,
      format = "long"
    )
    
    # Estimate seroincidence
    est <- est.incidence(
      pop_data = csdata,
      curve_params = dmcmc,
      noise_params = cond,
      lambda_start = 0.005,
      build_graph = TRUE,
      verbose = FALSE,
      print_graph = FALSE,
      antigen_isos = antibodies
    )
    
    # Return results for this simulation
    list(
      csdata = csdata,
      est1 = est
    )
  }, .options = furrr_options(seed = TRUE))
  
  return(results)
}

```

```{r,echo=FALSE, message=FALSE, warning=FALSE,results='hide'}
## Run simulation
plan(multisession)  # Use multiple sessions for parallelism (local machine)

# Run the simulations in parallel
set.seed(129255)
results_50_2 <- simulate_seroincidence2(nrep = 50, n_sim = 300)

set.seed(129256)
results_100_2 <- simulate_seroincidence2(nrep = 100, n_sim = 300)

set.seed(129257)
results_150_2 <- simulate_seroincidence2(nrep = 150, n_sim = 300)

set.seed(129258)
results_200_2 <- simulate_seroincidence2(nrep = 200, n_sim = 300)

# Stop parallel processing
plan(sequential)  # Return to sequential processing

```

```{r, echo=FALSE, message=FALSE}
# Store each sample size's summary as table
final_table_50_2 <- generate_sim_table(results_50_2, 50)
final_table_100_2 <- generate_sim_table(results_100_2, 100)
final_table_150_2 <- generate_sim_table(results_150_2, 100)
final_table_200_2 <- generate_sim_table(results_200_2, 100)

```

# Table (renew_params=FALSE)

```{r}
statistics_50_2<-analyze_sims(final_table_50_2, true_lambda)
statistics_100_2<-analyze_sims(final_table_100_2, true_lambda)
statistics_150_2<-analyze_sims(final_table_150_2, true_lambda)
statistics_200_2<-analyze_sims(final_table_200_2, true_lambda)


# Convert the statistics lists to data frames
df_50_2 <- as_tibble(statistics_50_2) %>% mutate(Sample_Size = 50)
df_100_2 <- as_tibble(statistics_100_2) %>% mutate(Sample_Size = 100)
df_150_2 <- as_tibble(statistics_150_2) %>% mutate(Sample_Size = 150)
df_200_2 <- as_tibble(statistics_200_2) %>% mutate(Sample_Size = 200)

# Combine all statistics into a single table
final_statistics_table2 <- bind_rows(df_50_2, df_100_2, df_150_2, df_200_2) %>%
  select(Sample_Size, everything())  # Reorder to show Sample Size first

# Convert Bias to scientific notation for better visibility
final_statistics_table2 <- final_statistics_table2 %>%
  mutate(Bias = formatC(Bias, format = "e", digits = 4)) # Scientific notation

# Display the table in a simple format for PDF output
kable(final_statistics_table2, 
      format = "latex",  # Use "latex" for PDF output
      digits = 4, 
      caption = "Statistics Results for Different Sample Sizes")

```

\newpage

# Table (renew_params:TRUE vs. FALSE)

```{r, echo=FALSE, message=FALSE}
# Convert the statistics lists to data frames and add 'renew_params' column
df_50_true <- as_tibble(statistics_50) %>% mutate(Sample_Size = 50, renew_params = "TRUE")
df_100_true <- as_tibble(statistics_100) %>% mutate(Sample_Size = 100, renew_params = "TRUE")
df_150_true <- as_tibble(statistics_150) %>% mutate(Sample_Size = 150, renew_params = "TRUE")
df_200_true <- as_tibble(statistics_200) %>% mutate(Sample_Size = 200, renew_params = "TRUE")

df_50_false <- as_tibble(statistics_50_2) %>% mutate(Sample_Size = 50, renew_params = "FALSE")
df_100_false <- as_tibble(statistics_100_2) %>% mutate(Sample_Size = 100, renew_params = "FALSE")
df_150_false <- as_tibble(statistics_150_2) %>% mutate(Sample_Size = 150, renew_params = "FALSE")
df_200_false <- as_tibble(statistics_200_2) %>% mutate(Sample_Size = 200, renew_params = "FALSE")

# Combine all statistics into a single table
final_statistics_table_merged <- bind_rows(
  df_50_true, df_100_true, df_150_true, df_200_true,
  df_50_false, df_100_false, df_150_false, df_200_false
) %>%
  select(Sample_Size, renew_params, everything())  # Reorder columns

# Convert Bias to scientific notation for better visibility
final_statistics_table_merged <- final_statistics_table_merged %>%
  mutate(Bias = formatC(Bias, format = "e", digits = 4))

# Display the table in a simple format for PDF output
kable(final_statistics_table_merged, 
      format = "latex",  # Use "latex" for PDF output
      digits = 4, 
      caption = "Statistics Results for Different Sample Sizes")


```
