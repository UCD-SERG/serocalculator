% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/est_seroincidence_by.R
\name{est_seroincidence_by}
\alias{est_seroincidence_by}
\title{Estimate Seroincidence}
\usage{
est_seroincidence_by(
  pop_data,
  sr_params,
  noise_params,
  strata,
  curve_strata_varnames = strata,
  noise_strata_varnames = strata,
  antigen_isos = unique(pull(pop_data, "antigen_iso")),
  lambda_start = 0.1,
  build_graph = FALSE,
  num_cores = 1L,
  verbose = FALSE,
  print_graph = FALSE,
  ...
)
}
\arguments{
\item{pop_data}{a \link{data.frame} with cross-sectional serology data per
antibody and age, and additional columns corresponding to
each element of the \code{strata} input}

\item{sr_params}{a \code{\link[=data.frame]{data.frame()}} containing MCMC samples of parameters
from the Bayesian posterior distribution of a longitudinal decay curve model.
The parameter columns must be named:
\itemize{
\item \code{antigen_iso}: a \code{\link[=character]{character()}} vector indicating antigen-isotype
combinations
\item \code{iter}: an \code{\link[=integer]{integer()}} vector indicating MCMC sampling iterations
\item \code{y0}: baseline antibody level at $t=0$ ($y(t=0)$)
\item \code{y1}: antibody peak level (ELISA units)
\item \code{t1}: duration of infection
\item \code{alpha}: antibody decay rate
(1/days for the current longitudinal parameter sets)
\item \code{r}: shape factor of antibody decay
}}

\item{noise_params}{a \code{\link[=data.frame]{data.frame()}} (or \code{\link[tibble:tibble]{tibble::tibble()}})
containing the following variables,
specifying noise parameters for each antigen isotype:
\itemize{
\item \code{antigen_iso}: antigen isotype whose noise parameters are being specified
on each row
\item \code{nu}: biological noise
\item \code{eps}: measurement noise
\item \code{y.low}: lower limit of detection for the current antigen isotype
\item \code{y.high}: upper limit of detection for the current antigen isotype
}}

\item{strata}{a \link{character} vector of stratum-defining variables.
Values must be variable names in \code{pop_data}.}

\item{curve_strata_varnames}{A subset of \code{strata}.
Values must be variable names in \code{curve_params}. Default = "".}

\item{noise_strata_varnames}{A subset of \code{strata}.
Values must be variable names in \code{noise_params}. Default = "".}

\item{antigen_isos}{Character vector with one or more antibody names.
Must match \code{pop_data}}

\item{lambda_start}{starting guess for incidence rate, in events/year.}

\item{build_graph}{whether to graph the log-likelihood function across
a range of incidence rates (lambda values)}

\item{num_cores}{Number of processor cores to use for
calculations when computing by strata. If set to
more than 1 and package \pkg{parallel} is available,
then the computations are executed in parallel. Default = 1L.}

\item{verbose}{logical: if TRUE, print verbose log information to console}

\item{print_graph}{whether to display the log-likelihood curve graph
in the course of running \code{est_seroincidence()}}

\item{...}{
  Arguments passed on to \code{\link[=est_seroincidence]{est_seroincidence}}, \code{\link[stats:nlm]{stats::nlm}}
  \describe{
    \item{\code{stepmin}}{A positive scalar providing the minimum allowable
relative step length.}
    \item{\code{stepmax}}{a positive scalar which gives the maximum allowable
    scaled step length.  \code{stepmax} is used to prevent steps which
    would cause the optimization function to overflow, to prevent the
    algorithm from leaving the area of interest in parameter space, or to
    detect divergence in the algorithm. \code{stepmax} would be chosen
    small enough to prevent the first two of these occurrences, but should
    be larger than any anticipated reasonable step.}
    \item{\code{typsize}}{an estimate of the size of each parameter
    at the minimum.}
    \item{\code{fscale}}{an estimate of the size of \code{f} at the minimum.}
    \item{\code{ndigit}}{the number of significant digits in the function \code{f}.}
    \item{\code{gradtol}}{a positive scalar giving the tolerance at which the
    scaled gradient is considered close enough to zero to
    terminate the algorithm.  The scaled gradient is a
    measure of the relative change in \code{f} in each direction
    \code{p[i]} divided by the relative change in \code{p[i]}.}
    \item{\code{iterlim}}{a positive integer specifying the maximum number of
    iterations to be performed before the program is terminated.}
    \item{\code{check.analyticals}}{a logical scalar specifying whether the
    analytic gradients and Hessians, if they are supplied, should be
    checked against numerical derivatives at the initial parameter
    values. This can help detect incorrectly formulated gradients or
    Hessians.}
  }}
}
\value{
\itemize{
\item if \code{strata} has meaningful inputs:
An object of class \code{"seroincidence.by"}; i.e., a list of
\code{"seroincidence"} objects from \code{\link[=est_seroincidence]{est_seroincidence()}}, one for each stratum,
with some meta-data attributes.
\item if \code{strata} is missing, \code{NULL}, \code{NA}, or \code{""}:
An object of class \code{"seroincidence"}.
}
}
\description{
Function to estimate seroincidences based on cross-sectional
serology data and longitudinal
response model.
}
\details{
If \code{strata} is left empty, a warning will be produced,
recommending that you use \code{\link[=est_seroincidence]{est_seroincidence()}} for unstratified analyses,
and then the data will be passed to \code{\link[=est_seroincidence]{est_seroincidence()}}.
If for some reason you want to use \code{\link[=est_seroincidence_by]{est_seroincidence_by()}}
with no strata instead of calling \code{\link[=est_seroincidence]{est_seroincidence()}},
you may use \code{NA}, \code{NULL}, or \code{""} as the \code{strata}
argument to avoid that warning.
}
\examples{

library(dplyr)

xs_data <-
  sees_pop_data_pk_100

curve <-
  typhoid_curves_nostrat_100 |>
  filter(antigen_iso \%in\% c("HlyE_IgA", "HlyE_IgG"))

noise <-
  example_noise_params_pk

est2 <- est_seroincidence_by(
  strata = "catchment",
  pop_data = xs_data,
  sr_params = curve,
  noise_params = noise,
  antigen_isos = c("HlyE_IgG", "HlyE_IgA"),
  # num_cores = 8 # Allow for parallel processing to decrease run time
  iterlim = 5 # limit iterations for the purpose of this example
)
print(est2)
summary(est2)

}
