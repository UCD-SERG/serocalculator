[{"path":[]},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement . complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to serocalculator","title":"Contributing to serocalculator","text":"outlines propose change serocalculator. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to serocalculator","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to serocalculator","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to serocalculator","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"UCD-SERG/serocalculator\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html. GitHub automatically check PR see package still functional Mac OS, Windows, Linux; , receive email describing problems. help decoding errors, try resource: https://github.com/r-lib/actions?tab=readme-ov-file#--find-help.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to serocalculator","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to serocalculator","text":"Please note serocalculator project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/enteric_fever_example.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Enteric Fever Seroincidence Vignette","text":"vignette provides users example analysis using serocalculator package reproducing analysis : Estimating typhoid incidence community-based serosurveys: multicohort study (Aiemjoy et al. (2022)). review methods underlying analysis walk example enteric fever incidence Pakistan. Note simplified version analysis, results differ slightly presented publication. example, users determine seroincidence enteric fever cross-sectional serosurveys conducted part SeroEpidemiology Environmental Surveillance (SEES) enteric fever study Bangladesh, Nepal, Pakistan. Longitudinal antibody responses modeled 1420 blood culture-confirmed enteric fever cases enrolled countries.","code":""},{"path":[]},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/enteric_fever_example.html","id":"load-packages","dir":"Articles","previous_headings":"Methods","what":"Load packages","title":"Enteric Fever Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading: See Installation instructions details. serocalculator package installed, load R environment using library(), along packages may need data management; example, load tidyverse forcats:","code":"install.packages(\"serocalculator\") library(serocalculator) library(tidyverse) library(forcats)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/enteric_fever_example.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Enteric Fever Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Data Repository Open Science Framework (OSF). pull data directly R environment. Note dataset specific formatting variable name requirements.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/enteric_fever_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Articles","previous_headings":"Load data","what":"Load and prepare longitudinal parameter data","title":"Enteric Fever Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. example, parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases. Formatting Specifications: Data imported “wide” dataframe one column parameter one row iteration posterior distribution antigen isotype. Column names must exactly match follow naming conventions: Note variable names case-sensitive","code":"# Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params()"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/enteric_fever_example.html","id":"visualize-curve-parameters","dir":"Articles","previous_headings":"Load data","what":"Visualize curve parameters","title":"Enteric Fever Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"# Visualize curve parameters curves %>% filter(antigen_iso == \"HlyE_IgA\" |                     antigen_iso == \"HlyE_IgG\") %>%   autoplot()"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/enteric_fever_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Articles","previous_headings":"Load data","what":"Load and prepare cross-sectional data","title":"Enteric Fever Seroincidence Vignette","text":"Next, load sample cross-sectional data. use subset results SEES dataset. Ideally, representative sample general population without regard disease status. Later, limit analysis cross-sectional data Pakistan. selected hemolysin E (HlyE) target antigen IgG IgA target immunoglobulin isotypes. Users may select different serologic markers depending available data. original dataset, rename result age variables names required serocalculator. Formatting Specifications: Cross-sectional population data “long” dataframe one column variable one row antigen isotype resulted individual. individual one row results one antigen isotype. dataframe can additional variables, two required: Note variable names case sensitive","code":"#Import cross-sectional data from OSF and rename required variables xs_data <- readr::read_rds(\"https://osf.io/download//n6cp3/\") %>%   as_pop_data()"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/enteric_fever_example.html","id":"summarize-antibody-data","dir":"Articles","previous_headings":"Load data","what":"Summarize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary() #>  #> n = 3336  #>  #> Distribution of age:  #>  #> # A tibble: 1 × 7 #>       n   min first_quartile median  mean third_quartile   max #>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1  3336   0.6              5     10  10.5             15    25 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 2 × 7 #>   antigen_iso   Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA        0     0.851   1.74      3.66  133.       0 #> 2 HlyE_IgG        0     1.15    2.70      6.74  219.       0"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/enteric_fever_example.html","id":"visualize-antibody-data","dir":"Articles","previous_headings":"Load data","what":"Visualize antibody data","title":"Enteric Fever Seroincidence Vignette","text":"examine cross-sectional antibody data visualizing distribution quantitative antibody responses. , look distribution selected antigen isotype pairs, HlyE IgA HlyE IgG, across participating countries.  see across countries, data highly skewed majority responses lower end data long tails. Let’s get better look distribution log transforming antibody response value.  log transformed, data looks much normally distributed. cases, log transformation best way visualize serologic data. Let’s also take look antibody responses change age.  plot, steeper slope indicates higher incidence. can see highest burden Bangladesh. Nepal slightly higher incidence older group (higher slope).","code":"#color palette country_pal <- c(\"#EA6552\", \"#8F4B86\", \"#0099B4FF\")  xs_data %>% autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) # Create log transformed plots  xs_data %>%   mutate(Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\")) %>%   autoplot(strata = \"Country\", type = \"density\") +   scale_fill_manual(values = country_pal) +   scale_x_log10(labels = scales::label_comma()) #> Warning in scale_x_log10(labels = scales::label_comma()): log-10 #> transformation introduced infinite values. #> Warning: Removed 18 rows containing non-finite outside the scale range #> (`stat_density()`). #Plot antibody responses by age ggplot(data = xs_data %>%   mutate(Country = fct_relevel(     Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"   )), aes(x = age, y = value, color = Country)) +   geom_point(size = 0.6, alpha = 0.7) +   geom_smooth(method = \"lm\", se = FALSE) +   scale_y_log10() +   theme_linedraw() +   labs(title = \"Quantitative Antibody Results by Age\", x = \"Age\", y = \"Value\") +   scale_color_manual(values = country_pal)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/enteric_fever_example.html","id":"load-noise-parameters","dir":"Articles","previous_headings":"Load data","what":"Load noise parameters","title":"Enteric Fever Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# Import noise parameters from OSF  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS()"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/enteric_fever_example.html","id":"estimate-seroincidence","dir":"Articles","previous_headings":"","what":"Estimate Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Now ready begin estimating seroincidence. conduct two separate analyses using two distinct functions, est.incidence est.incidence., calculate overall seroincidence stratified seroincidence, respectively.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/enteric_fever_example.html","id":"overall-seroincidence","dir":"Articles","previous_headings":"Estimate Seroincidence","what":"Overall Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"Using function est.incidence, filter sites Pakistan define datasets cross-sectional data (pop_data), longitudinal parameters (curve_param), noise parameters (noise_param). also define antigen-isotype pairs included estimate (antigen_isos). , chosen use two antigen isotypes, users can add additional pairs available.","code":"# Using est.incidence (no strata)  est1 <- est.incidence(   pop_data = xs_data %>% filter(Country == \"Pakistan\"),   curve_param = curves,   noise_param = noise %>% filter(Country == \"Pakistan\"),   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate      SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.128 0.00682  0.115  0.142     0.95  -2376.          4 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/enteric_fever_example.html","id":"stratified-seroincidence","dir":"Articles","previous_headings":"Estimate Seroincidence","what":"Stratified Seroincidence","title":"Enteric Fever Seroincidence Vignette","text":"can also produce stratified seroincidence estimates. Users can select one stratification variables cross-sectional population dataset. Let’s compare estimates across countries age group. Note get warning uneven observations antigen isotypes, meaning participants results HlyE IgA HlyE IgG. warning indicates “Sample size stratum calculated minimum number observations across antigen isotypes”, participants antigen isotypes included. avoid , filter dataset include records specified antigen isotypes. set curve_strata_varnames = NULL avoid stratification “curves” dataset include strata variables. Without , warning appears: “curve_params missing strata variables, used unstratified”. stratify based variables exist longitudinal curve parameters dataset, specify variables using curve_strata_varnames, similar noise_strata_varnames used “noise” . Finally, let’s visualize seroincidence estimates country age category.","code":"#Using est.incidence.by (strata)  est_country_age <- est.incidence.by(   strata = c(\"Country\", \"ageCat\"),   pop_data = xs_data,   curve_params = curves,   curve_strata_varnames = NULL,   noise_params = noise,   noise_strata_varnames = \"Country\",   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning: The number of observations in `data` varies between antigen isotypes, for at #> least one stratum. #> Sample size for each stratum will be calculated as the minimum number of #> observations across all antigen isotypes. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est_country_age) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : Country, ageCat  #>  #>  Seroincidence estimates: #> # A tibble: 9 × 14 #>   Stratum   Country  ageCat     n est.start incidence.rate      SE CI.lwr CI.upr #>   <chr>     <chr>    <fct>  <int>     <dbl>          <dbl>   <dbl>  <dbl>  <dbl> #> 1 Stratum 1 Banglad… <5       101       0.1         0.400  0.0395  0.330  0.485  #> 2 Stratum 2 Banglad… 5-15     256       0.1         0.477  0.0320  0.418  0.544  #> 3 Stratum 3 Banglad… 16+       44       0.1         0.449  0.0763  0.322  0.627  #> 4 Stratum 4 Nepal    <5       171       0.1         0.0203 0.00444 0.0132 0.0311 #> 5 Stratum 5 Nepal    5-15     378       0.1         0.0355 0.00311 0.0299 0.0421 #> 6 Stratum 6 Nepal    16+      211       0.1         0.0935 0.00776 0.0795 0.110  #> 7 Stratum 7 Pakistan <5       126       0.1         0.106  0.0136  0.0823 0.136  #> 8 Stratum 8 Pakistan 5-15     261       0.1         0.115  0.00845 0.0991 0.132  #> 9 Stratum 9 Pakistan 16+      107       0.1         0.190  0.0204  0.154  0.235  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  ## Save summary(est_country_age) as a dataframe and sort by incidence rate est_country_agedf <- summary(est_country_age) %>%   mutate(     Country = fct_relevel(Country, \"Bangladesh\", \"Pakistan\", \"Nepal\"),     ageCat = factor(ageCat)   )  ## Create plot by country and age category ggplot(est_country_agedf,        aes(          y = fct_rev(ageCat),          x = incidence.rate * 1000, #rescale incidence          fill = Country        )) +   geom_bar(stat = \"identity\",            position = position_dodge(),            show.legend = TRUE) +   geom_errorbar(     aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000), #rescale CIs     position = position_dodge(width = 0.9),     width = .2   ) +   labs(title = \"Enteric Fever Seroincidence by Country and Age\",        x = \"Seroincidence rate per 1000 person-years\",        y = \"Age Category\",        fill = \"Country\") +   theme_linedraw() +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_x_continuous(expand = c(0, 10)) +   scale_fill_manual(values = country_pal)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/enteric_fever_example.html","id":"conclusions","dir":"Articles","previous_headings":"","what":"Conclusions","title":"Enteric Fever Seroincidence Vignette","text":"find Bangladesh highest overall seroincidence enteric fever rate 449 per 1000 person-years, well highest seroincidence age category. comparison, Nepal seroincidence rate 1 times lower Bangladesh (400 per 1000 person-years) lowest age-specific seroincidence rates three countries study. serocalculator provides efficient tool conduct analysis produce actionable results.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/enteric_fever_example.html","id":"acknowledgments","dir":"Articles","previous_headings":"","what":"Acknowledgments","title":"Enteric Fever Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies. Special thanks collaborators Sabin Vaccine Institute, Aga Khan University (Karachi, Pakistan), Child Health Research Foundation (Dhaka, Bangladesh), Dhulikhel Hospital, Kathmandu University Hospital (Dhulikhel, Nepal).","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/enteric_fever_example.html","id":"funding","dir":"Articles","previous_headings":"","what":"Funding","title":"Enteric Fever Seroincidence Vignette","text":"project supported grants National Institutes Health (NIH) National Institute Allergy Infectious Disease (R21AI176416), NIH Fogarty International Center (K01TW012177) Bill Melinda Gates Foundation.","code":""},{"path":[]},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period (Noordzij et al. 2010). Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month. mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt. definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc. perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"defining-incidence","dir":"Articles","previous_headings":"","what":"Defining incidence","title":"Methodology","text":"incidence rate disease specific time period rate individuals population acquiring disease time period (Noordzij et al. 2010). Example: 10 new cases typhoid population 1000 persons one month time period, incidence rate time period 10 new cases per 1000 persons per month.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"mathematical-definition-of-incidence","dir":"Articles","previous_headings":"","what":"Mathematical definition of incidence","title":"Methodology","text":"mathematically, incidence rate given time point derivative (.e., current rate change time) expected cumulative count infections per person risk, time: ddt𝔼[C(t)n∣N(t)=n]\\frac{d}{dt} \\mathbb{E}\\left[\\frac{C(t)}{n} \\mid N(t) =n\\right] C(t)C(t) cumulative total number infections population interest, N(t)N(t) number individuals risk time tt.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"scale-of-incidence-rates","dir":"Articles","previous_headings":"","what":"Scale of incidence rates","title":"Methodology","text":"definitions, units incidence rate “# new infections per # persons risk per time duration”; example, “new infections per 1000 persons per year”. convenience, can rescale incidence rate make easier understand; example, might express incidence “# new infections per 1000 persons per year” “# new infections per 100,000 persons per day”, etc.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"incidence-from-an-individuals-perspective","dir":"Articles","previous_headings":"","what":"Incidence from an individual’s perspective","title":"Methodology","text":"perspective individual population: incidence rate (given time point (tt) instantaneous probability (density) becoming infected time point, given risk time point. , incidence rate hazard rate. Notation: let’s use λt\\lambda_{t} denote incidence rate time tt.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"estimating-incidence-from-cross-sectional-antibody-surveys","dir":"Articles","previous_headings":"","what":"Estimating incidence from cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda. assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list). assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey. observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean. ’s look like: Figure 1: Example log(likelihood) curves standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t) Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned} Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda. likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"cross-sectional-antibody-surveys","dir":"Articles","previous_headings":"","what":"Cross-sectional antibody surveys","title":"Methodology","text":"Typically, difficult estimate changes single time point. However, can sometimes make assumptions allow us . particular, assume incidence rate constant time, can estimate incidence single cross-sectional survey. need two pieces notation formalize process. recruit participants population interest. survey participant, measure antibody levels (Y)(Y) disease interest participant recently infected time (T)(T)prior measured antibodies. participant never infected since birth, TT undefined. TT latent, unobserved variable. don’t directly observe TT; observe YY, hope tells us something TT λ\\lambda.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"modeling-assumptions","dir":"Articles","previous_headings":"","what":"Modeling assumptions","title":"Methodology","text":"assume : incidence rate approximately constant time across population (“constant homogenous incidence”) : λi,t=λ,∀,t\\lambda_{,t} = \\lambda, \\forall ,t (can analyze subpopulations separately make homogeneity plausible.) Participants always risk new infection, regardless recently infected (“lasting immunity”). (diseases like typhoid, -immunity assumption may hold exactly, hopefully approximately; modeling effects re-exposure active infection -list).","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"time-since-infection-and-incidence","dir":"Articles","previous_headings":"","what":"Time since infection and incidence","title":"Methodology","text":"assumptions: TT exponential distribution: 𝕡(T=t)=λexp{−λt}\\mathbb{p}(T=t) = \\lambda \\exp{\\left\\{-\\lambda t\\right\\}} precisely, distribution exponential truncated age observation (aa): 𝕡(T=t|=)=1t∈[0,]λexp{−λt}+1t=NAexp{−λa}\\mathbb{p}(T=t|=) = 1_{t \\[0,]}\\lambda \\exp{\\left\\{-\\lambda t\\right\\}} + 1_{t = \\text{NA}} \\exp{\\left\\{-\\lambda \\right\\}} rate parameter λ\\lambda incidence rate time--event model, looking backwards time survey date (blood sample collected). probability individual last infected tt days ago, p(T=t)p(T=t), equal probability infected time tt (.e., incidence rate time tt, λ\\lambda) times probability infected time tt, turns exp(−λt)\\exp(-\\lambda t). distribution TT truncated patient’s birth date; probability never infected exp{−λa}\\exp{\\left\\{-\\lambda \\right\\}}, aa patient’s age time survey.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"likelihood-of-latent-infection-times","dir":"Articles","previous_headings":"","what":"Likelihood of latent infection times","title":"Methodology","text":"observe TT, estimate λ\\lambda using typical maximum likelihood approach. Starting likelihood: Taking logarithm likelihood: Taking derivative log-likelihood find score function: Setting score function equal 0 find score equation, solving score equation λ\\lambda find maximum likelihood estimate: ℒ*(λ)=∏=1n𝕡(T=ti)=∏=1nλexp(−λti)\\mathcal{L}^*(\\lambda) = \\prod_{=1}^n \\mathbb{p}(T=t_i) = \\prod_{=1}^n \\lambda \\exp(-\\lambda t_i) ℓ*(λ)=log{ℒ*(λ)}=∑=1nlog{λ}−λti\\ell^*(\\lambda) = \\log{\\left\\{\\mathcal{L}^*(\\lambda)\\right\\}} = \\sum_{=1}^n \\log{\\left\\{\\lambda\\right\\}} -\\lambda t_i ℓ*′(λ)=∑=1nλ−1−ti\\ell^{*'}(\\lambda) = \\sum_{=1}^n \\lambda^{-1} - t_i λ̂ML=n∑=1nti=1t‾\\hat{\\lambda}_{\\text{ML}} = \\frac{n}{\\sum_{=1}^n t_i} = \\frac{1}{\\bar{t}} MLE turns inverse mean.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"example-log-likelihood-curves","dir":"Articles","previous_headings":"","what":"Example log-likelihood curves","title":"Methodology","text":"’s look like: Figure 1: Example log(likelihood) curves","code":"library(serocalculator) library(dplyr) Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  # Import cross-sectional data from OSF and rename required variables: xs_data <-   \"https://osf.io/download//n6cp3/\" %>%   load_pop_data()  noise <- url(\"https://osf.io/download//hqy4v/\") %>% readRDS() lik_HlyE_IgA <- graph_loglik(   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgA\",   log_x = TRUE )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"standard-error","dir":"Articles","previous_headings":"","what":"standard error","title":"Methodology","text":"standard error estimate approximately equal inverse rate curvature (2nd derivative, aka Hessian) log-likelihood function, maximum: curvature -> likelihood peak clearer -> smaller standard errors","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"likelihood-of-observed-data","dir":"Articles","previous_headings":"","what":"Likelihood of observed data","title":"Methodology","text":"Unfortunately, don’t observe infection times TT; observe antibody levels Y{Y}. things get little complicated. short, hoping can estimate TT (time since last infection) YY (current antibody levels). , plug estimates t̂\\hat t_i likelihood , estimate λ\\lambda previously. ’re actually going something little nuanced; instead just using one value t̂\\hat t, going consider possible values tt individual. need link data actually observed incidence rate. likelihood individual’s observed data, 𝕡(Y=y)\\mathbb{p}(Y=y), can expressed integral joint likelihood YY TT (using Law Total Probability): 𝕡(Y=y)=∫t𝕡(Y=y,T=t)dt\\mathbb{p}(Y=y) = \\int_t \\mathbb{p}(Y=y,T=t)dt , can express joint probability p(Y=y,T=t)p(Y=y,T=t) product p(T=t)p(T=t) p(Y=y|T=t)p(Y=y|T=t) “antibody response curve infection”. : 𝕡(Y=y,T=t)=𝕡(Y=y|T=t)𝕡(T=t)\\mathbb{p}(Y=y,T=t) = \\mathbb{p}(Y=y|T=t) \\mathbb{p}(T=t)","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"antibody-response-curves","dir":"Articles","previous_headings":"","what":"Antibody response curves","title":"Methodology","text":"Figure 2: Antibody response curves, p(Y=y|T=t)p(Y=y|T=t), typhoid","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"putting-it-all-together","dir":"Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"Substituting p(Y=y,T=t)=p(Y=y|T=t)P(T=t)p(Y=y,T=t) = p(Y=y|T=t)P(T=t) previous expression p(Y=y)p(Y=y): p(Y=y)=∫tp(Y=y|T=t)P(T=t)dt \\begin{aligned} p(Y=y) &= \\int_t p(Y=y|T=t)P(T=t) dt \\end{aligned}","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"composing-the-likelihood","dir":"Articles","previous_headings":"","what":"Composing the likelihood","title":"Methodology","text":"Now, likelihood observed data 𝐲=(y1,y2,...,yn)\\mathbf{y} = (y_1, y_2, ..., y_n) : ℒ(λ)=∏=1np(Y=yi)=∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt \\begin{aligned} \\mathcal{L}(\\lambda) &= \\prod_{=1}^n p(Y=y_i) \\\\&= \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ \\end{aligned} know p(Y=y|T=t)p(Y=y|T=t), can maximize ℒ(λ)\\mathcal{L}(\\lambda) λ\\lambda find “maximum likelihood estimate” (MLE) λ\\lambda, denoted λ̂\\hat\\lambda.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"finding-the-mle-numerically","dir":"Articles","previous_headings":"","what":"Finding the MLE numerically","title":"Methodology","text":"likelihood YY involves product integrals, log-likelihood involves sum logs integrals: logℒ(λ)=log∏=1n∫tp(Y=yi|T=t)pλ(T=t)dt=∑=1nlog{∫tp(Y=yi|T=t)pλ(T=t)dt} \\begin{aligned} \\log \\mathcal{L} (\\lambda) &= \\log \\prod_{=1}^n \\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\\\ &= \\sum_{=1}^n \\log\\left\\{\\int_t p(Y=y_i|T=t)p_\\lambda(T=t)dt\\right\\}\\\\ \\end{aligned} derivative expression doesn’t come cleanly, use numerical method (specifically, Newton-type algorithm, implemented stats::nlm()) find MLE corresponding standard error.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"modeling-the-seroresponse-kinetics-curve","dir":"Articles","previous_headings":"","what":"Modeling the seroresponse kinetics curve","title":"Methodology","text":"Now, need model antibody response infection, 𝕡(Y=y|T=t)\\mathbb{p}(Y=y|T=t). current version serocalculator package uses two-phase model shape seroresponse (Teunis et al. 2016). first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model (Volterra 1928) pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model. b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha. serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure. also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":"cur_ai <- \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 <-   curves %>%   filter(     iter == 5,     antigen_iso == cur_ai   ) library(ggplot2)  curve1 |>   serocalculator:::plot_curve_params_one_ab(     log_y = FALSE   ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(       xintercept = curve1$t1,       col = \"t1\"     )   ) +    geom_hline(     aes(       yintercept = curve1$y0,       col = \"y0\"     )   ) +     geom_hline(     aes(       yintercept = curve1$y1,       col = \"y1\"     )   ) +   geom_point(     data = curve1,     aes(       x = t1,       y = y1,       col = \"(t1,y1)\"     )   ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"model-for-active-infection-period","dir":"Articles","previous_headings":"","what":"Model for active infection period","title":"Methodology","text":"first phase model represents active infection period, uses simplified Lotka-Volterra predator-prey model (Volterra 1928) pathogen prey antibodies predator: Notation: x(t)x(t): Pathogen concentration time tt y(t)y(t): Antibody concentration time tt Model: x′(t)=αx(t)−βy(t)x'(t) = \\alpha x(t) - \\beta y(t) y′(t)=δy(t)y'(t) = \\delta y(t) baseline antibody concentration y(0)=y0y(0) = y_{0} initial pathogen concentration x(0)=x0x(0) = x_{0}. Compared standard LV model: predation term β\\beta coefficient missing prey concentration x(t)x(t) factor; assume efficiency predation doesn’t depend pathogen concentration. differential equation predator density missing predator death rate term −γy(t)-\\gamma y(t); assume long pathogens present, antibody decay rate negligible compared growth rate. predator growth rate term δy(t)\\delta y(t) missing prey density factor x(t)x(t) assume long pathogens present, antibody concentration grows exponential rate. omissions made simplify estimation process, assumption negligible compared terms model.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"model-for-post-infection-antibody-decay","dir":"Articles","previous_headings":"","what":"Model for post-infection antibody decay","title":"Methodology","text":"b(t)=0b(t) = 0 y′(t)=−αy(t)ry^{\\prime}(t) = -\\alpha y(t)^r Antibody decay different exponential (log–linear) decay. shape parameter r>1r > 1, log concentrations decrease rapidly infection terminated, decay slows low antibody concentrations maintained long period. r=1r = 1, model reduces exponential decay decay rate α\\alpha.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"putting-it-all-together-1","dir":"Articles","previous_headings":"","what":"Putting it all together","title":"Methodology","text":"serum antibody response y(t)y(t) can written y(t)=y+(t)+y−(t) y(t) = y_{+}(t) + y_{-}(t) y+(t)=y0eμt[0≤t<t1]y−(t)=y1(1+(r−1)y1r−1α(t−t1))−1r−1[t1≤t<∞] \\begin{align} y_{+}(t) & = y_{0}\\text{e}^{\\mu t}[0\\leq t <t_{1}]\\\\ y_{-}(t) & = y_{1}\\left(1+(r-1)y_{1}^{r-1}\\alpha(t-t_{1})\\right)^{-\\frac{1}{r-1}}[t_{1}\\le t < \\infty] \\end{align} Since peak level y1=y0eμt1y_{1} = y_{0}\\text{e}^{\\mu t_{1}} growth rate μ\\mu can written μ=1t1log(y1y0)\\mu = \\frac{1}{t_{1}}\\log\\left(\\frac{y_{1}}{y_{0}}\\right) Figure 3: example kinetics curve HlyE IgG antibody level t=0t=0 y0y_{0}; rising branch ends t=t1t = t_{1} peak antibody level y1y_{1} reached. antibody level y(t)∈(y0,y1)y(t) \\(y_{0}, y_{1}) eventually occurs twice. interactive Shiny app allows user manipulate model parameters available : https://ucdserg.shinyapps.io/antibody-kinetics-model-2/  QR code shiny app","code":"cur_ai <- \"HlyE_IgG\" library(serocalculator) library(dplyr) # Import longitudinal antibody parameters from OSF curves <-   \"https://osf.io/download/rtw5k/\" %>%   load_curve_params() %>%   filter(iter < 50)  curve1 <-   curves %>%   filter(     iter == 5,     antigen_iso == cur_ai   ) library(ggplot2)  curve1 |>   serocalculator:::plot_curve_params_one_ab(     log_y = FALSE   ) +   xlim(0, 100) +   theme_minimal() +   geom_vline(     aes(       xintercept = curve1$t1,       col = \"t1\"     )   ) +    geom_hline(     aes(       yintercept = curve1$y0,       col = \"y0\"     )   ) +     geom_hline(     aes(       yintercept = curve1$y1,       col = \"y1\"     )   ) +   geom_point(     data = curve1,     aes(       x = t1,       y = y1,       col = \"(t1,y1)\"     )   ) +   theme(legend.position = \"bottom\") +   labs(col = \"\") Scale for x is already present. Adding another scale for x, which will replace the existing scale."},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"biological-noise","dir":"Articles","previous_headings":"","what":"Biological noise","title":"Methodology","text":"measure antibody concentrations blood sample, essentially counting molecules (using biochemistry). might miss antibodies (undercount, false negatives) also might incorrectly count molecules aren’t actually ones looking (overcount, false positives, cross-reactivity). concerned overcount (cross-reactivity) undercount. given antibody, can analytical work beforehand estimate distribution overcounts, add model p(Y=y|T=t)p(Y=y|T=t). Notation: yobsy_\\text{obs}: measured serum antibody concentration ytruey_\\text{true}: “true” serum antibody concentration ϵb\\epsilon_b: noise due probe cross-reactivity Model: yobs=ytrue+ϵby_\\text{obs} = y_\\text{true} + \\epsilon_b ϵb∼Unif(0,ν)\\epsilon_b \\sim \\text{Unif}(0, \\nu) ν\\nu needs pre-estimated using negative controls, typically using 95th percentile distribution antibody responses antigen-isotype population exposure.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/methodology.html","id":"measurement-noise","dir":"Articles","previous_headings":"","what":"Measurement noise","title":"Methodology","text":"also sources noise bioassays; user differences pipetting technique, random ELISA plate effects, etc. noise can cause overcount undercount. can also estimate magnitude noise source include p(Y=y|T=t)p(Y=y|T=t). Measurement noise, ε\\varepsilon (“epsilon”), represents measurement error laboratory testing process. defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate.","code":""},{"path":[]},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/scrubTyphus_example.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Scrub Typhus Seroincidence Vignette","text":"vignette reproduces analysis : Estimating seroincidence scrub typhus using antibody dynamics following infection (Aiemjoy et al. (Accepted Feb 2024)).","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/scrubTyphus_example.html","id":"methods","dir":"Articles","previous_headings":"","what":"Methods","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis et al. (2012), developed subsequent publications deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/scrubTyphus_example.html","id":"the-seroincidence-estimator","dir":"Articles","previous_headings":"Methods","what":"The Seroincidence Estimator","title":"Scrub Typhus Seroincidence Vignette","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/scrubTyphus_example.html","id":"scrub-typhus-seroincidence","dir":"Articles","previous_headings":"","what":"Scrub Typhus Seroincidence","title":"Scrub Typhus Seroincidence Vignette","text":"Scrub typhus, vector-borne bacterial infection, important neglected disease globally. Accurately characterizing burden challenging due non-specific symptoms limited diagnostics. Prior seroepidemiology studies struggled find consensus cutoffs permit comparing estimates across contexts time. study, present novel approach require cutoff instead uses information antibody kinetics infection estimate seroincidence. use data three cohorts scrub typhus patients Chiang Rai, Thailand, Vellore, India characterize antibody kinetics infection two population serosurveys Kathmandu valley, Nepal, Tamil Nadu, India estimate seroincidence. samples tested IgM IgG responses Orientia tsutsugamushi-derived recombinant 56-kDa antigen using commercial ELISA kits. used Bayesian hierarchical models characterize antibody responses scrub typhus infection used joint distributions peak antibody titers decay rates estimate population-level incidence rates cross-sectional serosurveys.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/scrubTyphus_example.html","id":"load-packages","dir":"Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load packages","title":"Scrub Typhus Seroincidence Vignette","text":"first step conducting analysis load necessary packages. haven’t installed already, need loading. also need tidyverse mixtools packages installed data manipulation graphics operations perform vignette. Please see websites serocalculator, tidyverse, mixtools guidance installing packages R package library. three packages installed, can load active R session environment:","code":"library(serocalculator) library(tidyverse) library(mixtools)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/scrubTyphus_example.html","id":"load-data","dir":"Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Load data","title":"Scrub Typhus Seroincidence Vignette","text":"Pathogen-specific sample datasets, noise parameters, longitudinal antibody dynamics serocalculator available Serocalculator Repository Open Science Framework (OSF). pull data directly R environment.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/scrubTyphus_example.html","id":"load-and-prepare-longitudinal-parameter-data","dir":"Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare longitudinal parameter data","title":"Scrub Typhus Seroincidence Vignette","text":"first load longitudinal curve parameters set antibody decay parameters. parameters modeled Bayesian hierarchical models fit two-phase power-function decay models longitudinal antibody responses among confirmed enteric fever cases.","code":"# Import longitudinal antibody parameters from OSF  curves <-   \"https://osf.io/download/u5gxh/\" %>%   load_curve_params()"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/scrubTyphus_example.html","id":"visualize-curve-parameters","dir":"Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize curve parameters","title":"Scrub Typhus Seroincidence Vignette","text":"can graph decay curves autoplot() method:","code":"curves %>% autoplot()"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/scrubTyphus_example.html","id":"load-and-prepare-cross-sectional-data","dir":"Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Load and prepare cross-sectional data","title":"Scrub Typhus Seroincidence Vignette","text":"Next, load sample cross-sectional data.","code":"# Import cross-sectional data from OSF and rename required variables xs_data <- load_pop_data(   file_path = \"https://osf.io/download/h5js4/\",   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/scrubTyphus_example.html","id":"check-formatting","dir":"Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Check formatting","title":"Scrub Typhus Seroincidence Vignette","text":"can check xs_data correct formatting using check_pop_data() function:","code":"xs_data %>% check_pop_data(verbose = TRUE) #> data format is as expected."},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/scrubTyphus_example.html","id":"summarize-antibody-data","dir":"Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Summarize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"can compute numerical summaries cross-sectional antibody data summary() method pop_data objects:","code":"xs_data %>% summary(strata = \"country\") #> Warning: There were 2 warnings in `dplyr::summarize()`. #> The first warning was: #> ℹ In argument: `across(...)`. #> ℹ In group 4: `antigen_iso = OT56kda_IgM` and `country = Nepal`. #> Caused by warning in `min()`: #> ! no non-missing arguments to min; returning Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning. #>  #> n = 1608  #>  #> Distribution of age:  #>  #> # A tibble: 2 × 8 #>   country     n   min first_quartile median  mean third_quartile   max #>   <fct>   <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 India     721  18             40     49    50.5           62    87   #> 2 Nepal     887   0.9            5.5   10.9  11.6           17.0  27.4 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 4 × 8 #>   antigen_iso country     Min `1st Qu.` Median `3rd Qu.`     Max `# NAs` #>   <fct>       <fct>     <dbl>     <dbl>  <dbl>     <dbl>   <dbl>   <int> #> 1 OT56kda_IgG India     0.05      0.111  0.222     2.56     3.81       0 #> 2 OT56kda_IgM India     0.051     0.1    0.139     0.229    3.60       0 #> 3 OT56kda_IgG Nepal     0.112     0.335  0.464     0.602    3.29       0 #> 4 OT56kda_IgM Nepal   Inf        NA     NA        NA     -Inf       1105"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/scrubTyphus_example.html","id":"visualize-antibody-data","dir":"Articles","previous_headings":"Scrub Typhus Seroincidence > Load data","what":"Visualize antibody data","title":"Scrub Typhus Seroincidence Vignette","text":"Let’s also take look antibody responses change age.","code":"# Plot antibody responses by age autoplot(object = xs_data, type = \"age-scatter\", strata = \"country\") #> Warning: Removed 1105 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/scrubTyphus_example.html","id":"compile-noise-parameters","dir":"Articles","previous_headings":"Scrub Typhus Seroincidence","what":"Compile noise parameters","title":"Scrub Typhus Seroincidence Vignette","text":"Next, must set conditions based assumptions data errors may need accounted . differ based background knowledge data. biological noise, ν\\nu (“nu”), represents error cross-reactivity antibodies. Measurement noise, ε\\varepsilon (“epsilon”), represents error laboratory testing process. Formatting Specifications: Noise parameter data dataframe one row antigen isotype columns noise parameter . Note variable names case-sensitive.","code":"# biologic noise b_noise <- xs_data %>%   group_by(antigen_iso) %>%   filter(!is.na(value)) %>%   filter(age < 40) %>% # restrict to young ages to capture recent exposures   do({     set.seed(54321)     # Fit the mixture model     mixmod <- normalmixEM(.$value, k = 2, maxit = 1000)     # k is the number of components, adjust as necessary     # Assuming the first component is the lower distribution:     lower_mu <- mixmod$mu[1]     lower_sigma <- sqrt(mixmod$sigma[1])     # Calculate the 90th percentile of the lower distribution     percentile75 <- qnorm(       0.75,       lower_mu,       lower_sigma     )     # Return the results     data.frame(antigen_iso = .$antigen_iso[1],                percentile75 = percentile75)   }) #> number of iterations= 35  #> number of iterations= 24    # define conditional parameters noise <- data.frame(   antigen_iso = c(\"OT56kda_IgG\", \"OT56kda_IgM\"),   nu = as.numeric(c(b_noise[2, 2], b_noise[1, 2])), # Biologic noise (nu)   eps = c(0.2, 0.2), # M noise (eps)   y.low = c(0.2, 0.2), # low cutoff (llod)   y.high = c(200, 200) ) %>% # high cutoff (y.high)   mutate(across(where(is.numeric), round, digits = 2))"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site","dir":"Articles","previous_headings":"","what":"Estimate Seroincidence by study site","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates.","code":"# Using est.incidence.by (strata)  est <- est.incidence.by(   strata = c(\"country\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country  #>  #>  Seroincidence estimates: #> # A tibble: 2 × 13 #>   Stratum country     n est.start incidence.rate      SE  CI.lwr CI.upr coverage #>   <chr>   <fct>   <int>     <dbl>          <dbl>   <dbl>   <dbl>  <dbl>    <dbl> #> 1 Stratu… India     721       0.1        0.0202  0.00148 0.0175  0.0233     0.95 #> 2 Stratu… Nepal    1105       0.1        0.00854 0.00107 0.00668 0.0109     0.95 #> # ℹ 4 more variables: log.lik <dbl>, iterations <int>, antigen.isos <chr>, #> #   nlm.convergence.code <ord>"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/scrubTyphus_example.html","id":"estimate-seroincidence-by-study-site-and-age-strata","dir":"Articles","previous_headings":"","what":"Estimate Seroincidence by study site and age strata","title":"Scrub Typhus Seroincidence Vignette","text":"Now ready begin estimating seroincidence. use est.incidence.calculate stratified seroincidence rates. Let’s visualize seroincidence estimates strata.","code":"# Using est.incidence.by (strata)  est2 <- est.incidence.by(   strata = c(\"country\", \"ageQ\"),   pop_data = xs_data,   curve_params = curves,   noise_params = noise,   antigen_isos = c(\"OT56kda_IgG\"),   num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning: Some strata are completely missing one or more biomarkers. #>        ageQ #> country 0-17 18-29 30-49 50-89 #>   India    0   118   604   720 #>   Nepal 1752   458     0     0 #> Warning in warn.missing.strata(data = curve_params, strata = strata %>% : curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in warn.missing.strata(data = noise_params, strata = strata %>% : noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning in check_parallel_cores(.): This computer appears to have 4 cores #> available. `est.incidence.by()` has reduced its `num_cores` argument to 3 to #> avoid destabilizing the computer.  summary(est2) #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : OT56kda_IgG  #> b) Strata       : country, ageQ  #>  #>  Seroincidence estimates: #> # A tibble: 5 × 14 #>   Stratum   country ageQ      n est.start incidence.rate      SE  CI.lwr  CI.upr #>   <chr>     <fct>   <fct> <int>     <dbl>          <dbl>   <dbl>   <dbl>   <dbl> #> 1 Stratum 1 India   18-29    59       0.1        0.00985 0.00330 0.00511 0.0190  #> 2 Stratum 2 India   30-49   302       0.1        0.0151  0.00178 0.0120  0.0190  #> 3 Stratum 3 India   50-89   360       0.1        0.0288  0.00290 0.0236  0.0350  #> 4 Stratum 4 Nepal   0-17    876       0.1        0.00606 0.00108 0.00428 0.00860 #> 5 Stratum 5 Nepal   18-29   229       0.1        0.0144  0.00259 0.0101  0.0205  #> # ℹ 5 more variables: coverage <dbl>, log.lik <dbl>, iterations <int>, #> #   antigen.isos <chr>, nlm.convergence.code <ord> # Plot seroincidence estimates  # Save summary(est) as a dataframe estdf <- summary(est) %>%   mutate(ageQ = \"Overall\")  # Save summary(est2) as a dataframe est2df <- summary(est2)   est_comb <- rbind(estdf, est2df)  # Create barplot (rescale incidence rate and CIs) ggplot(est_comb, aes(y = ageQ, x = incidence.rate * 1000, fill = country)) +   geom_bar(     stat = \"identity\",     position = position_dodge2(width = 0.8, preserve = \"single\")   ) +   geom_linerange(aes(xmin = CI.lwr * 1000, xmax = CI.upr * 1000),                  position = position_dodge2(width = 0.8, preserve = \"single\")) +   labs(title = \"Enteric Fever Seroincidence by Catchment Area\",        x = \"Seroincience rate per 1000 person-years\",        y = \"Catchment\") +   theme_bw() +   facet_wrap(~ country) +   theme(axis.text.y = element_text(size = 11),         axis.text.x = element_text(size = 11)) +   scale_fill_manual(values = c(\"orange2\", \"#39558CFF\", \"red\"))"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/scrubTyphus_example.html","id":"acknowledgments","dir":"Articles","previous_headings":"","what":"Acknowledgments","title":"Scrub Typhus Seroincidence Vignette","text":"gratefully acknowledge study participants valuable time interest participating studies","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/scrubTyphus_example.html","id":"funding","dir":"Articles","previous_headings":"","what":"Funding","title":"Scrub Typhus Seroincidence Vignette","text":"work supported National Institutes Health Fogarty International Center (FIC) [K01 TW012177] National Institute Allergy Infectious Diseases (NIAID) [R21 1AI176416]","code":""},{"path":[]},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/serocalculator.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction to serocalculator","text":"serocalculator R package provides rapid computationally simple method calculating seroconversion rates, originally published Simonsen et al. (2009) Teunis, Eijkeren, et al. (2012), developed deGraaf et al. (2014), Teunis et al. (2016), Teunis Eijkeren (2020). short, longitudinal seroresponses confirmed cases known symptom onset date assumed represent time course human serum antibodies specific pathogen. Therefore, using longitudinal antibody dynamics cross–sectional sample antibodies human population, incidence estimate can calculated. details .","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/serocalculator.html","id":"a-proxy-for-infection","dir":"Articles","previous_headings":"Overview","what":"A Proxy for Infection","title":"Introduction to serocalculator","text":"exact time infection impossible measure individual, antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. presence many high antibody concentrations indicates many people population likely experienced infection recently, mostly low concentrations indicate low frequency infections sampled population. order interpret measured cross-sectional antibody concentrations terms incidence, must define antibody dynamic time understand generalized antibody response different times since infection. dynamic must quantified time include initial increase serum antibody concentration seroconversion occurs, followed gradual decrease antibodies wane. published studies, information time course serum antibody response obtained longitudinal follow–data cases symptomatic episode following infection. case, onset symptoms provides proxy time infection occurred.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/serocalculator.html","id":"the-seroincidence-estimator","dir":"Articles","previous_headings":"Overview","what":"The Seroincidence Estimator","title":"Introduction to serocalculator","text":"serocalculator package designed calculate incidence seroconversion using longitudinal seroresponse characteristics. distribution serum antibody concentrations cross–sectional population sample calculated function longitudinal seroresponse frequency seroconversion (seroincidence). Given seroresponse, marginal distribution antibody concentrations can fitted cross-sectional data thereby providing means estimate seroincidence.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/serocalculator.html","id":"the-serocalculator-app","dir":"Articles","previous_headings":"Overview","what":"The Serocalculator App","title":"Introduction to serocalculator","text":"serocalculator app web based tool takes 5 curve parameters (y0, y1, t1, alpha, r) draw single curve antibody concentration.","code":""},{"path":[]},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/serocalculator.html","id":"methods-for-estimating-seroincidence","dir":"Articles","previous_headings":"Further reading","what":"Methods for estimating seroincidence","title":"Introduction to serocalculator","text":"Teunis Eijkeren (2020) Teunis et al. (2016)","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/serocalculator.html","id":"applications","dir":"Articles","previous_headings":"Further reading","what":"Applications","title":"Introduction to serocalculator","text":"Aiemjoy et al. (2022) Aiemjoy, Rumunu, Juma John Hassen (2022) Monge et al. (2018) Kretzschmar, Teunis, Pebody (2010) Simonsen et al. (2007) Simonsen et al. (2010) Falkenhorst et al. (2012) Teunis, Falkenhorst, et al. (2012) Demelker et al. (2006)","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/serocalculator.html","id":"quantification-of-seroresponse","dir":"Articles","previous_headings":"Further reading","what":"Quantification of seroresponse","title":"Introduction to serocalculator","text":"deGraaf et al. (2014) Berbers et al. (2013) Versteegh et al. (2005) Teunis et al. (2002)","code":""},{"path":[]},{"path":[]},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/simulate_xsectionalData.html","id":"load-model-parameters","dir":"Articles","previous_headings":"Simulate a single dataset","what":"load model parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"load longitudinal parameters; modeled SEES cases across ages countries:","code":"library(serocalculator) library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.5.1     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.4     ✔ tidyr     1.3.1 #> ✔ purrr     1.0.2      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(ggbeeswarm) # for plotting library(dplyr) dmcmc <-   \"https://osf.io/download/rtw5k\" |>   load_curve_params() |>   dplyr::filter(iter < 500) # reduce number of mcmc samples for speed"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/simulate_xsectionalData.html","id":"visualize-antibody-decay-model","dir":"Articles","previous_headings":"Simulate a single dataset","what":"visualize antibody decay model","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can graph individual MCMC samples posterior distribution model parameters using autoplot.curve_params() method autoplot() function:  can use logarithmic scale x-axis desired:  can graph median, 10%, 90% quantiles model using graph.curve.params() function:","code":"dmcmc |> autoplot(n_curves = 50) dmcmc |> autoplot(log_x = TRUE, n_curves = 50) # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  dmcmc |>   graph.curve.params(antigen_isos = antibodies) |>   print() #> Warning: Removed 47 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/simulate_xsectionalData.html","id":"simulate-cross-sectional-data","dir":"Articles","previous_headings":"Simulate a single dataset","what":"Simulate cross-sectional data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"","code":"# set seed to reproduce results set.seed(54321)  # simulated incidence rate per person-year lambda <- 0.2 # range covered in simulations lifespan <- c(0, 10) # cross-sectional sample size nrep <- 100  # biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) ) verbose <- FALSE # whether to print verbose updates as the function runs  # generate cross-sectional data csdata <- sim_pop_data(   curve_params = dmcmc,   lambda = lambda,   n_samples = nrep,   age_range = lifespan,   antigen_isos = antibodies,   n_mcmc_samples = 0,   renew_params = renew_params,   add_noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/simulate_xsectionalData.html","id":"noise-parameters","dir":"Articles","previous_headings":"Simulate a single dataset","what":"Noise parameters","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"need provide noise parameters analysis; , define directly code:","code":"library(tibble) cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/simulate_xsectionalData.html","id":"visualize-data","dir":"Articles","previous_headings":"Simulate a single dataset","what":"Visualize data","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can plot distribution antibody responses simulated data.","code":"csdata |>   ggplot() +   aes(x = as.factor(antigen_iso),       y = value) +   geom_beeswarm(     size = .2,     alpha = .3,     aes(color = antigen_iso),     show.legend = FALSE   ) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   theme_linedraw() +   labs(x = \"antigen - isotype\")"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/simulate_xsectionalData.html","id":"calculate-log-likelihood","dir":"Articles","previous_headings":"Simulate a single dataset","what":"calculate log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can calculate log-likelihood data function incidence rate directly:","code":"ll_a <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     lambda = 0.1   ) |>   print() #> [1] -266.4948  ll_g <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgG\",     lambda = 0.1   ) |>   print() #> [1] -406.6665  ll_ag <-   log_likelihood(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),     lambda = 0.1   ) |>   print() #> [1] -673.1613  print(ll_a + ll_g) #> [1] -673.1613"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/simulate_xsectionalData.html","id":"graph-log-likelihood","dir":"Articles","previous_headings":"Simulate a single dataset","what":"graph log-likelihood","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can also graph log-likelihoods, even without finding MLEs, using graph_loglik():","code":"lik_HlyE_IgA <-   graph_loglik(     pop_data = csdata,     curve_params = dmcmc,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE   )  lik_HlyE_IgG <- graph_loglik(   previous_plot = lik_HlyE_IgA,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = \"HlyE_IgG\",   log_x = TRUE )  lik_both <- graph_loglik(   previous_plot = lik_HlyE_IgG,   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   log_x = TRUE )  print(lik_both)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/simulate_xsectionalData.html","id":"estimate-incidence","dir":"Articles","previous_headings":"Simulate a single dataset","what":"estimate incidence","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"can estimate incidence est.incidence(): can extract summary statistics summary(): can plot log-likelihood curve autoplot():  can set x-axis logarithmic scale:","code":"est1 <- est.incidence(   pop_data = csdata,   curve_params = dmcmc,   noise_params = cond,   lambda_start = .1,   build_graph = TRUE,   verbose = verbose,   print_graph = FALSE, # display the log-likelihood curve while   #`est.incidence()` is running   antigen_isos = antibodies ) summary(est1) #> Warning: `nlm()` produced a negative hessian; something is wrong with the numerical #> derivatives. #> Warning in sqrt(var_log_lambda): NaNs produced #> # A tibble: 1 × 10 #>   est.start incidence.rate    SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl> <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.253   NaN    NaN    NaN     0.95   -645.          9 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord> autoplot(est1) autoplot(est1, log_x = TRUE)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/simulate_xsectionalData.html","id":"simulate-multiple-clusters-with-different-lambdas","dir":"Articles","previous_headings":"","what":"Simulate multiple clusters with different lambdas","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"preceding code chunk, determined can use 3 CPU cores run computations parallel. can plot distributions simulated responses:","code":"library(parallel) n_cores <- max(1, parallel::detectCores() - 1) print(n_cores) #> [1] 3 # number of clusters nclus <- 5 # cross-sectional sample size nrep <- 100  # incidence rate in e lambdas <- c(.05, .1, .15, .2, .5, .8)  sim_df <-   sim_pop_data_multi(     n_cores = n_cores,     lambdas = lambdas,     nclus = nclus,     n_samples = nrep,     age_range = lifespan,     antigen_isos = antibodies,     renew_params = renew_params,     add_noise = TRUE,     curve_params = dmcmc,     noise_limits = dlims,     format = \"long\"   )  print(sim_df) #> # A tibble: 6,000 × 6 #>      age id    antigen_iso value lambda.sim cluster #>    <dbl> <chr> <chr>       <dbl>      <dbl>   <int> #>  1  3.53 1     HlyE_IgA    0.842       0.05       1 #>  2  3.53 1     HlyE_IgG    0.767       0.05       1 #>  3  2.27 2     HlyE_IgA    0.428       0.05       1 #>  4  2.27 2     HlyE_IgG    0.544       0.05       1 #>  5  9.05 3     HlyE_IgA    0.528       0.05       1 #>  6  9.05 3     HlyE_IgG    0.768       0.05       1 #>  7  5.94 4     HlyE_IgA    0.412       0.05       1 #>  8  5.94 4     HlyE_IgG    0.683       0.05       1 #>  9  9.88 5     HlyE_IgA    0.467       0.05       1 #> 10  9.88 5     HlyE_IgG    0.285       0.05       1 #> # ℹ 5,990 more rows sim_df |>   ggplot() +   aes(     x = as.factor(cluster),     y = value   ) +   geom_beeswarm(size = .2, alpha = .3, aes(color = antigen_iso)) +   geom_boxplot(outlier.colour = NA, fill = NA) +   scale_y_log10() +   facet_wrap(~ antigen_iso + lambda.sim, nrow = 2) +   theme_linedraw()"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/simulate_xsectionalData.html","id":"estimate-incidence-in-each-cluster","dir":"Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"Estimate incidence in each cluster","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"summary(ests) produces tibble() extra meta-data: can explore summary table interactively using DT::datatable() can plot likelihood single simulated cluster subsetting simulation ests calling plot():  can also plot log-likelihood curves several clusters (computer might struggle plot many ):  log_x argument also works :","code":"ests <-   est.incidence.by(     pop_data = sim_df,     curve_params = dmcmc,     noise_params = cond,     num_cores = n_cores,     strata = c(\"lambda.sim\", \"cluster\"),     curve_strata_varnames = NULL,     noise_strata_varnames = NULL,     verbose = verbose,     build_graph = TRUE, # slows down the function substantially     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\")   ) ests_summary <- ests |> summary() |> print() #> Warning in sqrt(var_log_lambda): NaNs produced #> Warning in sqrt(var_log_lambda): NaNs produced #> Seroincidence estimated given the following setup: #> a) Antigen isotypes   : HlyE_IgG, HlyE_IgA  #> b) Strata       : lambda.sim, cluster  #>  #>  Seroincidence estimates: #> # A tibble: 30 × 14 #>    Stratum    lambda.sim cluster     n est.start incidence.rate      SE CI.lwr #>    <chr>           <dbl>   <int> <int>     <dbl>          <dbl>   <dbl>  <dbl> #>  1 Stratum 1        0.05       1   100       0.1         0.0741 0.0111  0.0552 #>  2 Stratum 2        0.05       2   100       0.1         0.0605 0.00992 0.0438 #>  3 Stratum 3        0.05       3   100       0.1         0.0553 0.00952 0.0395 #>  4 Stratum 4        0.05       4   100       0.1         0.0535 0.00930 0.0381 #>  5 Stratum 5        0.05       5   100       0.1         0.0522 0.00898 0.0372 #>  6 Stratum 6        0.1        1   100       0.1         0.0928 0.0131  0.0703 #>  7 Stratum 7        0.1        2   100       0.1         0.0808 0.0123  0.0600 #>  8 Stratum 8        0.1        3   100       0.1         0.0864 0.0547  0.0250 #>  9 Stratum 9        0.1        4   100       0.1         0.0735 0.0112  0.0545 #> 10 Stratum 10       0.1        5   100       0.1         0.117  0.0149  0.0911 #> # ℹ 20 more rows #> # ℹ 6 more variables: CI.upr <dbl>, coverage <dbl>, log.lik <dbl>, #> #   iterations <int>, antigen.isos <chr>, nlm.convergence.code <ord> library(DT) ests_summary |>   DT::datatable(options = list(scrollX = TRUE)) |>   DT::formatRound(     columns = c(       \"incidence.rate\",       \"SE\",       \"CI.lwr\",       \"CI.upr\",       \"log.lik\"     )   ) autoplot(ests[1]) autoplot(ests[1:5]) autoplot(ests[1:5], log_x = TRUE)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/simulate_xsectionalData.html","id":"nlm-convergence-codes","dir":"Articles","previous_headings":"Simulate multiple clusters with different lambdas > Estimate incidence in each cluster","what":"nlm() convergence codes","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Make sure check nlm() exit codes (codes 3-5 indicate possible non-convergence): Solutions nlm() exit codes 3-5: 3: decrease stepmin argument est.incidence()/est.incidence.() 4: increase iterlim argument est.incidence()/est.incidence.() 5: increase stepmax argument est.incidence()/est.incidence.() can extract indices problematic strata, : clusters problems, can take look:  fits don’t appear maximum likelihood, re-run clusters, adjusting nlm() settings appropriately, sure.","code":"ests_summary |>   as_tibble() |> # removes extra meta-data   select(Stratum, nlm.convergence.code) |>   filter(nlm.convergence.code > 2) #> # A tibble: 2 × 2 #>   Stratum    nlm.convergence.code #>   <chr>      <ord>                #> 1 Stratum 11 3                    #> 2 Stratum 27 3 problem_strata <-   which(ests_summary$nlm.convergence.code > 2) |>   print() #> [1] 11 27 if (length(problem_strata) > 0) {   autoplot(ests[problem_strata], log_x = TRUE) }"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/simulate_xsectionalData.html","id":"plot-distribution-of-estimates-by-simulated-incidence-rate","dir":"Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"plot distribution of estimates by simulated incidence rate","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Finally, can look simulation results:","code":"library(ggplot2) ests_summary |>   autoplot(xvar = \"lambda.sim\") +   ggplot2::geom_function(     fun = function(x) x,     col = \"red\",     aes(linetype = \"data-generating incidence rate\")   ) +   labs(linetype = \"\") +   scale_x_log10() #> Warning in scale_x_log10(): log-10 transformation introduced #> infinite values."},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/articles/simulate_xsectionalData.html","id":"effect-of-renew_params","dir":"Articles","previous_headings":"Simulate multiple clusters with different lambdas","what":"Effect of renew_params","title":"Generate a simulated cross-sectional sample and estimate seroincidence","text":"Setting renew_params = TRUE realistic, accounted current method; population samples populations high incidence rates, may bias:","code":"sim_df_renew <-   sim_pop_data_multi(     n_cores = n_cores,     lambdas = lambdas,     nclus = nclus,     n_samples = nrep,     age_range = lifespan,     antigen_isos = antibodies,     renew_params = TRUE,     add_noise = TRUE,     curve_params = dmcmc,     noise_limits = dlims,     format = \"long\"   )  ests_renew <-   est.incidence.by(     pop_data = sim_df_renew,     curve_params = dmcmc,     noise_params = cond,     num_cores = n_cores,     strata = c(\"lambda.sim\", \"cluster\"),     curve_strata_varnames = NULL,     noise_strata_varnames = NULL,     verbose = verbose,     build_graph = TRUE, # slows down the function substantially     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\")   ) ests_renew_summary <-   ests_renew |> summary() #> Warning in sqrt(var_log_lambda): NaNs produced #> Warning in sqrt(var_log_lambda): NaNs produced #> Warning in sqrt(var_log_lambda): NaNs produced #> Warning in sqrt(var_log_lambda): NaNs produced ests_renew_summary |>   autoplot(xvar = \"lambda.sim\") +   ggplot2::geom_function(     fun = function(x) x,     col = \"red\",     aes(linetype = \"data-generating incidence rate\")   ) +   labs(linetype = \"\") +   scale_x_log10() #> Warning in scale_x_log10(): log-10 transformation introduced #> infinite values."},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Teunis. Author, copyright holder.           Author method original code. Kristina Lai. Author, maintainer. Chris Orwa. Author. Kristen Aiemjoy. Author. Douglas Ezra Morrison. Author.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Teunis P, Lai K, Orwa C, Aiemjoy K, Morrison D (2025). serocalculator: Estimating Infection Rates Serological Data. R package version 1.3.0.9013, https://github.com/UCD-SERG/serocalculator, https://ucd-serg.github.io/serocalculator/.","code":"@Manual{,   title = {serocalculator: Estimating Infection Rates from Serological Data},   author = {Peter Teunis and Kristina Lai and Chris Orwa and Kristen Aiemjoy and Douglas Ezra Morrison},   year = {2025},   note = {R package version 1.3.0.9013,     https://github.com/UCD-SERG/serocalculator},   url = {https://ucd-serg.github.io/serocalculator/}, }"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/index.html","id":"serocalculator","dir":"","previous_headings":"","what":"Estimating Infection Rates from Serological Data","title":"Estimating Infection Rates from Serological Data","text":"Figure 1: QR code serocalculator website Antibody levels measured cross–sectional population sample can translated estimate frequency seroconversions (infections) occur sampled population. words, presence many high antibody titers indicates many individuals likely experienced infection recently burden disease high population, low titers indicate low frequency infections sampled population therefore lower burden disease. serocalculator package designed use longitudinal response characteristics using set modeled parameters characterizing longitudinal response selected serum antibodies. details underlying methods can found Getting Started.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/index.html","id":"installing-r","dir":"","previous_headings":"","what":"Installing R","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package designed used R, free, open-source software environment statistical computing graphics. end user package must access working installation R software. recommend installing base R Graphical User Interface (GUI) R RStudio. need download install R /RStudio, recommend following tutorial Hands Programming R Garrett Grolemund: Installing R RStudio: https://rstudio-education.github.io/hopr/starting.html","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/index.html","id":"installing-the-serocalculator-package","dir":"","previous_headings":"","what":"Installing the Serocalculator Package","title":"Estimating Infection Rates from Serological Data","text":"serocalculator package must installed R first use.","code":"# Install package install.packages(\"serocalculator\")"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/index.html","id":"post-installation","dir":"","previous_headings":"Installing the Serocalculator Package","what":"Post-installation","title":"Estimating Infection Rates from Serological Data","text":"Successful installation can confirmed loading package RStudio workspace exploring help files manuals distributed package: Additionally, package details can found executing following commands:","code":"# Load package \"seroincidence\". library(serocalculator)  # Show R help for the package. ?serocalculator # Show description. packageDescription(\"serocalculator\")  # Show citation. citation(\"serocalculator\")"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/index.html","id":"development-version","dir":"","previous_headings":"Installing the Serocalculator Package","what":"Development Version","title":"Estimating Infection Rates from Serological Data","text":"install development version, must install devtools R package download serocalculator GitHub. Enter code R console install packages.","code":"# Install the devtools package and the development version of serocalculator install.packages(\"devtools\") devtools::install_github(\"ucd-serg/serocalculator\")"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/index.html","id":"a-note-for-windows-users","dir":"","previous_headings":"Installing the Serocalculator Package > Development Version","what":"A Note for Windows Users","title":"Estimating Infection Rates from Serological Data","text":"launching development version serocalculator, Windows users need install Rtools, contains collection tools building employing R packages still development. can done either: devtools package installation, independently, devtools already installed.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/index.html","id":"during-devtools-installation","dir":"","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"During devtools installation","title":"Estimating Infection Rates from Serological Data","text":"prompted install additional build tools, select “Yes” Rtools installed. [!NOTE] installing Rtools, may need restart RStudio continuing install serocalculator.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/index.html","id":"independently","dir":"","previous_headings":"Installing the Serocalculator Package > Development Version > A Note for Windows Users","what":"Independently:","title":"Estimating Infection Rates from Serological Data","text":"Download Rtools https://cran.r-project.org/bin/windows/Rtools/ Run installer Rtools installation may see window asking “Select Additional Tasks”. select box “Edit system PATH”. devtools RStudio put Rtools PATH automatically needed. select box “Save version information registry”. selected default.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"Estimating Infection Rates from Serological Data","text":"questions using software package, please use Q&forum. encounter clear bug, please file issue minimal reproducible example GitHub. Another great resource Epidemiologist R Handbook, includes introductory page asking help R packages via GitHub: https://epirhandbook.com/en/getting-help.html","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/index.html","id":"contributing-to-this-project","dir":"","previous_headings":"","what":"Contributing to this project","title":"Estimating Infection Rates from Serological Data","text":"welcome contributions project - anything typo corrections new features. Please see Contributor guide information.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/ab.html","id":null,"dir":"Reference","previous_headings":"","what":"kinetics of the antibody (ab) response (power function decay) — ab","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"kinetics antibody (ab) response (power function decay)","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/ab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"","code":"ab(t, par, ...)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/ab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"t numeric vector elapsed times since start infection par numeric matrix model parameters: rows parameters columns biomarkers ... Arguments passed baseline yvec numeric vector predicted biomarker values, one biomarker kab integer indicating row read blims blims range possible baseline antibody levels","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/ab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"matrix() predicted biomarker values","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/ab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"kinetics of the antibody (ab) response (power function decay) — ab","text":"","code":"par1 <- matrix(     c(       1.11418923843475, 1, 0.12415057798022207, 0.24829344792968783,       0.01998946878312856, 0.0012360802436587237, 1.297194045996013,       1.3976510415108334, 1, 0.2159993563893431, 0.4318070551383313,       0.0015146395107173347, 0.0003580062906750277, 1.5695811573082081     ),     nrow = 7L,     ncol = 2L,     dimnames = list(       params = c(\"y0\", \"b0\", \"mu0\", \"mu1\", \"c1\", \"alpha\", \"shape_r\"),       antigen_iso = c(\"HlyE_IgA\", \"HlyE_IgG\")     )     ) t <- 0:1444 blims <- matrix(    rep(c(0, 0.5), each = 2L),    nrow = 2L,    ncol = 2L,    dimnames = list(c(\"HlyE_IgA\", \"HlyE_IgG\"), c(\"min\", \"max\"))    ) preds <- serocalculator:::ab(t = t, par = par1, blims = blims)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/as_curve_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Load antibody decay curve parameter — as_curve_params","title":"Load antibody decay curve parameter — as_curve_params","text":"Load antibody decay curve parameter","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/as_curve_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"as_curve_params(data, antigen_isos = NULL)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/as_curve_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter — as_curve_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/as_curve_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter — as_curve_params","text":"curve_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/as_curve_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter — as_curve_params","text":"","code":"library(magrittr) curve_data <-   serocalculator_example(\"example_curve_params.csv\") %>%   read.csv() %>%   as_curve_params()  print(curve_data) #> # A tibble: 500 × 8 #>        X antigen_iso  iter     y0     y1    t1     alpha     r #>    <int> <chr>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1     1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2     2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3     3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4     4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5     5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6     6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7     7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8     8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9     9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10    10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 490 more rows"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/as_noise_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Load noise parameters — as_noise_params","title":"Load noise parameters — as_noise_params","text":"Load noise parameters","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/as_noise_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — as_noise_params","text":"","code":"as_noise_params(data, antigen_isos = NULL)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/as_noise_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — as_noise_params","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/as_noise_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load noise parameters — as_noise_params","text":"noise_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/as_noise_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — as_noise_params","text":"","code":"library(magrittr) noise_data <-   serocalculator_example(\"example_noise_params.csv\") %>%   read.csv() %>%   as_noise_params()  print(noise_data) #> # A tibble: 4 × 8 #>       X antigen_iso Country  y.low   eps    nu  y.high Lab   #>   <int> <chr>       <chr>    <dbl> <dbl> <dbl>   <dbl> <chr> #> 1     1 HlyE_IgA    Pakistan 0.508 0.279  2.60 5000000 AKU   #> 2     2 HlyE_IgG    Pakistan 1.59  0.146  2.36 5000000 AKU   #> 3     3 LPS_IgA     Pakistan 5.13  0.246  2.14 5000000 AKU   #> 4     4 LPS_IgG     Pakistan 4.84  0.273  3.24 5000000 AKU"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/as_pop_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — as_pop_data","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/as_pop_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"as_pop_data(   data,   antigen_isos = NULL,   age = \"Age\",   value = \"result\",   id = \"index_id\",   standardize = TRUE )"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/as_pop_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column value character() identifying value column id character() identifying id column standardize logical() determine standardization columns","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/as_pop_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"pop_data object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/as_pop_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — as_pop_data","text":"","code":"library(magrittr) xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  print(xs_data) #> # A tibble: 200 × 8 #>    id    Country  cluster               catchment   age ageCat antigen_iso value #>    <chr> <chr>    <chr>                 <chr>     <dbl> <chr>  <chr>       <dbl> #>  1 P1    Pakistan Lyari Other           kgh        13.2 5-15   HlyE_IgA    0.568 #>  2 P3    Pakistan Gillani Railway Stat… aku        18   16+    HlyE_IgA    5.69  #>  3 P5    Pakistan Gillani Railway Stat… aku         7.3 5-15   HlyE_IgA    1.23  #>  4 P7    Pakistan Civic Centre          aku         2.6 <5     HlyE_IgA    1.08  #>  5 P9    Pakistan Gillani Railway Stat… aku         3.9 <5     HlyE_IgA    1.43  #>  6 P11   Pakistan Civic Centre          aku        13   5-15   HlyE_IgA    3.06  #>  7 P13   Pakistan Machar Colony         kgh        11   5-15   HlyE_IgA    0.779 #>  8 P15   Pakistan Machar Colony         kgh        12   5-15   HlyE_IgA    1.90  #>  9 P17   Pakistan Machar Colony         kgh        16   16+    HlyE_IgA    1.41  #> 10 P19   Pakistan Gillani Railway Stat… aku        14.4 5-15   HlyE_IgA    3.10  #> # ℹ 190 more rows"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.curve_params.html","id":null,"dir":"Reference","previous_headings":"","what":"graph antibody decay curves by antigen isotype — autoplot.curve_params","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"graph antibody decay curves antigen isotype","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.curve_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# S3 method for class 'curve_params' autoplot(   object,   antigen_isos = unique(object$antigen_iso),   ncol = min(3, length(antigen_isos)),   ... )"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.curve_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"object data.frame() curve parameters (one MCMC samples) antigen_isos antigen isotypes analyze (can subset curve_params) ncol many columns subfigures use panel plot ... Arguments passed plot_curve_params_one_ab verbose verbose output xlim range x values graph n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) rows_to_graph rows curve_params plot (overrides n_curves). alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)?","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.curve_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.curve_params.html","id":"rows-to-graph","dir":"Reference","previous_headings":"","what":"rows_to_graph","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"Note directly specify rows_to_graph calling function, row numbers enumerated separately antigen isotype; words, purposes argument, row numbers start 1 antigen isotype. currently way specify different row numbers different antigen isotypes; want , call plot_curve_params_one_ab() directly antigen isotype combine resulting panels . subset curve_params manually, passing function, set n_curves argument Inf.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.curve_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"graph antibody decay curves by antigen isotype — autoplot.curve_params","text":"","code":"# \\donttest{ library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(magrittr)  curve <-   serocalculator_example(\"example_curve_params.csv\") %>%   read.csv() %>%   as_curve_params() %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\")) %>%   autoplot()  curve  # }"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.pop_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot distribution of antibodies — autoplot.pop_data","title":"Plot distribution of antibodies — autoplot.pop_data","text":"autoplot() method pop_data objects","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.pop_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"# S3 method for class 'pop_data' autoplot(object, log = FALSE, type = \"density\", strata = NULL, ...)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.pop_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot distribution of antibodies — autoplot.pop_data","text":"object pop_data object (load_pop_data()) log whether show antibody responses logarithmic scale type option choose type chart: current options \"density\" \"age-scatter\" strata name variable pop_data stratify (NULL stratification) ... unused","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.pop_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot distribution of antibodies — autoplot.pop_data","text":"ggplot2::ggplot object","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.pop_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot distribution of antibodies — autoplot.pop_data","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2) library(magrittr)  xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  xs_data %>% autoplot(strata = \"catchment\", type = \"density\")  xs_data %>% autoplot(strata = \"catchment\", type = \"age-scatter\")  # }"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.seroincidence.by.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"Plots log-likelihood curves stratum, seroincidence.objects","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.seroincidence.by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' autoplot(object, ncol = min(3, length(object)), ...)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.seroincidence.by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object '\"seroincidence.\"' object (est.incidence.()) ncol number columns use panel plots ... Arguments passed autoplot.seroincidence log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)?","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.seroincidence.by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"object class \"ggarrange\", ggplot2::ggplot() list() ggplot2::ggplot()s.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.seroincidence.by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot seroincidence.by log-likelihoods — autoplot.seroincidence.by","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8, #Allow for parallel processing to decrease run time   build_graph = TRUE ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Error in (function (pop_data, curve_params, noise_params, antigen_isos = pop_data$antigen_iso %>%     unique(), lambda_start = 0.1, stepmin = 1e-08, stepmax = 3,     verbose = FALSE, build_graph = FALSE, print_graph = build_graph &         verbose, ...) {    if (verbose > 1) {        message(\"inputs to `est.incidence()`:\")        print(environment() %>% as.list())    }    .errorCheck(data = pop_data, antigen_isos = antigen_isos,         curve_params = curve_params)    pop_data <- pop_data %>% dplyr::filter(.data$antigen_iso %in%         antigen_isos) %>% dplyr::select(pop_data %>% get_value_var(),         pop_data %>% get_age_var(), \"antigen_iso\") %>% filter(if_all(everything(),         ~!is.na(.x)))    curve_params <- curve_params %>% ungroup() %>% dplyr::mutate(alpha = .data$alpha *         365.25, d = .data$r - 1) %>% dplyr::filter(.data$antigen_iso %in%         antigen_isos) %>% dplyr::select(\"y1\", \"alpha\", \"d\", \"antigen_iso\") %>%         droplevels()    noise_params <- noise_params %>% dplyr::filter(.data$antigen_iso %in%         antigen_isos) %>% droplevels()    if (nrow(pop_data) == 0) {        stop(\"No data provided.\")    }    if (verbose) {        message(\"nrow(curve_params) = \", nrow(curve_params))    }    if (nrow(noise_params) != length(antigen_isos)) {        stop(\"too many rows of noise parameters.\")    }    pop_data <- pop_data %>% split(~antigen_iso)    curve_params <- curve_params %>% split(~antigen_iso)    noise_params <- noise_params %>% split(~antigen_iso)    res <- .nll(pop_data = pop_data, log.lambda = log(lambda_start),         antigen_isos = antigen_isos, curve_params = curve_params,         noise_params = noise_params, verbose = verbose, ...)    if (is.na(res)) {        warning(\"Could not calculate the log-likelihood with starting parameter value.\")        return(NULL)    }    if (verbose) {        message(\"Initial negative log-likelihood: \", res)    }    if (build_graph) {        if (verbose)             message(\"building likelihood graph\")        graph <- graph_loglik(highlight_points = lambda_start,             highlight_point_names = \"lambda_start\", pop_data = pop_data,             antigen_isos = antigen_isos, curve_params = curve_params,             noise_params = noise_params)        if (print_graph) {            print(graph + ggplot2::scale_x_log10(labels = scales::label_comma()))        }    }    else {        graph <- NULL    }    if (verbose)         message(\"about to call `nlm()`\")    time <- {        fit <- nlm(f = .nll, p = log(lambda_start), pop_data = pop_data,             antigen_isos = antigen_isos, curve_params = curve_params,             noise_params = noise_params, hessian = TRUE, stepmax = stepmax,             steptol = stepmin, verbose = verbose, print.level = ifelse(verbose,                 2, 0), ...)    } %>% system.time()    code_text <- nlm_exit_codes[fit$code]    message1 <- \"\\n`nlm()` completed with the following convergence code:\\n\"    if (fit$code %in% 3:5) {        warning(\"`nlm()` may not have reached the maximum likelihood estimate.\",             message1, code_text)    }    if (verbose) {        message(\"\\nElapsed time: \")        print(time)    }    if (build_graph) {        graph <- graph %>% add_point_to_graph(fit = fit, pop_data = pop_data,             antigen_isos = antigen_isos, curve_params = curve_params,             noise_params = noise_params)        if (print_graph) {            print(graph + ggplot2::scale_x_log10(labels = scales::label_comma()))        }    }    fit <- fit %>% structure(class = union(\"seroincidence\", class(fit)),         lambda_start = lambda_start, antigen_isos = antigen_isos,         ll_graph = graph)    return(fit)})(pop_data = structure(list(value = c(5.686082087, 1.228468773, 1.08478637, 1.429250766, 3.061925394, 3.10341076, 0.030783008, 6.39056873, 0.240410018, 3.454038997, 0.583069732, 1.203041652, 14.45068664, 13.67451493, 9.75485189, 1.854591567, 13.47695391, 3.915196534, 0.581800446, 0.464968826, 0.804765886, 0.170707915, 1.37100964, 3.117010281, 0.631406531, 0.457043221, 2.425332461, 1.706190158, 3.637831218, 69.89535911, 2.34926128, 2.421981965, 5.959094924, 1.208630376, 21.66881837, 1.980702589, 6.947747503, 0.326101424, 1.746848591, 5.743808809, 66.36882517, 8.592622525, 9.559545113, 1.463210702, 1.675724638, 2.001794061, 1.963263676, 0.144000922, 2.640976902, 2.639804308, 14.97160989, 0.581763723, 1.597643699, 4.211346348, 3.001945296, 0.216909126, 0.956437161, 9.571740156, 1.354560173, 1.019806649, 33.61421131, 0.234319736, 1.969896519, 1.97546336, 0.369090624, 3.81341291, 6.564569311, 7.044133815, 2.419830229, 5.613969982, 0.677328316, 0.430965682, 0.982963924, 0.3471668, 0.678930651, 1.373231907, 1.358157942, 1.607816553, 0.661695355, 3.73191269, 2.028698664, 3.084281709, 16.42857143, 4.100071759, 19.97064837, 8.296130952, 14.04425829, 6.958705357, 3.523065476, 9.819568452, 0.252788832, 0.875601873, 1.08911496, 6.30952381, 5.780099594, 5.30809886, 1.083906829, 0.807305453, 13.32860629, 0.53330289, 1.402155499, 6.947698519, 4.527529762, 1.970971466, 4.871499117, 2.123841957), age = c(18, 7.3, 2.6, 3.9, 13, 14.4, 3.4, 22, 4, 14.8, 15.1, 13, 15.6, 18, 18.7, 7.5, 23, 4, 2.3, 9.8, 21, 14.7, 4, 18.1, 11.2, 3.8, 11.5, 17.2, 17, 12, 11, 16, 5, 12, 20, 14, 7.3, 2.5, 10.5, 4.4, 11.2, 13.4, 14, 14.6, 19.2, 10, 5, 4.9, 9.2, 15.8, 18, 21, 6.6, 18, 7.3, 2.6, 3.9, 13, 14.4, 3.4, 22, 4, 14.8, 15.1, 13, 15.6, 18, 18.7, 7.5, 23, 4, 2.3, 9.8, 21, 14.7, 4, 18.1, 11.2, 3.8, 11.5, 17.2, 17, 12, 11, 16, 5, 12, 20, 14, 7.3, 2.5, 10.5, 4.4, 11.2, 13.4, 14, 14.6, 19.2, 10, 5, 4.9, 9.2, 15.8, 18, 21, 6.6), antigen_iso = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), levels = c(\"HlyE_IgA\", \"HlyE_IgG\"), class = \"factor\")), row.names = c(NA, -106L), class = c(\"pop_data\", \"tbl_df\", \"tbl\", \"data.frame\"), antigen_isos = structure(1:2, levels = c(\"HlyE_IgA\", \"HlyE_IgG\"), class = \"factor\"), age_var = \"age\", value_var = \"value\", id_var = \"id\", biomarker_var = \"antigen_iso\"),     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"), curve_params = structure(list(        y1 = c(63.4814181747235, 163.892554798255, 288.162064918977,         153.628916105779, 431.819308863086, 143.455366610532,         30.5523468510691, 53.3082414171847, 160.248521898273,         557.057672849571, 524.750289905931, 957.183975655821,         30.7757024960889, 696.885680249965, 41.3351250925557,         49.696304772494, 248.45349985843, 284.238616409023, 319.258088721929,         55.1973083368717, 9.85590602194967, 142.48248989252,         58.569079122574, 125.103468262329, 23.5781354491369,         154.134822731266, 195.272088240338, 512.685734719332,         15.2392432670215, 367.675521980743, 138.597844051858,         94.054499427184, 17.7002608315275, 420.52048494015, 34.6297552188594,         117.116522186164, 670.782356315421, 139.74457140291,         350.389335470867, 280.773133101888, 524.805205039604,         341.875466132432, 21.7419806650667, 807.973583062943,         54.648570130211, 161.138851467563, 62.4626331974805,         345.012549159694, 13.5263909774471, 287.580231401241,         404.641741222692, 329.62595529365, 127.460080376226,         119.698649885564, 47.6743496395363, 53.3427557637164,         4.86255586452024, 93.6129541009416, 217.262169334863,         55.1129621346739, 35.0985002310083, 118.566555662152,         1098.49716393263, 54.1079875304336, 58.9629133595119,         135.952389154747, 42.1086528807225, 260.595389430244,         34.7560167599678, 257.405675946662, 179.060328314574,         153.694462686078, 24.6668810561169, 49.4445183661751,         574.894674464689, 105.684016008491, 16.5510503302757,         60.2041812390575, 11.0453659443594, 462.717062144179,         329.450591149241, 382.551153691391, 134.232955969569,         239.461396134792, 14.3719137242382, 264.590126446701,         40.6802550135182, 57.5144029967135, 88.2747290650814,         430.319125620458, 10.6130205814949, 558.11559324373,         32.0135413405647, 24.0384935132398, 38.0504292985456,         77.8837709668701, 126.820466076145, 159.918844849729,         69.8997358428869, 262.882882182499, 354.532775056227,         412.676482549134, 114.923006872123, 120.873465623906,         132.600241082824, 103.468186139286, 447.006072553703,         1085.2206115645, 33.5210558211561, 253.133868952307,         130.757054116255, 66.9218148382036, 374.582473744296,         139.536904862498, 39.3988388717891, 96.9165448765317,         179.919538402879, 1493.88241008644, 14.8008942224083,         404.839466898054, 532.707197471499, 46.4587352210946,         24.4858328538187, 49.4642193897299, 95.0227133002871,         93.9690584818973, 260.176071822173, 141.989238850102,         39.9773724835592, 782.954380644115, 29.4107109741128,         516.645589158684, 211.572242009836, 1822.2130872245,         52.509809995604, 13.151025358795, 19.3857150727236, 35.2409166828083,         80.9687188700813, 177.173315875654, 26.3645555024978,         117.225011423899, 87.0261479522951, 126.950596752532,         27.2083356730063, 83.8209553654887, 65.4624630013765,         60.5914219180724, 50.5312183443017, 220.403393063456,         57.8814946339193, 321.339218295469, 112.331004619454,         214.114844173551, 46.2663050252167, 253.087688470067,         75.8950087172145, 364.707374884755, 21.9277543373803,         342.0606126627, 72.882860491943, 41.3783165219195, 44.191172297619,         74.7393669070667, 50.8282443896275, 265.44382427441,         228.249964982196, 150.22058930907, 137.733518575792,         282.081550999412, 225.506262502798, 31.1882936999509,         163.565411792614, 182.312164883095, 468.092763349791,         26.948324983628, 47.0627893374153, 265.595229664979,         11.1704463639473, 172.041567739628, 161.068053764295,         432.516403298317, 89.2366348763595, 93.0637657208957,         867.380852022527, 402.754319315464, 17.8792209899537,         288.905665377172, 21.9097654634741, 48.8445971425635,         21.8483966121941, 183.574641774107, 42.8450651248465,         392.445793775464, 11.3934815053904, 323.545778561326,         120.315053250724, 164.404167510907, 249.551023456624,         41.4554723971584), alpha = c(0.000580750108201723, 0.00457307241085562,         0.000459482362967931, 0.000920576917699969, 0.000277272439231206,         0.00293646148218711, 0.00126803096870046, 0.000185056384174521,         0.00139768218010029, 0.000505440617097379, 0.0002940737416904,         0.000654669519525582, 0.00459319232964828, 0.000887688202447749,         0.00233809215626583, 0.000209870475682425, 4.67002985675705e-05,         0.00104003594908331, 0.000448299061620713, 0.000207443820402452,         0.00184390439817354, 0.000541774876402651, 0.000165952326601835,         0.00322191298857545, 0.000801608679478142, 0.00117192216751816,         0.00212248013302342, 0.000976984276211827, 0.00206185338337752,         0.000384579510907555, 0.000520896079311473, 0.0010065164190521,         0.00110520990806848, 0.000183194889839954, 0.000503901371757611,         0.000228263475932955, 0.00194228531845488, 0.000171501250472504,         0.000369695819464055, 0.00104853639157351, 0.000697205747962488,         0.000311385146127225, 0.000354295233312761, 0.00124573445413704,         0.000423939415887257, 0.000801256049243512, 0.00120645375923901,         0.00237756125361664, 0.00123608024365872, 0.000358006290675028,         0.000494140830213741, 0.000156002269928014, 0.00245664175975264,         0.000841503824065256, 0.00193807512902148, 0.000497129501207083,         0.0054332923652717, 0.00127310051929336, 0.000551300789665394,         0.00063403271748031, 0.00174555975196488, 0.000377066120482253,         0.000483383608036441, 0.000338217966168421, 0.00219483150170641,         0.00140321394275048, 0.00108547239461618, 0.00102792815759423,         0.00349137373455354, 0.000352559907428524, 0.00162066292577739,         0.00279808506815644, 0.0019601191828733, 0.000330547561933239,         0.000355786402556068, 0.000438855656341692, 0.00124273584887326,         0.000552763674223956, 0.00186976972015624, 0.000333069293847281,         0.00110379614438794, 0.00146362360047569, 0.000139360006251701,         0.000397180389049223, 0.00114211896576467, 0.00100256857212561,         0.00109121884614163, 0.00126819582344172, 0.000987731162476162,         0.00128987495424607, 0.00282261928684757, 0.000374791757339121,         0.00113865219626825, 0.000532967559301844, 0.000513638935226,         0.000359459156219103, 0.000275859190991226, 0.000354699360187289,         0.0026713535164984, 0.00279347203459326, 0.000128197309556073,         0.00596927380308968, 0.00705294513320615, 0.00202300752718538,         0.00162192753599336, 0.00037424870310045, 0.00026754841964219,         0.000730493664235532, 0.00153178738489586, 0.00325308988648181,         0.000483857556168969, 0.000588331496127102, 0.000298345006855044,         0.00112620692068216, 0.00168651670227233, 0.000204975520121039,         0.00193362267850561, 0.00142648771405165, 0.00134562054578092,         0.000208857156789975, 0.00062536817604273, 0.00133456484375557,         0.00938643234422778, 0.000937138007517452, 0.000608514388479188,         0.00264210323257104, 0.00039208182606313, 0.0033181097851919,         0.00185906798532453, 0.000907043634868749, 0.00115294008901915,         0.000245596650454221, 0.00108389960019551, 0.00201213285019601,         0.00190943097530246, 0.000408867260930471, 0.000791381820969645,         0.00201466973548936, 0.00171498662024685, 0.00140127884303538,         0.00100416392412402, 0.000519205915058319, 0.00167112203653147,         0.000838815315735768, 0.000721650217325436, 0.000505339539082098,         0.000909450488173269, 0.00121178596919844, 0.000826864269791345,         0.00292640667315851, 0.000304137699570372, 0.00113983701054901,         0.000389736378485822, 0.00298474787407907, 0.000841259823338093,         0.00368059814723494, 0.000421837664169578, 0.00123986844219214,         0.000760625071667979, 0.00148555030442975, 0.000832930793734274,         0.000300251530379406, 0.00191957782487084, 0.000394689964996692,         0.00267988874066063, 0.00153195589077585, 0.00122125043306422,         0.000373008257684936, 0.00134318717545753, 0.00069797309624943,         0.000766596477494754, 0.000245039778346658, 0.000872995636865741,         0.00712119308128448, 4.98002775826703e-05, 0.000948299668165794,         0.000521991110458308, 0.00125413398046824, 0.000780668464134002,         0.002049580788824, 5.11867422438249e-05, 0.00561075492929095,         0.000808839543407316, 0.000713355973905716, 0.00085947398602869,         0.0021832078345804, 0.00180421443138756, 0.00058909093348889,         0.000599760589426105, 0.00135466647345608, 0.00143236264326595,         0.000494961785196012, 0.000608033851949211, 0.00451563256019836,         0.00337223348145991, 0.000362658114803346, 8.99092256955004e-05,         0.000361336825504191, 0.000266811004105529, 0.00308982754595651        ), r = c(1.74503804112011, 1.17416885836092, 2.66300631906146,         1.297476514491, 1.61055432802302, 1.13118326027234, 1.87013752944932,         2.12891387733085, 1.3974520424861, 1.97493702481855,         2.26045907519679, 1.73951774586965, 1.54839140734894,         1.28946525686499, 1.47712107228344, 1.60869619166956,         8.49637822070033, 1.22786543992899, 1.74930137992105,         2.09051460553557, 1.25152824238038, 1.6479440039637,         1.87839842610789, 1.1688001176233, 1.27395812849041,         1.42241923931779, 1.60775344339114, 1.22367302575217,         1.13545307616552, 1.4528247924265, 1.83738947009373,         1.38484985799107, 1.33445598250036, 2.21809845578665,         2.87854398365401, 2.95589130494591, 1.37775176705415,         1.78770312896554, 3.42523396464135, 1.21637549019504,         1.48417977755664, 2.43501743648731, 1.36792322142982,         1.47888442241868, 1.51608025120621, 1.19711459871732,         2.80191321923623, 1.11128063778834, 1.29719404599601,         1.56958115730821, 1.40645421035182, 2.02055071677547,         1.58553635830427, 1.31900452223899, 1.22922069635161,         1.65815487698244, 1.55892554941562, 1.26151595080374,         1.37707355668328, 1.74441842726501, 1.20180972115458,         1.44365502023906, 2.38510091527588, 1.88284644056197,         1.60597957384943, 1.34867326455727, 1.62070645876627,         1.31154857933272, 2.12645665211127, 1.65075568439601,         1.48036454239674, 1.19982166204518, 2.00237147751504,         1.70487485680804, 1.8706623806063, 1.67166807264746,         1.92194113718141, 1.61005143847568, 1.35004974710959,         2.25841123408653, 1.43335501102913, 1.55790365098244,         4.72154907642204, 2.58282464355033, 1.4444685411938,         1.1934183150664, 2.03619132144836, 1.50070658907823,         1.70535433471468, 1.30762000737011, 1.35345821652327,         2.11594435320902, 1.93343793924938, 1.40636886392934,         1.64717599789262, 3.07065710721104, 1.64913472189956,         1.56811466820133, 1.3743054888023, 1.32153142343595,         1.75972177367333, 1.0321394831503, 1.19619621962556,         1.12522664793909, 2.54761339632466, 1.65664548682786,         1.84384875557502, 1.37448370062602, 1.3397178020426,         1.10640954472882, 2.19064717043815, 1.57332473216103,         1.69127262231831, 1.27894797055983, 1.43991225166163,         3.51828219391506, 1.46683565487797, 1.34968938149023,         1.47588549995483, 1.77726961029852, 1.98675568807676,         1.24408225496149, 1.17673214459276, 1.24982115428208,         1.93255112801193, 1.27076878883401, 2.15156743349361,         1.09741062383505, 1.56474555183983, 1.26556384404366,         1.49417874265552, 1.86821491243254, 1.6685112860065,         1.13876686280646, 3.89157113577646, 2.26881576887324,         1.98350653159569, 1.11306753318267, 1.30383514829675,         1.12087842385809, 1.33146601283398, 1.93446154806597,         1.37443801640134, 1.5782031508516, 2.36840523534241,         1.90640359775196, 1.71299918615934, 1.43614740844928,         2.37312340146821, 1.16058369630921, 1.93968496829668,         1.20625335236676, 1.24209864788451, 1.11020753598308,         1.2758632519492, 1.15080012417002, 2.14686026015812,         1.27879180342719, 2.22148215191972, 1.28974327693987,         1.42731834708861, 2.32334947011738, 1.61955363733894,         1.47492898090976, 1.5350794705679, 1.2441188700458, 1.23133925719503,         1.99038276427008, 1.51776282933421, 1.31925025031428,         1.61304802616839, 1.31460732660273, 1.42961019701532,         1.03565806252171, 4.80132617777742, 1.38736960114353,         1.55863107325236, 1.52666057929324, 2.28991200129968,         1.15325838364272, 6.2383156195126, 1.09899855746642,         1.65867700079462, 1.5005684131288, 1.95624425662808,         1.15457745212576, 1.46923995980707, 1.39171137447131,         1.65402676714906, 1.26867038104759, 2.67952161518617,         1.98222310689708, 2.32213915915393, 1.09182873618516,         2.14613567346721, 1.79173305163522, 2.56558099827198,         1.82633749444038, 2.24145862650252, 1.14228545396753),         antigen_iso = structure(clevels = c(\"HlyE_IgA\",         \"HlyE_IgG\", \"LPS_IgA\", \"LPS_IgG\", \"Vi_IgG\"), class = \"factor\")), row.names = c(NA,     -200L), class = c(\"curve_params\", \"tbl_df\", \"tbl\", \"data.frame\"    ), antigen_isos = structure(1:5, levels = c(\"HlyE_IgA\", \"HlyE_IgG\",     \"LPS_IgA\", \"LPS_IgG\", \"Vi_IgG\"), class = \"factor\"), biomarker_var = \"antigen_iso\"),     noise_params = structure(list(nu = c(2.59560775795, 2.3600514143    ), eps = c(0.2793208827, 0.1456403573), y.low = c(0.508452309,     1.594575648), y.high = c(5e+06, 5e+06), antigen_iso = c(\"HlyE_IgA\",     \"HlyE_IgG\")), row.names = c(NA, -2L), class = c(\"noise_params\",     \"tbl_df\", \"tbl\", \"data.frame\"), antigen_isos = c(\"HlyE_IgA\",     \"HlyE_IgG\", \"LPS_IgA\", \"LPS_IgG\")), lambda_start = 0.1, antigen_isos = c(\"HlyE_IgG\",     \"HlyE_IgA\"), build_graph = TRUE, print_graph = FALSE, verbose = FALSE): formal argument \"antigen_isos\" matched by multiple actual arguments #> Timing stopped at: 0.002 0 0.002  # Plot the log-likelihood curve autoplot(est2) #> Error: object 'est2' not found # }"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.seroincidence.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"Plot log-likelihood curve incidence rate estimate","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.seroincidence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"# S3 method for class 'seroincidence' autoplot(object, log_x = FALSE, ...)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.seroincidence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"object seroincidence object (est.incidence()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? ... unused","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.seroincidence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"ggplot2::ggplot()","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.seroincidence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the log-likelihood curve for the incidence rate estimate — autoplot.seroincidence","text":"","code":"# \\donttest{ library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_param = curve,   noise_param = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   build_graph = TRUE )  # Plot the log-likelihood curve autoplot(est1)  # }"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.summary.seroincidence.by.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"Plot method summary.seroincidence.objects","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.summary.seroincidence.by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' autoplot(object, xvar, alpha = 0.7, shape = 1, width = 0.001, ...)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.summary.seroincidence.by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"object summary.seroincidence.object (generated applying summary() method output est.incidence.()). xvar name stratifying variable object alpha transparency points graph (1 = transparency, 0 = fully transparent) shape shape argument geom_point() width width jitter ... unused","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.summary.seroincidence.by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"ggplot2::ggplot() object","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/autoplot.summary.seroincidence.by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot method for summary.seroincidence.by objects — autoplot.summary.seroincidence.by","text":"","code":"library(dplyr) library(ggplot2)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   #num_cores = 8 #Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Error in (function (pop_data, curve_params, noise_params, antigen_isos = pop_data$antigen_iso %>%     unique(), lambda_start = 0.1, stepmin = 1e-08, stepmax = 3,     verbose = FALSE, build_graph = FALSE, print_graph = build_graph &         verbose, ...) {    if (verbose > 1) {        message(\"inputs to `est.incidence()`:\")        print(environment() %>% as.list())    }    .errorCheck(data = pop_data, antigen_isos = antigen_isos,         curve_params = curve_params)    pop_data <- pop_data %>% dplyr::filter(.data$antigen_iso %in%         antigen_isos) %>% dplyr::select(pop_data %>% get_value_var(),         pop_data %>% get_age_var(), \"antigen_iso\") %>% filter(if_all(everything(),         ~!is.na(.x)))    curve_params <- curve_params %>% ungroup() %>% dplyr::mutate(alpha = .data$alpha *         365.25, d = .data$r - 1) %>% dplyr::filter(.data$antigen_iso %in%         antigen_isos) %>% dplyr::select(\"y1\", \"alpha\", \"d\", \"antigen_iso\") %>%         droplevels()    noise_params <- noise_params %>% dplyr::filter(.data$antigen_iso %in%         antigen_isos) %>% droplevels()    if (nrow(pop_data) == 0) {        stop(\"No data provided.\")    }    if (verbose) {        message(\"nrow(curve_params) = \", nrow(curve_params))    }    if (nrow(noise_params) != length(antigen_isos)) {        stop(\"too many rows of noise parameters.\")    }    pop_data <- pop_data %>% split(~antigen_iso)    curve_params <- curve_params %>% split(~antigen_iso)    noise_params <- noise_params %>% split(~antigen_iso)    res <- .nll(pop_data = pop_data, log.lambda = log(lambda_start),         antigen_isos = antigen_isos, curve_params = curve_params,         noise_params = noise_params, verbose = verbose, ...)    if (is.na(res)) {        warning(\"Could not calculate the log-likelihood with starting parameter value.\")        return(NULL)    }    if (verbose) {        message(\"Initial negative log-likelihood: \", res)    }    if (build_graph) {        if (verbose)             message(\"building likelihood graph\")        graph <- graph_loglik(highlight_points = lambda_start,             highlight_point_names = \"lambda_start\", pop_data = pop_data,             antigen_isos = antigen_isos, curve_params = curve_params,             noise_params = noise_params)        if (print_graph) {            print(graph + ggplot2::scale_x_log10(labels = scales::label_comma()))        }    }    else {        graph <- NULL    }    if (verbose)         message(\"about to call `nlm()`\")    time <- {        fit <- nlm(f = .nll, p = log(lambda_start), pop_data = pop_data,             antigen_isos = antigen_isos, curve_params = curve_params,             noise_params = noise_params, hessian = TRUE, stepmax = stepmax,             steptol = stepmin, verbose = verbose, print.level = ifelse(verbose,                 2, 0), ...)    } %>% system.time()    code_text <- nlm_exit_codes[fit$code]    message1 <- \"\\n`nlm()` completed with the following convergence code:\\n\"    if (fit$code %in% 3:5) {        warning(\"`nlm()` may not have reached the maximum likelihood estimate.\",             message1, code_text)    }    if (verbose) {        message(\"\\nElapsed time: \")        print(time)    }    if (build_graph) {        graph <- graph %>% add_point_to_graph(fit = fit, pop_data = pop_data,             antigen_isos = antigen_isos, curve_params = curve_params,             noise_params = noise_params)        if (print_graph) {            print(graph + ggplot2::scale_x_log10(labels = scales::label_comma()))        }    }    fit <- fit %>% structure(class = union(\"seroincidence\", class(fit)),         lambda_start = lambda_start, antigen_isos = antigen_isos,         ll_graph = graph)    return(fit)})(pop_data = structure(list(value = c(5.686082087, 1.228468773, 1.08478637, 1.429250766, 3.061925394, 3.10341076, 0.030783008, 6.39056873, 0.240410018, 3.454038997, 0.583069732, 1.203041652, 14.45068664, 13.67451493, 9.75485189, 1.854591567, 13.47695391, 3.915196534, 0.581800446, 0.464968826, 0.804765886, 0.170707915, 1.37100964, 3.117010281, 0.631406531, 0.457043221, 2.425332461, 1.706190158, 3.637831218, 69.89535911, 2.34926128, 2.421981965, 5.959094924, 1.208630376, 21.66881837, 1.980702589, 6.947747503, 0.326101424, 1.746848591, 5.743808809, 66.36882517, 8.592622525, 9.559545113, 1.463210702, 1.675724638, 2.001794061, 1.963263676, 0.144000922, 2.640976902, 2.639804308, 14.97160989, 0.581763723, 1.597643699, 4.211346348, 3.001945296, 0.216909126, 0.956437161, 9.571740156, 1.354560173, 1.019806649, 33.61421131, 0.234319736, 1.969896519, 1.97546336, 0.369090624, 3.81341291, 6.564569311, 7.044133815, 2.419830229, 5.613969982, 0.677328316, 0.430965682, 0.982963924, 0.3471668, 0.678930651, 1.373231907, 1.358157942, 1.607816553, 0.661695355, 3.73191269, 2.028698664, 3.084281709, 16.42857143, 4.100071759, 19.97064837, 8.296130952, 14.04425829, 6.958705357, 3.523065476, 9.819568452, 0.252788832, 0.875601873, 1.08911496, 6.30952381, 5.780099594, 5.30809886, 1.083906829, 0.807305453, 13.32860629, 0.53330289, 1.402155499, 6.947698519, 4.527529762, 1.970971466, 4.871499117, 2.123841957), age = c(18, 7.3, 2.6, 3.9, 13, 14.4, 3.4, 22, 4, 14.8, 15.1, 13, 15.6, 18, 18.7, 7.5, 23, 4, 2.3, 9.8, 21, 14.7, 4, 18.1, 11.2, 3.8, 11.5, 17.2, 17, 12, 11, 16, 5, 12, 20, 14, 7.3, 2.5, 10.5, 4.4, 11.2, 13.4, 14, 14.6, 19.2, 10, 5, 4.9, 9.2, 15.8, 18, 21, 6.6, 18, 7.3, 2.6, 3.9, 13, 14.4, 3.4, 22, 4, 14.8, 15.1, 13, 15.6, 18, 18.7, 7.5, 23, 4, 2.3, 9.8, 21, 14.7, 4, 18.1, 11.2, 3.8, 11.5, 17.2, 17, 12, 11, 16, 5, 12, 20, 14, 7.3, 2.5, 10.5, 4.4, 11.2, 13.4, 14, 14.6, 19.2, 10, 5, 4.9, 9.2, 15.8, 18, 21, 6.6), antigen_iso = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), levels = c(\"HlyE_IgA\", \"HlyE_IgG\"), class = \"factor\")), row.names = c(NA, -106L), class = c(\"pop_data\", \"tbl_df\", \"tbl\", \"data.frame\"), antigen_isos = structure(1:2, levels = c(\"HlyE_IgA\", \"HlyE_IgG\"), class = \"factor\"), age_var = \"age\", value_var = \"value\", id_var = \"id\", biomarker_var = \"antigen_iso\"),     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"), curve_params = structure(list(        y1 = c(63.4814181747235, 163.892554798255, 288.162064918977,         153.628916105779, 431.819308863086, 143.455366610532,         30.5523468510691, 53.3082414171847, 160.248521898273,         557.057672849571, 524.750289905931, 957.183975655821,         30.7757024960889, 696.885680249965, 41.3351250925557,         49.696304772494, 248.45349985843, 284.238616409023, 319.258088721929,         55.1973083368717, 9.85590602194967, 142.48248989252,         58.569079122574, 125.103468262329, 23.5781354491369,         154.134822731266, 195.272088240338, 512.685734719332,         15.2392432670215, 367.675521980743, 138.597844051858,         94.054499427184, 17.7002608315275, 420.52048494015, 34.6297552188594,         117.116522186164, 670.782356315421, 139.74457140291,         350.389335470867, 280.773133101888, 524.805205039604,         341.875466132432, 21.7419806650667, 807.973583062943,         54.648570130211, 161.138851467563, 62.4626331974805,         345.012549159694, 13.5263909774471, 287.580231401241,         404.641741222692, 329.62595529365, 127.460080376226,         119.698649885564, 47.6743496395363, 53.3427557637164,         4.86255586452024, 93.6129541009416, 217.262169334863,         55.1129621346739, 35.0985002310083, 118.566555662152,         1098.49716393263, 54.1079875304336, 58.9629133595119,         135.952389154747, 42.1086528807225, 260.595389430244,         34.7560167599678, 257.405675946662, 179.060328314574,         153.694462686078, 24.6668810561169, 49.4445183661751,         574.894674464689, 105.684016008491, 16.5510503302757,         60.2041812390575, 11.0453659443594, 462.717062144179,         329.450591149241, 382.551153691391, 134.232955969569,         239.461396134792, 14.3719137242382, 264.590126446701,         40.6802550135182, 57.5144029967135, 88.2747290650814,         430.319125620458, 10.6130205814949, 558.11559324373,         32.0135413405647, 24.0384935132398, 38.0504292985456,         77.8837709668701, 126.820466076145, 159.918844849729,         69.8997358428869, 262.882882182499, 354.532775056227,         412.676482549134, 114.923006872123, 120.873465623906,         132.600241082824, 103.468186139286, 447.006072553703,         1085.2206115645, 33.5210558211561, 253.133868952307,         130.757054116255, 66.9218148382036, 374.582473744296,         139.536904862498, 39.3988388717891, 96.9165448765317,         179.919538402879, 1493.88241008644, 14.8008942224083,         404.839466898054, 532.707197471499, 46.4587352210946,         24.4858328538187, 49.4642193897299, 95.0227133002871,         93.9690584818973, 260.176071822173, 141.989238850102,         39.9773724835592, 782.954380644115, 29.4107109741128,         516.645589158684, 211.572242009836, 1822.2130872245,         52.509809995604, 13.151025358795, 19.3857150727236, 35.2409166828083,         80.9687188700813, 177.173315875654, 26.3645555024978,         117.225011423899, 87.0261479522951, 126.950596752532,         27.2083356730063, 83.8209553654887, 65.4624630013765,         60.5914219180724, 50.5312183443017, 220.403393063456,         57.8814946339193, 321.339218295469, 112.331004619454,         214.114844173551, 46.2663050252167, 253.087688470067,         75.8950087172145, 364.707374884755, 21.9277543373803,         342.0606126627, 72.882860491943, 41.3783165219195, 44.191172297619,         74.7393669070667, 50.8282443896275, 265.44382427441,         228.249964982196, 150.22058930907, 137.733518575792,         282.081550999412, 225.506262502798, 31.1882936999509,         163.565411792614, 182.312164883095, 468.092763349791,         26.948324983628, 47.0627893374153, 265.595229664979,         11.1704463639473, 172.041567739628, 161.068053764295,         432.516403298317, 89.2366348763595, 93.0637657208957,         867.380852022527, 402.754319315464, 17.8792209899537,         288.905665377172, 21.9097654634741, 48.8445971425635,         21.8483966121941, 183.574641774107, 42.8450651248465,         392.445793775464, 11.3934815053904, 323.545778561326,         120.315053250724, 164.404167510907, 249.551023456624,         41.4554723971584), alpha = c(0.000580750108201723, 0.00457307241085562,         0.000459482362967931, 0.000920576917699969, 0.000277272439231206,         0.00293646148218711, 0.00126803096870046, 0.000185056384174521,         0.00139768218010029, 0.000505440617097379, 0.0002940737416904,         0.000654669519525582, 0.00459319232964828, 0.000887688202447749,         0.00233809215626583, 0.000209870475682425, 4.67002985675705e-05,         0.00104003594908331, 0.000448299061620713, 0.000207443820402452,         0.00184390439817354, 0.000541774876402651, 0.000165952326601835,         0.00322191298857545, 0.000801608679478142, 0.00117192216751816,         0.00212248013302342, 0.000976984276211827, 0.00206185338337752,         0.000384579510907555, 0.000520896079311473, 0.0010065164190521,         0.00110520990806848, 0.000183194889839954, 0.000503901371757611,         0.000228263475932955, 0.00194228531845488, 0.000171501250472504,         0.000369695819464055, 0.00104853639157351, 0.000697205747962488,         0.000311385146127225, 0.000354295233312761, 0.00124573445413704,         0.000423939415887257, 0.000801256049243512, 0.00120645375923901,         0.00237756125361664, 0.00123608024365872, 0.000358006290675028,         0.000494140830213741, 0.000156002269928014, 0.00245664175975264,         0.000841503824065256, 0.00193807512902148, 0.000497129501207083,         0.0054332923652717, 0.00127310051929336, 0.000551300789665394,         0.00063403271748031, 0.00174555975196488, 0.000377066120482253,         0.000483383608036441, 0.000338217966168421, 0.00219483150170641,         0.00140321394275048, 0.00108547239461618, 0.00102792815759423,         0.00349137373455354, 0.000352559907428524, 0.00162066292577739,         0.00279808506815644, 0.0019601191828733, 0.000330547561933239,         0.000355786402556068, 0.000438855656341692, 0.00124273584887326,         0.000552763674223956, 0.00186976972015624, 0.000333069293847281,         0.00110379614438794, 0.00146362360047569, 0.000139360006251701,         0.000397180389049223, 0.00114211896576467, 0.00100256857212561,         0.00109121884614163, 0.00126819582344172, 0.000987731162476162,         0.00128987495424607, 0.00282261928684757, 0.000374791757339121,         0.00113865219626825, 0.000532967559301844, 0.000513638935226,         0.000359459156219103, 0.000275859190991226, 0.000354699360187289,         0.0026713535164984, 0.00279347203459326, 0.000128197309556073,         0.00596927380308968, 0.00705294513320615, 0.00202300752718538,         0.00162192753599336, 0.00037424870310045, 0.00026754841964219,         0.000730493664235532, 0.00153178738489586, 0.00325308988648181,         0.000483857556168969, 0.000588331496127102, 0.000298345006855044,         0.00112620692068216, 0.00168651670227233, 0.000204975520121039,         0.00193362267850561, 0.00142648771405165, 0.00134562054578092,         0.000208857156789975, 0.00062536817604273, 0.00133456484375557,         0.00938643234422778, 0.000937138007517452, 0.000608514388479188,         0.00264210323257104, 0.00039208182606313, 0.0033181097851919,         0.00185906798532453, 0.000907043634868749, 0.00115294008901915,         0.000245596650454221, 0.00108389960019551, 0.00201213285019601,         0.00190943097530246, 0.000408867260930471, 0.000791381820969645,         0.00201466973548936, 0.00171498662024685, 0.00140127884303538,         0.00100416392412402, 0.000519205915058319, 0.00167112203653147,         0.000838815315735768, 0.000721650217325436, 0.000505339539082098,         0.000909450488173269, 0.00121178596919844, 0.000826864269791345,         0.00292640667315851, 0.000304137699570372, 0.00113983701054901,         0.000389736378485822, 0.00298474787407907, 0.000841259823338093,         0.00368059814723494, 0.000421837664169578, 0.00123986844219214,         0.000760625071667979, 0.00148555030442975, 0.000832930793734274,         0.000300251530379406, 0.00191957782487084, 0.000394689964996692,         0.00267988874066063, 0.00153195589077585, 0.00122125043306422,         0.000373008257684936, 0.00134318717545753, 0.00069797309624943,         0.000766596477494754, 0.000245039778346658, 0.000872995636865741,         0.00712119308128448, 4.98002775826703e-05, 0.000948299668165794,         0.000521991110458308, 0.00125413398046824, 0.000780668464134002,         0.002049580788824, 5.11867422438249e-05, 0.00561075492929095,         0.000808839543407316, 0.000713355973905716, 0.00085947398602869,         0.0021832078345804, 0.00180421443138756, 0.00058909093348889,         0.000599760589426105, 0.00135466647345608, 0.00143236264326595,         0.000494961785196012, 0.000608033851949211, 0.00451563256019836,         0.00337223348145991, 0.000362658114803346, 8.99092256955004e-05,         0.000361336825504191, 0.000266811004105529, 0.00308982754595651        ), r = c(1.74503804112011, 1.17416885836092, 2.66300631906146,         1.297476514491, 1.61055432802302, 1.13118326027234, 1.87013752944932,         2.12891387733085, 1.3974520424861, 1.97493702481855,         2.26045907519679, 1.73951774586965, 1.54839140734894,         1.28946525686499, 1.47712107228344, 1.60869619166956,         8.49637822070033, 1.22786543992899, 1.74930137992105,         2.09051460553557, 1.25152824238038, 1.6479440039637,         1.87839842610789, 1.1688001176233, 1.27395812849041,         1.42241923931779, 1.60775344339114, 1.22367302575217,         1.13545307616552, 1.4528247924265, 1.83738947009373,         1.38484985799107, 1.33445598250036, 2.21809845578665,         2.87854398365401, 2.95589130494591, 1.37775176705415,         1.78770312896554, 3.42523396464135, 1.21637549019504,         1.48417977755664, 2.43501743648731, 1.36792322142982,         1.47888442241868, 1.51608025120621, 1.19711459871732,         2.80191321923623, 1.11128063778834, 1.29719404599601,         1.56958115730821, 1.40645421035182, 2.02055071677547,         1.58553635830427, 1.31900452223899, 1.22922069635161,         1.65815487698244, 1.55892554941562, 1.26151595080374,         1.37707355668328, 1.74441842726501, 1.20180972115458,         1.44365502023906, 2.38510091527588, 1.88284644056197,         1.60597957384943, 1.34867326455727, 1.62070645876627,         1.31154857933272, 2.12645665211127, 1.65075568439601,         1.48036454239674, 1.19982166204518, 2.00237147751504,         1.70487485680804, 1.8706623806063, 1.67166807264746,         1.92194113718141, 1.61005143847568, 1.35004974710959,         2.25841123408653, 1.43335501102913, 1.55790365098244,         4.72154907642204, 2.58282464355033, 1.4444685411938,         1.1934183150664, 2.03619132144836, 1.50070658907823,         1.70535433471468, 1.30762000737011, 1.35345821652327,         2.11594435320902, 1.93343793924938, 1.40636886392934,         1.64717599789262, 3.07065710721104, 1.64913472189956,         1.56811466820133, 1.3743054888023, 1.32153142343595,         1.75972177367333, 1.0321394831503, 1.19619621962556,         1.12522664793909, 2.54761339632466, 1.65664548682786,         1.84384875557502, 1.37448370062602, 1.3397178020426,         1.10640954472882, 2.19064717043815, 1.57332473216103,         1.69127262231831, 1.27894797055983, 1.43991225166163,         3.51828219391506, 1.46683565487797, 1.34968938149023,         1.47588549995483, 1.77726961029852, 1.98675568807676,         1.24408225496149, 1.17673214459276, 1.24982115428208,         1.93255112801193, 1.27076878883401, 2.15156743349361,         1.09741062383505, 1.56474555183983, 1.26556384404366,         1.49417874265552, 1.86821491243254, 1.6685112860065,         1.13876686280646, 3.89157113577646, 2.26881576887324,         1.98350653159569, 1.11306753318267, 1.30383514829675,         1.12087842385809, 1.33146601283398, 1.93446154806597,         1.37443801640134, 1.5782031508516, 2.36840523534241,         1.90640359775196, 1.71299918615934, 1.43614740844928,         2.37312340146821, 1.16058369630921, 1.93968496829668,         1.20625335236676, 1.24209864788451, 1.11020753598308,         1.2758632519492, 1.15080012417002, 2.14686026015812,         1.27879180342719, 2.22148215191972, 1.28974327693987,         1.42731834708861, 2.32334947011738, 1.61955363733894,         1.47492898090976, 1.5350794705679, 1.2441188700458, 1.23133925719503,         1.99038276427008, 1.51776282933421, 1.31925025031428,         1.61304802616839, 1.31460732660273, 1.42961019701532,         1.03565806252171, 4.80132617777742, 1.38736960114353,         1.55863107325236, 1.52666057929324, 2.28991200129968,         1.15325838364272, 6.2383156195126, 1.09899855746642,         1.65867700079462, 1.5005684131288, 1.95624425662808,         1.15457745212576, 1.46923995980707, 1.39171137447131,         1.65402676714906, 1.26867038104759, 2.67952161518617,         1.98222310689708, 2.32213915915393, 1.09182873618516,         2.14613567346721, 1.79173305163522, 2.56558099827198,         1.82633749444038, 2.24145862650252, 1.14228545396753),         antigen_iso = structure(clevels = c(\"HlyE_IgA\",         \"HlyE_IgG\", \"LPS_IgA\", \"LPS_IgG\", \"Vi_IgG\"), class = \"factor\")), row.names = c(NA,     -200L), class = c(\"curve_params\", \"tbl_df\", \"tbl\", \"data.frame\"    ), antigen_isos = structure(1:5, levels = c(\"HlyE_IgA\", \"HlyE_IgG\",     \"LPS_IgA\", \"LPS_IgG\", \"Vi_IgG\"), class = \"factor\"), biomarker_var = \"antigen_iso\"),     noise_params = structure(list(nu = c(2.59560775795, 2.3600514143    ), eps = c(0.2793208827, 0.1456403573), y.low = c(0.508452309,     1.594575648), y.high = c(5e+06, 5e+06), antigen_iso = c(\"HlyE_IgA\",     \"HlyE_IgG\")), row.names = c(NA, -2L), class = c(\"noise_params\",     \"tbl_df\", \"tbl\", \"data.frame\"), antigen_isos = c(\"HlyE_IgA\",     \"HlyE_IgG\", \"LPS_IgA\", \"LPS_IgG\")), lambda_start = 0.1, antigen_isos = c(\"HlyE_IgG\",     \"HlyE_IgA\"), build_graph = FALSE, print_graph = FALSE, verbose = FALSE): formal argument \"antigen_isos\" matched by multiple actual arguments #> Timing stopped at: 0.002 0 0.002  est2sum <- summary(est2) #> Error: object 'est2' not found  autoplot(est2sum, \"catchment\") #> Error: object 'est2sum' not found"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/baseline.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute baseline values — baseline","title":"Substitute baseline values — baseline","text":"whenever y cutoff (blims[kab,2]), substitute random sample baseline distribution","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/baseline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute baseline values — baseline","text":"","code":"baseline(kab, yvec, blims, ...)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/baseline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute baseline values — baseline","text":"kab integer indicating row read blims yvec numeric vector predicted biomarker values, one biomarker blims range possible baseline antibody levels ... unused","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/baseline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitute baseline values — baseline","text":"altered version yvec","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/check_pop_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"Check formatting cross-sectional antibody survey dataset.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/check_pop_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"check_pop_data(pop_data, verbose = FALSE)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/check_pop_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"pop_data dataset check verbose whether print \"OK\" message checks pass","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/check_pop_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"NULL (invisibly)","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/check_pop_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the formatting of a cross-sectional antibody survey dataset. — check_pop_data","text":"","code":"library(magrittr)  xs_data <-   serocalculator_example(\"example_pop_data.csv\") %>%   read.csv() %>%   as_pop_data()  check_pop_data(xs_data, verbose = TRUE) #> data format is as expected."},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/check_strata.html","id":null,"dir":"Reference","previous_headings":"","what":"Check a pop_data object for requested strata variables — check_strata","title":"Check a pop_data object for requested strata variables — check_strata","text":"Check pop_data object requested strata variables","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/check_strata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"check_strata(pop_data, strata)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/check_strata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check a pop_data object for requested strata variables — check_strata","text":"pop_data pop_data object strata character vector","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/check_strata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check a pop_data object for requested strata variables — check_strata","text":"NULL, invisibly","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/check_strata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check a pop_data object for requested strata variables — check_strata","text":"","code":"sees_pop_data_pk_100 |>   check_strata(strata = c(\"ag\", \"catch\", \"Count\")) |>   try() #> Error in check_strata(sees_pop_data_pk_100, strata = c(\"ag\", \"catch\",  :  #>   could not find function \"check_strata\""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/df.to.array.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"df..array() renamed df_to_array() create consistent API.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/df.to.array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df.to.array","text":"","code":"df.to.array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/df_to_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"Convert data.frame (tibble) multidimensional array","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/df_to_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"df_to_array(df, dim_var_names, value_var_name = \"value\")"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/df_to_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"df data.frame() (tibble::tibble()) long format (row contains one value intended array) dim_var_names character() vector variable names df. variables factors, warning produced. value_var_name character() variable containing variable name df contains values intended array.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/df_to_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"array() dimensions defined variables df listed dim_var_names","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/df_to_array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a data.frame (or tibble) into a multidimensional array — df_to_array","text":"","code":"library(dplyr) library(tidyr) #>  #> Attaching package: ‘tidyr’ #> The following object is masked from ‘package:magrittr’: #>  #>     extract  df <- iris %>%   tidyr::pivot_longer(     names_to = \"parameter\",     cols = c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Width\", \"Petal.Length\")   ) %>%   mutate(parameter = factor(parameter, levels = unique(parameter))) arr <- df %>%   serocalculator:::df_to_array(      dim_var_names = c(\"parameter\", \"Species\")) ftable(arr[,,1:5]) #>                         obs   1   2   3   4   5 #> parameter    Species                            #> Sepal.Length setosa         5.1 4.9 4.7 4.6 5.0 #>              versicolor     7.0 6.4 6.9 5.5 6.5 #>              virginica      6.3 5.8 7.1 6.3 6.5 #> Sepal.Width  setosa         3.5 3.0 3.2 3.1 3.6 #>              versicolor     3.2 3.2 3.1 2.3 2.8 #>              virginica      3.3 2.7 3.0 2.9 3.0 #> Petal.Width  setosa         0.2 0.2 0.2 0.2 0.2 #>              versicolor     1.4 1.5 1.5 1.3 1.5 #>              virginica      2.5 1.9 2.1 1.8 2.2 #> Petal.Length setosa         1.4 1.4 1.3 1.5 1.4 #>              versicolor     4.7 4.5 4.9 4.0 4.6 #>              virginica      6.0 5.1 5.9 5.6 5.8"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/dot-nll.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate negative log-likelihood — .nll","title":"Calculate negative log-likelihood — .nll","text":"log_likelihood(), except negated requiring lambda log scale (used combination nlm(), ensure optimization search stray negative values lambda).","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/dot-nll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood — .nll","text":"","code":".nll(log.lambda, ...)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/dot-nll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood — .nll","text":"log.lambda natural logarithm incidence rate ... Arguments passed log_likelihood pop_data data.frame() cross-sectional serology data antibody age, additional columns antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype verbose logical: TRUE, print verbose log information console","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/dot-nll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood — .nll","text":"negative log-likelihood data current parameter values","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/est.incidence.by.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Seroincidence — est.incidence.by","title":"Estimate Seroincidence — est.incidence.by","text":"Function estimate seroincidences based cross-sectional serology data longitudinal response model.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/est.incidence.by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"est.incidence.by(   pop_data,   curve_params,   noise_params,   strata,   curve_strata_varnames = strata,   noise_strata_varnames = strata,   antigen_isos = pop_data %>% pull(\"antigen_iso\") %>% unique(),   lambda_start = 0.1,   build_graph = FALSE,   num_cores = 1L,   verbose = FALSE,   print_graph = FALSE,   ... )"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/est.incidence.by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Seroincidence — est.incidence.by","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns corresponding element strata input curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata character vector stratum-defining variables. Values must variable names pop_data. curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. build_graph whether graph log-likelihood function across range incidence rates (lambda values) num_cores Number processor cores use calculations computing strata. set 1 package parallel available, computations executed parallel. Default = 1L. verbose logical: TRUE, print verbose log information console print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed est.incidence, stats::nlm stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/est.incidence.by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Seroincidence — est.incidence.by","text":"strata meaningful inputs: object class \"seroincidence.\"; .e., list \"seroincidence\" objects est.incidence(), one stratum, meta-data attributes. strata missing, NULL, NA, \"\": object class \"seroincidence\".","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/est.incidence.by.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Seroincidence — est.incidence.by","text":"strata left empty, warning produced, recommending use est.incidence() unstratified analyses, data passed est.incidence(). reason want use est.incidence.() strata instead calling est.incidence(), may use NA, NULL, \"\" strata argument avoid warning.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/est.incidence.by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Seroincidence — est.incidence.by","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est2 <- est.incidence.by(   strata = \"catchment\",   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   # num_cores = 8 # Allow for parallel processing to decrease run time   iterlim = 5 # limit iterations for the purpose of this example ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Error in (function (pop_data, curve_params, noise_params, antigen_isos = pop_data$antigen_iso %>%     unique(), lambda_start = 0.1, stepmin = 1e-08, stepmax = 3,     verbose = FALSE, build_graph = FALSE, print_graph = build_graph &         verbose, ...) {    if (verbose > 1) {        message(\"inputs to `est.incidence()`:\")        print(environment() %>% as.list())    }    .errorCheck(data = pop_data, antigen_isos = antigen_isos,         curve_params = curve_params)    pop_data <- pop_data %>% dplyr::filter(.data$antigen_iso %in%         antigen_isos) %>% dplyr::select(pop_data %>% get_value_var(),         pop_data %>% get_age_var(), \"antigen_iso\") %>% filter(if_all(everything(),         ~!is.na(.x)))    curve_params <- curve_params %>% ungroup() %>% dplyr::mutate(alpha = .data$alpha *         365.25, d = .data$r - 1) %>% dplyr::filter(.data$antigen_iso %in%         antigen_isos) %>% dplyr::select(\"y1\", \"alpha\", \"d\", \"antigen_iso\") %>%         droplevels()    noise_params <- noise_params %>% dplyr::filter(.data$antigen_iso %in%         antigen_isos) %>% droplevels()    if (nrow(pop_data) == 0) {        stop(\"No data provided.\")    }    if (verbose) {        message(\"nrow(curve_params) = \", nrow(curve_params))    }    if (nrow(noise_params) != length(antigen_isos)) {        stop(\"too many rows of noise parameters.\")    }    pop_data <- pop_data %>% split(~antigen_iso)    curve_params <- curve_params %>% split(~antigen_iso)    noise_params <- noise_params %>% split(~antigen_iso)    res <- .nll(pop_data = pop_data, log.lambda = log(lambda_start),         antigen_isos = antigen_isos, curve_params = curve_params,         noise_params = noise_params, verbose = verbose, ...)    if (is.na(res)) {        warning(\"Could not calculate the log-likelihood with starting parameter value.\")        return(NULL)    }    if (verbose) {        message(\"Initial negative log-likelihood: \", res)    }    if (build_graph) {        if (verbose)             message(\"building likelihood graph\")        graph <- graph_loglik(highlight_points = lambda_start,             highlight_point_names = \"lambda_start\", pop_data = pop_data,             antigen_isos = antigen_isos, curve_params = curve_params,             noise_params = noise_params)        if (print_graph) {            print(graph + ggplot2::scale_x_log10(labels = scales::label_comma()))        }    }    else {        graph <- NULL    }    if (verbose)         message(\"about to call `nlm()`\")    time <- {        fit <- nlm(f = .nll, p = log(lambda_start), pop_data = pop_data,             antigen_isos = antigen_isos, curve_params = curve_params,             noise_params = noise_params, hessian = TRUE, stepmax = stepmax,             steptol = stepmin, verbose = verbose, print.level = ifelse(verbose,                 2, 0), ...)    } %>% system.time()    code_text <- nlm_exit_codes[fit$code]    message1 <- \"\\n`nlm()` completed with the following convergence code:\\n\"    if (fit$code %in% 3:5) {        warning(\"`nlm()` may not have reached the maximum likelihood estimate.\",             message1, code_text)    }    if (verbose) {        message(\"\\nElapsed time: \")        print(time)    }    if (build_graph) {        graph <- graph %>% add_point_to_graph(fit = fit, pop_data = pop_data,             antigen_isos = antigen_isos, curve_params = curve_params,             noise_params = noise_params)        if (print_graph) {            print(graph + ggplot2::scale_x_log10(labels = scales::label_comma()))        }    }    fit <- fit %>% structure(class = union(\"seroincidence\", class(fit)),         lambda_start = lambda_start, antigen_isos = antigen_isos,         ll_graph = graph)    return(fit)})(pop_data = structure(list(value = c(5.686082087, 1.228468773, 1.08478637, 1.429250766, 3.061925394, 3.10341076, 0.030783008, 6.39056873, 0.240410018, 3.454038997, 0.583069732, 1.203041652, 14.45068664, 13.67451493, 9.75485189, 1.854591567, 13.47695391, 3.915196534, 0.581800446, 0.464968826, 0.804765886, 0.170707915, 1.37100964, 3.117010281, 0.631406531, 0.457043221, 2.425332461, 1.706190158, 3.637831218, 69.89535911, 2.34926128, 2.421981965, 5.959094924, 1.208630376, 21.66881837, 1.980702589, 6.947747503, 0.326101424, 1.746848591, 5.743808809, 66.36882517, 8.592622525, 9.559545113, 1.463210702, 1.675724638, 2.001794061, 1.963263676, 0.144000922, 2.640976902, 2.639804308, 14.97160989, 0.581763723, 1.597643699, 4.211346348, 3.001945296, 0.216909126, 0.956437161, 9.571740156, 1.354560173, 1.019806649, 33.61421131, 0.234319736, 1.969896519, 1.97546336, 0.369090624, 3.81341291, 6.564569311, 7.044133815, 2.419830229, 5.613969982, 0.677328316, 0.430965682, 0.982963924, 0.3471668, 0.678930651, 1.373231907, 1.358157942, 1.607816553, 0.661695355, 3.73191269, 2.028698664, 3.084281709, 16.42857143, 4.100071759, 19.97064837, 8.296130952, 14.04425829, 6.958705357, 3.523065476, 9.819568452, 0.252788832, 0.875601873, 1.08911496, 6.30952381, 5.780099594, 5.30809886, 1.083906829, 0.807305453, 13.32860629, 0.53330289, 1.402155499, 6.947698519, 4.527529762, 1.970971466, 4.871499117, 2.123841957), age = c(18, 7.3, 2.6, 3.9, 13, 14.4, 3.4, 22, 4, 14.8, 15.1, 13, 15.6, 18, 18.7, 7.5, 23, 4, 2.3, 9.8, 21, 14.7, 4, 18.1, 11.2, 3.8, 11.5, 17.2, 17, 12, 11, 16, 5, 12, 20, 14, 7.3, 2.5, 10.5, 4.4, 11.2, 13.4, 14, 14.6, 19.2, 10, 5, 4.9, 9.2, 15.8, 18, 21, 6.6, 18, 7.3, 2.6, 3.9, 13, 14.4, 3.4, 22, 4, 14.8, 15.1, 13, 15.6, 18, 18.7, 7.5, 23, 4, 2.3, 9.8, 21, 14.7, 4, 18.1, 11.2, 3.8, 11.5, 17.2, 17, 12, 11, 16, 5, 12, 20, 14, 7.3, 2.5, 10.5, 4.4, 11.2, 13.4, 14, 14.6, 19.2, 10, 5, 4.9, 9.2, 15.8, 18, 21, 6.6), antigen_iso = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), levels = c(\"HlyE_IgA\", \"HlyE_IgG\"), class = \"factor\")), row.names = c(NA, -106L), class = c(\"pop_data\", \"tbl_df\", \"tbl\", \"data.frame\"), antigen_isos = structure(1:2, levels = c(\"HlyE_IgA\", \"HlyE_IgG\"), class = \"factor\"), age_var = \"age\", value_var = \"value\", id_var = \"id\", biomarker_var = \"antigen_iso\"),     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"), curve_params = structure(list(        y1 = c(63.4814181747235, 163.892554798255, 288.162064918977,         153.628916105779, 431.819308863086, 143.455366610532,         30.5523468510691, 53.3082414171847, 160.248521898273,         557.057672849571, 524.750289905931, 957.183975655821,         30.7757024960889, 696.885680249965, 41.3351250925557,         49.696304772494, 248.45349985843, 284.238616409023, 319.258088721929,         55.1973083368717, 9.85590602194967, 142.48248989252,         58.569079122574, 125.103468262329, 23.5781354491369,         154.134822731266, 195.272088240338, 512.685734719332,         15.2392432670215, 367.675521980743, 138.597844051858,         94.054499427184, 17.7002608315275, 420.52048494015, 34.6297552188594,         117.116522186164, 670.782356315421, 139.74457140291,         350.389335470867, 280.773133101888, 524.805205039604,         341.875466132432, 21.7419806650667, 807.973583062943,         54.648570130211, 161.138851467563, 62.4626331974805,         345.012549159694, 13.5263909774471, 287.580231401241,         404.641741222692, 329.62595529365, 127.460080376226,         119.698649885564, 47.6743496395363, 53.3427557637164,         4.86255586452024, 93.6129541009416, 217.262169334863,         55.1129621346739, 35.0985002310083, 118.566555662152,         1098.49716393263, 54.1079875304336, 58.9629133595119,         135.952389154747, 42.1086528807225, 260.595389430244,         34.7560167599678, 257.405675946662, 179.060328314574,         153.694462686078, 24.6668810561169, 49.4445183661751,         574.894674464689, 105.684016008491, 16.5510503302757,         60.2041812390575, 11.0453659443594, 462.717062144179,         329.450591149241, 382.551153691391, 134.232955969569,         239.461396134792, 14.3719137242382, 264.590126446701,         40.6802550135182, 57.5144029967135, 88.2747290650814,         430.319125620458, 10.6130205814949, 558.11559324373,         32.0135413405647, 24.0384935132398, 38.0504292985456,         77.8837709668701, 126.820466076145, 159.918844849729,         69.8997358428869, 262.882882182499, 354.532775056227,         412.676482549134, 114.923006872123, 120.873465623906,         132.600241082824, 103.468186139286, 447.006072553703,         1085.2206115645, 33.5210558211561, 253.133868952307,         130.757054116255, 66.9218148382036, 374.582473744296,         139.536904862498, 39.3988388717891, 96.9165448765317,         179.919538402879, 1493.88241008644, 14.8008942224083,         404.839466898054, 532.707197471499, 46.4587352210946,         24.4858328538187, 49.4642193897299, 95.0227133002871,         93.9690584818973, 260.176071822173, 141.989238850102,         39.9773724835592, 782.954380644115, 29.4107109741128,         516.645589158684, 211.572242009836, 1822.2130872245,         52.509809995604, 13.151025358795, 19.3857150727236, 35.2409166828083,         80.9687188700813, 177.173315875654, 26.3645555024978,         117.225011423899, 87.0261479522951, 126.950596752532,         27.2083356730063, 83.8209553654887, 65.4624630013765,         60.5914219180724, 50.5312183443017, 220.403393063456,         57.8814946339193, 321.339218295469, 112.331004619454,         214.114844173551, 46.2663050252167, 253.087688470067,         75.8950087172145, 364.707374884755, 21.9277543373803,         342.0606126627, 72.882860491943, 41.3783165219195, 44.191172297619,         74.7393669070667, 50.8282443896275, 265.44382427441,         228.249964982196, 150.22058930907, 137.733518575792,         282.081550999412, 225.506262502798, 31.1882936999509,         163.565411792614, 182.312164883095, 468.092763349791,         26.948324983628, 47.0627893374153, 265.595229664979,         11.1704463639473, 172.041567739628, 161.068053764295,         432.516403298317, 89.2366348763595, 93.0637657208957,         867.380852022527, 402.754319315464, 17.8792209899537,         288.905665377172, 21.9097654634741, 48.8445971425635,         21.8483966121941, 183.574641774107, 42.8450651248465,         392.445793775464, 11.3934815053904, 323.545778561326,         120.315053250724, 164.404167510907, 249.551023456624,         41.4554723971584), alpha = c(0.000580750108201723, 0.00457307241085562,         0.000459482362967931, 0.000920576917699969, 0.000277272439231206,         0.00293646148218711, 0.00126803096870046, 0.000185056384174521,         0.00139768218010029, 0.000505440617097379, 0.0002940737416904,         0.000654669519525582, 0.00459319232964828, 0.000887688202447749,         0.00233809215626583, 0.000209870475682425, 4.67002985675705e-05,         0.00104003594908331, 0.000448299061620713, 0.000207443820402452,         0.00184390439817354, 0.000541774876402651, 0.000165952326601835,         0.00322191298857545, 0.000801608679478142, 0.00117192216751816,         0.00212248013302342, 0.000976984276211827, 0.00206185338337752,         0.000384579510907555, 0.000520896079311473, 0.0010065164190521,         0.00110520990806848, 0.000183194889839954, 0.000503901371757611,         0.000228263475932955, 0.00194228531845488, 0.000171501250472504,         0.000369695819464055, 0.00104853639157351, 0.000697205747962488,         0.000311385146127225, 0.000354295233312761, 0.00124573445413704,         0.000423939415887257, 0.000801256049243512, 0.00120645375923901,         0.00237756125361664, 0.00123608024365872, 0.000358006290675028,         0.000494140830213741, 0.000156002269928014, 0.00245664175975264,         0.000841503824065256, 0.00193807512902148, 0.000497129501207083,         0.0054332923652717, 0.00127310051929336, 0.000551300789665394,         0.00063403271748031, 0.00174555975196488, 0.000377066120482253,         0.000483383608036441, 0.000338217966168421, 0.00219483150170641,         0.00140321394275048, 0.00108547239461618, 0.00102792815759423,         0.00349137373455354, 0.000352559907428524, 0.00162066292577739,         0.00279808506815644, 0.0019601191828733, 0.000330547561933239,         0.000355786402556068, 0.000438855656341692, 0.00124273584887326,         0.000552763674223956, 0.00186976972015624, 0.000333069293847281,         0.00110379614438794, 0.00146362360047569, 0.000139360006251701,         0.000397180389049223, 0.00114211896576467, 0.00100256857212561,         0.00109121884614163, 0.00126819582344172, 0.000987731162476162,         0.00128987495424607, 0.00282261928684757, 0.000374791757339121,         0.00113865219626825, 0.000532967559301844, 0.000513638935226,         0.000359459156219103, 0.000275859190991226, 0.000354699360187289,         0.0026713535164984, 0.00279347203459326, 0.000128197309556073,         0.00596927380308968, 0.00705294513320615, 0.00202300752718538,         0.00162192753599336, 0.00037424870310045, 0.00026754841964219,         0.000730493664235532, 0.00153178738489586, 0.00325308988648181,         0.000483857556168969, 0.000588331496127102, 0.000298345006855044,         0.00112620692068216, 0.00168651670227233, 0.000204975520121039,         0.00193362267850561, 0.00142648771405165, 0.00134562054578092,         0.000208857156789975, 0.00062536817604273, 0.00133456484375557,         0.00938643234422778, 0.000937138007517452, 0.000608514388479188,         0.00264210323257104, 0.00039208182606313, 0.0033181097851919,         0.00185906798532453, 0.000907043634868749, 0.00115294008901915,         0.000245596650454221, 0.00108389960019551, 0.00201213285019601,         0.00190943097530246, 0.000408867260930471, 0.000791381820969645,         0.00201466973548936, 0.00171498662024685, 0.00140127884303538,         0.00100416392412402, 0.000519205915058319, 0.00167112203653147,         0.000838815315735768, 0.000721650217325436, 0.000505339539082098,         0.000909450488173269, 0.00121178596919844, 0.000826864269791345,         0.00292640667315851, 0.000304137699570372, 0.00113983701054901,         0.000389736378485822, 0.00298474787407907, 0.000841259823338093,         0.00368059814723494, 0.000421837664169578, 0.00123986844219214,         0.000760625071667979, 0.00148555030442975, 0.000832930793734274,         0.000300251530379406, 0.00191957782487084, 0.000394689964996692,         0.00267988874066063, 0.00153195589077585, 0.00122125043306422,         0.000373008257684936, 0.00134318717545753, 0.00069797309624943,         0.000766596477494754, 0.000245039778346658, 0.000872995636865741,         0.00712119308128448, 4.98002775826703e-05, 0.000948299668165794,         0.000521991110458308, 0.00125413398046824, 0.000780668464134002,         0.002049580788824, 5.11867422438249e-05, 0.00561075492929095,         0.000808839543407316, 0.000713355973905716, 0.00085947398602869,         0.0021832078345804, 0.00180421443138756, 0.00058909093348889,         0.000599760589426105, 0.00135466647345608, 0.00143236264326595,         0.000494961785196012, 0.000608033851949211, 0.00451563256019836,         0.00337223348145991, 0.000362658114803346, 8.99092256955004e-05,         0.000361336825504191, 0.000266811004105529, 0.00308982754595651        ), r = c(1.74503804112011, 1.17416885836092, 2.66300631906146,         1.297476514491, 1.61055432802302, 1.13118326027234, 1.87013752944932,         2.12891387733085, 1.3974520424861, 1.97493702481855,         2.26045907519679, 1.73951774586965, 1.54839140734894,         1.28946525686499, 1.47712107228344, 1.60869619166956,         8.49637822070033, 1.22786543992899, 1.74930137992105,         2.09051460553557, 1.25152824238038, 1.6479440039637,         1.87839842610789, 1.1688001176233, 1.27395812849041,         1.42241923931779, 1.60775344339114, 1.22367302575217,         1.13545307616552, 1.4528247924265, 1.83738947009373,         1.38484985799107, 1.33445598250036, 2.21809845578665,         2.87854398365401, 2.95589130494591, 1.37775176705415,         1.78770312896554, 3.42523396464135, 1.21637549019504,         1.48417977755664, 2.43501743648731, 1.36792322142982,         1.47888442241868, 1.51608025120621, 1.19711459871732,         2.80191321923623, 1.11128063778834, 1.29719404599601,         1.56958115730821, 1.40645421035182, 2.02055071677547,         1.58553635830427, 1.31900452223899, 1.22922069635161,         1.65815487698244, 1.55892554941562, 1.26151595080374,         1.37707355668328, 1.74441842726501, 1.20180972115458,         1.44365502023906, 2.38510091527588, 1.88284644056197,         1.60597957384943, 1.34867326455727, 1.62070645876627,         1.31154857933272, 2.12645665211127, 1.65075568439601,         1.48036454239674, 1.19982166204518, 2.00237147751504,         1.70487485680804, 1.8706623806063, 1.67166807264746,         1.92194113718141, 1.61005143847568, 1.35004974710959,         2.25841123408653, 1.43335501102913, 1.55790365098244,         4.72154907642204, 2.58282464355033, 1.4444685411938,         1.1934183150664, 2.03619132144836, 1.50070658907823,         1.70535433471468, 1.30762000737011, 1.35345821652327,         2.11594435320902, 1.93343793924938, 1.40636886392934,         1.64717599789262, 3.07065710721104, 1.64913472189956,         1.56811466820133, 1.3743054888023, 1.32153142343595,         1.75972177367333, 1.0321394831503, 1.19619621962556,         1.12522664793909, 2.54761339632466, 1.65664548682786,         1.84384875557502, 1.37448370062602, 1.3397178020426,         1.10640954472882, 2.19064717043815, 1.57332473216103,         1.69127262231831, 1.27894797055983, 1.43991225166163,         3.51828219391506, 1.46683565487797, 1.34968938149023,         1.47588549995483, 1.77726961029852, 1.98675568807676,         1.24408225496149, 1.17673214459276, 1.24982115428208,         1.93255112801193, 1.27076878883401, 2.15156743349361,         1.09741062383505, 1.56474555183983, 1.26556384404366,         1.49417874265552, 1.86821491243254, 1.6685112860065,         1.13876686280646, 3.89157113577646, 2.26881576887324,         1.98350653159569, 1.11306753318267, 1.30383514829675,         1.12087842385809, 1.33146601283398, 1.93446154806597,         1.37443801640134, 1.5782031508516, 2.36840523534241,         1.90640359775196, 1.71299918615934, 1.43614740844928,         2.37312340146821, 1.16058369630921, 1.93968496829668,         1.20625335236676, 1.24209864788451, 1.11020753598308,         1.2758632519492, 1.15080012417002, 2.14686026015812,         1.27879180342719, 2.22148215191972, 1.28974327693987,         1.42731834708861, 2.32334947011738, 1.61955363733894,         1.47492898090976, 1.5350794705679, 1.2441188700458, 1.23133925719503,         1.99038276427008, 1.51776282933421, 1.31925025031428,         1.61304802616839, 1.31460732660273, 1.42961019701532,         1.03565806252171, 4.80132617777742, 1.38736960114353,         1.55863107325236, 1.52666057929324, 2.28991200129968,         1.15325838364272, 6.2383156195126, 1.09899855746642,         1.65867700079462, 1.5005684131288, 1.95624425662808,         1.15457745212576, 1.46923995980707, 1.39171137447131,         1.65402676714906, 1.26867038104759, 2.67952161518617,         1.98222310689708, 2.32213915915393, 1.09182873618516,         2.14613567346721, 1.79173305163522, 2.56558099827198,         1.82633749444038, 2.24145862650252, 1.14228545396753),         antigen_iso = structure(clevels = c(\"HlyE_IgA\",         \"HlyE_IgG\", \"LPS_IgA\", \"LPS_IgG\", \"Vi_IgG\"), class = \"factor\")), row.names = c(NA,     -200L), class = c(\"curve_params\", \"tbl_df\", \"tbl\", \"data.frame\"    ), antigen_isos = structure(1:5, levels = c(\"HlyE_IgA\", \"HlyE_IgG\",     \"LPS_IgA\", \"LPS_IgG\", \"Vi_IgG\"), class = \"factor\"), biomarker_var = \"antigen_iso\"),     noise_params = structure(list(nu = c(2.59560775795, 2.3600514143    ), eps = c(0.2793208827, 0.1456403573), y.low = c(0.508452309,     1.594575648), y.high = c(5e+06, 5e+06), antigen_iso = c(\"HlyE_IgA\",     \"HlyE_IgG\")), row.names = c(NA, -2L), class = c(\"noise_params\",     \"tbl_df\", \"tbl\", \"data.frame\"), antigen_isos = c(\"HlyE_IgA\",     \"HlyE_IgG\", \"LPS_IgA\", \"LPS_IgG\")), lambda_start = 0.1, antigen_isos = c(\"HlyE_IgG\",     \"HlyE_IgA\"), build_graph = FALSE, print_graph = FALSE, verbose = FALSE,     iterlim = 5): formal argument \"antigen_isos\" matched by multiple actual arguments #> Timing stopped at: 0.003 0 0.003 print(est2) #> Error: object 'est2' not found summary(est2) #> Error: object 'est2' not found"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/est.incidence.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"function models seroincidence using maximum likelihood estimation; , finds value seroincidence parameter maximizes likelihood (.e., joint probability) data.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/est.incidence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"est.incidence(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data$antigen_iso %>% unique(),   lambda_start = 0.1,   stepmin = 1e-08,   stepmax = 3,   verbose = FALSE,   build_graph = FALSE,   print_graph = build_graph & verbose,   ... )"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/est.incidence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"pop_data data.frame cross-sectional serology data per antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector one antibody names. Values must match pop_data lambda_start starting guess incidence rate, years/event. stepmin positive scalar providing minimum allowable relative step length. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. verbose logical: TRUE, print verbose log information console build_graph whether graph log-likelihood function across range incidence rates (lambda values) print_graph whether display log-likelihood curve graph course running est.incidence() ... Arguments passed stats::nlm typsize estimate size parameter     minimum. fscale estimate size f minimum. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/est.incidence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"\"seroincidence\" object, stats::nlm() fit object extra meta-data attributes lambda_start, antigen_isos, ll_graph","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/est.incidence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the maximum likelihood estimate of the incidence rate parameter — est.incidence","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"), )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.166 0.0178  0.135  0.205     0.95   -524.          5 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/example_noise_params_pk.html","id":null,"dir":"Reference","previous_headings":"","what":"Small example of noise parameters for typhoid — example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"subset noise parameter estimates SEES study, examples testing, Pakistan","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/example_noise_params_pk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"","code":"example_noise_params_pk"},{"path":[]},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/example_noise_params_pk.html","id":"example-noise-params-pk","dir":"Reference","previous_headings":"","what":"example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"curve_params object (as_curve_params()) 4 rows 7 columns: antigen_iso antigen isotype measured (data long format) Country Location noise parameters estimated y.low Lower limit detection eps Measurement noise, defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. nu Biological noise: error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. y.high Upper limit detection Lab Lab noise estimated.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/example_noise_params_pk.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Small example of noise parameters for typhoid — example_noise_params_pk","text":"https://osf.io/rtw5k","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/example_noise_params_sees.html","id":null,"dir":"Reference","previous_headings":"","what":"Small example of noise parameters for typhoid — example_noise_params_sees","title":"Small example of noise parameters for typhoid — example_noise_params_sees","text":"subset noise parameter estimates SEES study, examples testing.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/example_noise_params_sees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Small example of noise parameters for typhoid — example_noise_params_sees","text":"","code":"example_noise_params_sees"},{"path":[]},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/example_noise_params_sees.html","id":"example-noise-params-pk","dir":"Reference","previous_headings":"","what":"example_noise_params_pk","title":"Small example of noise parameters for typhoid — example_noise_params_sees","text":"curve_params object (as_curve_params()) 4 rows 7 columns: antigen_iso antigen isotype measured (data long format) Country Location noise parameters estimated y.low Lower limit detection eps Measurement noise, defined CV (coefficient variation) ratio standard deviation mean replicates. Note CV ideally measured across plates rather within plate. nu Biological noise: error cross-reactivity antibodies. defined 95th percentile distribution antibody responses antigen-isotype population exposure. y.high Upper limit detection Lab Lab noise estimated.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/example_noise_params_sees.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Small example of noise parameters for typhoid — example_noise_params_sees","text":"https://osf.io/rtw5k","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/f_dev.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Calculates negative log-likelihood (deviance) one antigen:isotype pair several values incidence (lambda).","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/f_dev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"f_dev(lambda, csdata, lnpars, cond)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/f_dev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"lambda numeric vector incidence parameters, events per person-year","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/f_dev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"numeric vector negative log-likelihoods, corresponding elements input lambda","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/f_dev.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"Vectorized version f_dev0(); interface C lib serocalc.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/f_dev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and several values of incidence — f_dev","text":"","code":"# \\donttest{ library(dplyr) library(tibble)  # load in longitudinal parameters curve_params <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # load in pop data xs_data <-   sees_pop_data_pk_100  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data =   xs_data %>%   dplyr::filter(    .data$catchment == \"aku\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params =   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params =   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params =     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambdas = seq(.1, .2, by = .01) f_dev(     lambda = lambdas,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #>  [1] 155.7506 153.2650 151.1030 149.2133 147.5558 146.0978 144.8130 143.6793 #>  [9] 142.6785 141.7951 141.0158 # }"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/f_dev0.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"Calculate negative log-likelihood (deviance) one antigen:isotype pair incidence rate","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/f_dev0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"f_dev0(lambda, csdata, lnpars, cond)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/f_dev0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"lambda numeric() incidence parameter, events per person-year csdata cross-sectional sample data containing variables value age lnpars longitudinal antibody decay model parameters alpha, y1, d cond measurement noise parameters nu, eps, y.low, y.high","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/f_dev0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"numeric() negative log-likelihood, corresponding input lambda","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/f_dev0.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"interface C lib serocalc.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/f_dev0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate negative log-likelihood (deviance) for one antigen:isotype pair and incidence rate — f_dev0","text":"","code":"# \\donttest{ library(dplyr) library(tibble)  # load in longitudinal parameters curve_params <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # load in pop data xs_data <-   sees_pop_data_pk_100  #Load noise params noise_params <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # low cutoff (llod)   y.high = c(5e6, 5e6))                      # high cutoff (y.high)  cur_antibody = \"HlyE_IgA\"  cur_data <-   xs_data %>%   dplyr::filter(    .data$catchment == \"dhaka\",    .data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_curve_params <-   curve_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody) %>%   dplyr::slice_head(n = 100)  cur_noise_params <-   noise_params %>%   dplyr::filter(.data$antigen_iso == cur_antibody)  if(!is.element('d', names(cur_curve_params))) {   cur_curve_params <-     cur_curve_params %>%     dplyr::mutate(       alpha = .data$alpha * 365.25,       d = .data$r - 1) }  lambda = 0.1 f_dev0(     lambda = lambda,     csdata = cur_data,     lnpars = cur_curve_params,     cond = cur_noise_params   ) #> [1] 0 # }"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/fdev.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate negative log-likelihood (deviance) — fdev","title":"Calculate negative log-likelihood (deviance) — fdev","text":"fdev() renamed f_dev() create consistent API.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/fdev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate negative log-likelihood (deviance) — fdev","text":"","code":"fdev(lambda, csdata, lnpars, cond)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/graph.curve.params.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph estimated antibody decay curve — graph.curve.params","title":"Graph estimated antibody decay curve — graph.curve.params","text":"Graph estimated antibody decay curve","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/graph.curve.params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"graph.curve.params(   curve_params,   antigen_isos = unique(curve_params$antigen_iso),   verbose = FALSE )"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/graph.curve.params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph estimated antibody decay curve — graph.curve.params","text":"curve_params data.frame() containing MCMC samples antibody decay curve parameters antigen_isos antigen isotypes verbose verbose output","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/graph.curve.params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph estimated antibody decay curve — graph.curve.params","text":"ggplot2::ggplot() object","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/graph.curve.params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph estimated antibody decay curve — graph.curve.params","text":"","code":"curve <-   typhoid_curves_nostrat_100 |>   dplyr::filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  plot1 <- graph.curve.params(curve)  print(plot1) #> Warning: Removed 35 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/graph_loglik.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph log-likelihood of data — graph_loglik","title":"Graph log-likelihood of data — graph_loglik","text":"Graph log-likelihood data","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/graph_loglik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"graph_loglik(   pop_data,   curve_params,   noise_params,   antigen_isos = pop_data %>% get_biomarker_levels(),   x = 10^seq(-3, 0, by = 0.1),   highlight_points = NULL,   highlight_point_names = \"highlight_points\",   log_x = FALSE,   previous_plot = NULL,   curve_label = paste(antigen_isos, collapse = \" + \"),   ... )"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/graph_loglik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph log-likelihood of data — graph_loglik","text":"pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. x sequence lambda values graph highlight_points possible highlighted value highlight_point_names labels highlighted points log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? previous_plot NULL, current data added existing graph curve_label NULL, add label curve ... Arguments passed log_likelihood verbose logical: TRUE, print verbose log information console","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/graph_loglik.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph log-likelihood of data — graph_loglik","text":"ggplot2::ggplot()","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/graph_loglik.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph log-likelihood of data — graph_loglik","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <-   sees_pop_data_pk_100  # Load curve parameters and subset for the purposes of this example curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # Load noise parameters cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5),                          # Biologic noise (nu)   eps = c(0, 0),                             # M noise (eps)   y.low = c(1, 1),                           # Low cutoff (llod)   y.high = c(5e6, 5e6))                      # High cutoff (y.high)  # Graph the log likelihood lik_HlyE_IgA <- # nolint: object_name_linter   graph_loglik(     pop_data = xs_data,     curve_params = curve,     noise_params = cond,     antigen_isos = \"HlyE_IgA\",     log_x = TRUE )  lik_HlyE_IgA # nolint: object_name_linter"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/ldpar.html","id":null,"dir":"Reference","previous_headings":"","what":"extract a row from longitudinal parameter set — ldpar","title":"extract a row from longitudinal parameter set — ldpar","text":"take random sample longitudinal parameter set given age infection,  list antibodies","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/ldpar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract a row from longitudinal parameter set — ldpar","text":"","code":"ldpar(age, antigen_isos, nmc, npar, ...)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/ldpar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract a row from longitudinal parameter set — ldpar","text":"age age infection antigen_isos antigen isotypes nmc mcmc sample use npar number parameters ... passed simpar()","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/ldpar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract a row from longitudinal parameter set — ldpar","text":"array parameters: c(y0,b0,mu0,mu1,c1,alpha,shape)","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/llik.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate log-likelihood — llik","title":"Calculate log-likelihood — llik","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.  llik() renamed log_likelihood() create consistent API.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/llik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — llik","text":"","code":"llik(...)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/load_curve_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Load antibody decay curve parameter samples — load_curve_params","title":"Load antibody decay curve parameter samples — load_curve_params","text":"Load antibody decay curve parameter samples","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/load_curve_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"load_curve_params(file_path, antigen_isos = NULL)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/load_curve_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load antibody decay curve parameter samples — load_curve_params","text":"file_path path RDS file containing MCMC samples antibody decay curve parameters y0, y1, t1, alpha, r, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/load_curve_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load antibody decay curve parameter samples — load_curve_params","text":"curve_params object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/load_curve_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load antibody decay curve parameter samples — load_curve_params","text":"","code":"curve <- load_curve_params(serocalculator_example(\"example_curve_params.rds\"))  print(curve) #> # A tibble: 500 × 8 #>        X antigen_iso  iter     y0     y1    t1     alpha     r #>    <int> <chr>       <int>  <dbl>  <dbl> <dbl>     <dbl> <dbl> #>  1     1 HlyE_IgA        1  2.48    63.5  9.52 0.000581   1.75 #>  2     2 HlyE_IgG        1  3.04   164.   6.55 0.00457    1.17 #>  3     3 LPS_IgA         1  0.748  103.   4.98 0.00308    1.58 #>  4     4 LPS_IgG         1  0.941  320.   6.14 0.00166    1.41 #>  5     5 Vi_IgG          1  8.46  4348.   3.07 0.0000340  1.06 #>  6     6 HlyE_IgA        2  3.86   288.   1.27 0.000459   2.66 #>  7     7 HlyE_IgG        2  1.82   154.  10.8  0.000921   1.30 #>  8     8 LPS_IgA         2  1.76   852.   2.49 0.000126   2.91 #>  9     9 LPS_IgG         2  0.434   20.6  4.29 0.00122    1.37 #> 10    10 Vi_IgG          2 18.8    345.   3.48 0.000142   1.02 #> # ℹ 490 more rows"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/load_noise_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Load noise parameters — load_noise_params","title":"Load noise parameters — load_noise_params","text":"Load noise parameters","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/load_noise_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load noise parameters — load_noise_params","text":"","code":"load_noise_params(file_path, antigen_isos = NULL)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/load_noise_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load noise parameters — load_noise_params","text":"file_path path RDS file containing biologic measurement noise antibody decay curve parameters y.low, eps, nu, y.high, stored data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/load_noise_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load noise parameters — load_noise_params","text":"noise object (tibble::tbl_df extra attribute antigen_isos)","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/load_noise_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load noise parameters — load_noise_params","text":"","code":"noise <- load_noise_params(serocalculator_example(\"example_noise_params.rds\")) print(noise) #> # A tibble: 4 × 8 #>       X antigen_iso Country  y.low   eps    nu  y.high Lab   #>   <int> <chr>       <chr>    <dbl> <dbl> <dbl>   <dbl> <chr> #> 1     1 HlyE_IgA    Pakistan 0.508 0.279  2.60 5000000 AKU   #> 2     2 HlyE_IgG    Pakistan 1.59  0.146  2.36 5000000 AKU   #> 3     3 LPS_IgA     Pakistan 5.13  0.246  2.14 5000000 AKU   #> 4     4 LPS_IgG     Pakistan 4.84  0.273  3.24 5000000 AKU"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/load_pop_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a cross-sectional antibody survey data set — load_pop_data","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"Load cross-sectional antibody survey data set","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/load_pop_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"load_pop_data(file_path, ...)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/load_pop_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"file_path path RDS file containing cross-sectional antibody survey data set, stored data.frame() tibble::tbl_df ... Arguments passed as_pop_data data data.frame() tibble::tbl_df antigen_isos character() vector antigen isotypes used analyses age character() identifying age column id character() identifying id column value character() identifying value column standardize logical() determine standardization columns","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/load_pop_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"pop_data object (tibble::tbl_df extra attributes)","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/load_pop_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a cross-sectional antibody survey data set — load_pop_data","text":"","code":"xs_data <- load_pop_data(serocalculator_example(\"example_pop_data.rds\"))  print(xs_data) #> # A tibble: 200 × 8 #>    id    Country  cluster               catchment   age ageCat antigen_iso value #>    <chr> <chr>    <chr>                 <chr>     <dbl> <chr>  <chr>       <dbl> #>  1 P1    Pakistan Lyari Other           kgh        13.2 5-15   HlyE_IgA    0.568 #>  2 P3    Pakistan Gillani Railway Stat… aku        18   16+    HlyE_IgA    5.69  #>  3 P5    Pakistan Gillani Railway Stat… aku         7.3 5-15   HlyE_IgA    1.23  #>  4 P7    Pakistan Civic Centre          aku         2.6 <5     HlyE_IgA    1.08  #>  5 P9    Pakistan Gillani Railway Stat… aku         3.9 <5     HlyE_IgA    1.43  #>  6 P11   Pakistan Civic Centre          aku        13   5-15   HlyE_IgA    3.06  #>  7 P13   Pakistan Machar Colony         kgh        11   5-15   HlyE_IgA    0.779 #>  8 P15   Pakistan Machar Colony         kgh        12   5-15   HlyE_IgA    1.90  #>  9 P17   Pakistan Machar Colony         kgh        16   16+    HlyE_IgA    1.41  #> 10 P19   Pakistan Gillani Railway Stat… aku        14.4 5-15   HlyE_IgA    3.10  #> # ℹ 190 more rows"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/log_likelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate log-likelihood — log_likelihood","title":"Calculate log-likelihood — log_likelihood","text":"Calculates log-likelihood set cross-sectional antibody response data, given incidence rate (lambda) value.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/log_likelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate log-likelihood — log_likelihood","text":"","code":"log_likelihood(   lambda,   pop_data,   curve_params,   noise_params,   antigen_isos = get_biomarker_levels(pop_data),   verbose = FALSE,   ... )"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/log_likelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate log-likelihood — log_likelihood","text":"lambda numeric vector incidence parameters, events per person-year pop_data data.frame() cross-sectional serology data antibody age, additional columns curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype antigen_isos Character vector listing one antigen isotypes. Values must match pop_data. verbose logical: TRUE, print verbose log information console ... additional arguments passed functions (currently used).","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/log_likelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate log-likelihood — log_likelihood","text":"log-likelihood data current parameter values","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/log_likelihood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate log-likelihood — log_likelihood","text":"","code":"library(dplyr) library(tibble)  # Load cross-sectional data xs_data <-   sees_pop_data_pk_100  # Load curve parameters and subset for the purposes of this example curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  # Load noise params cond <- tibble(   antigen_iso = c(\"HlyE_IgG\", \"HlyE_IgA\"),   nu = c(0.5, 0.5), # Biologic noise (nu)   eps = c(0, 0), # M noise (eps)   y.low = c(1, 1), # low cutoff (llod)   y.high = c(5e6, 5e6) ) # high cutoff (y.high)  # Calculate log-likelihood ll_AG <- log_likelihood(   pop_data = xs_data,   curve_params = curve,   noise_params = cond,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   lambda = 0.1 ) %>% print() #> [1] -610.1194"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/mk_baseline.html","id":null,"dir":"Reference","previous_headings":"","what":"generate random sample from baseline distribution — mk_baseline","title":"generate random sample from baseline distribution — mk_baseline","text":"generate random sample baseline distribution","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/mk_baseline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate random sample from baseline distribution — mk_baseline","text":"","code":"mk_baseline(kab, n = 1, blims, ...)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/mk_baseline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate random sample from baseline distribution — mk_baseline","text":"kab integer indicating row read blims n number observations blims range possible baseline antibody levels ... currently used","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/mk_baseline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate random sample from baseline distribution — mk_baseline","text":"numeric() vector","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/plot_curve_params_one_ab.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph an antibody decay curve model — plot_curve_params_one_ab","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"Graph antibody decay curve model","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/plot_curve_params_one_ab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"plot_curve_params_one_ab(   object,   verbose = FALSE,   alpha = 0.4,   n_curves = 100,   n_points = 1000,   log_x = FALSE,   log_y = TRUE,   rows_to_graph = seq_len(min(n_curves, nrow(object))),   xlim = c(10^-1, 10^3.1),   ... )"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/plot_curve_params_one_ab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"object data.frame() curve parameters (one MCMC samples) verbose verbose output alpha (passed ggplot2::geom_function()) transparent curves : 0 = fully transparent (invisible) 1 = fully opaque n_curves many curves plot (see details). n_points Number points interpolate along x axis (passed ggplot2::geom_function()) log_x x-axis logarithmic scale (TRUE) linear scale (FALSE, default)? log_y Y-axis logarithmic scale (default, TRUE) linear scale (FALSE)? rows_to_graph rows curve_params plot (overrides n_curves). xlim range x values graph ... Arguments passed ggplot2::geom_function mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data Ignored stat_function(), use. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/plot_curve_params_one_ab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"ggplot2::ggplot() object","code":""},{"path":[]},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/plot_curve_params_one_ab.html","id":"n-curves-and-rows-to-graph","dir":"Reference","previous_headings":"","what":"n_curves and rows_to_graph","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"cases, curve_params contain many rows MCMC samples samples plotted . Setting  n_curves argument value smaller number rows curve_params cause function select first n_curves rows graph. Setting n_curves larger number rows ` result curves plotted. user directly specifies rows_to_graph argument, n_curves effect.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/plot_curve_params_one_ab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph an antibody decay curve model — plot_curve_params_one_ab","text":"","code":"# \\donttest{ library(dplyr) # loads the `%>%` operator and `dplyr::filter()`  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso == (\"HlyE_IgG\")) %>%   serocalculator:::plot_curve_params_one_ab()    curve  # }"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/print.seroincidence.by.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for seroincidence.by Object — print.seroincidence.by","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"Custom print() function show output seroincidence calculator est.incidence.().","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/print.seroincidence.by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' print(x, ...)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/print.seroincidence.by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/print.seroincidence.by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"invisible copy input parameter x","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/print.seroincidence.by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence.by Object — print.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/print.seroincidence.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for seroincidence Object — print.seroincidence","title":"Print Method for seroincidence Object — print.seroincidence","text":"Custom print() function show output seroincidence calculator est.incidence().","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/print.seroincidence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"# S3 method for class 'seroincidence' print(x, ...)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/print.seroincidence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for seroincidence Object — print.seroincidence","text":"x list containing output function est.incidence.(). ... Additional arguments affecting summary produced.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/print.seroincidence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for seroincidence Object — print.seroincidence","text":"invisible copy input parameter x","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/print.seroincidence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for seroincidence Object — print.seroincidence","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Print the seroincidence object to the console print(seroincidence)  # Or simply type (appropriate print method will be invoked automatically) seroincidence } # }"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/print.summary.seroincidence.by.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"Custom print() function \"summary.seroincidence.\" objects (constructed summary.seroincidence.())","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/print.summary.seroincidence.by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"# S3 method for class 'summary.seroincidence.by' print(x, ...)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/print.summary.seroincidence.by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"x \"summary.seroincidence.\" object (constructed summary.seroincidence.()) ... Additional arguments affecting summary produced.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/print.summary.seroincidence.by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"invisible copy input parameter x","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/print.summary.seroincidence.by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for Seroincidence Summary Object — print.summary.seroincidence.by","text":"","code":"if (FALSE) { # \\dontrun{ # Estimate seroincidence seroincidence <- est.incidence.by(...)  # Calculate summary statistics for the seroincidence object seroincidenceSummary <- summary(seroincidence)  # Print the summary of seroincidence object to the console print(seroincidenceSummary)  # Or simply type (appropriate print method will be invoked automatically) seroincidenceSummary } # }"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. ggplot2 autoplot","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sees_pop_data_100.html","id":null,"dir":"Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_100","title":"Small example cross-sectional data set — sees_pop_data_100","text":"subset data SEES data, examples testing.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sees_pop_data_100.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_100","text":"","code":"sees_pop_data_100"},{"path":[]},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sees_pop_data_100.html","id":"sees-pop-data-pk-","dir":"Reference","previous_headings":"","what":"sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_100","text":"pop_data object (as_pop_data()) 200 rows 8 columns: id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area age participant's age sampled, years antigen_iso antigen isotype measured (data long format) value concentration antigen isotype, ELISA units","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sees_pop_data_100.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_100","text":"https://osf.io/n6cp3","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sees_pop_data_pk_100.html","id":null,"dir":"Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"subset data SEES data, examples testing, data Pakistan .","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sees_pop_data_pk_100.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"","code":"sees_pop_data_pk_100"},{"path":[]},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sees_pop_data_pk_100.html","id":"sees-pop-data-pk-","dir":"Reference","previous_headings":"","what":"sees_pop_data_pk_100","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"pop_data object (as_pop_data()) 200 rows 8 columns: id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area age participant's age sampled, years antigen_iso antigen isotype measured (data long format) value concentration antigen isotype, ELISA units","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sees_pop_data_pk_100.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100","text":"https://osf.io/n6cp3","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sees_pop_data_pk_100_old_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"subset data SEES data, examples testing, data Pakistan , variable names normalized as_pop_data().","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sees_pop_data_pk_100_old_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"","code":"sees_pop_data_pk_100_old_names"},{"path":[]},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sees_pop_data_pk_100_old_names.html","id":"sees-pop-data-pk-old-names","dir":"Reference","previous_headings":"","what":"sees_pop_data_pk_100_old_names","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"pop_data object (as_pop_data()) 200 rows 8 columns: index_id Observation ID Country Country participant living cluster survey sampling cluster catchment survey catchment area Age participant's age sampled, years antigen_iso antigen isotype measured (data long format) result concentration antigen isotype, ELISA units","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sees_pop_data_pk_100_old_names.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Small example cross-sectional data set — sees_pop_data_pk_100_old_names","text":"https://osf.io/n6cp3","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/serocalculator-package.html","id":null,"dir":"Reference","previous_headings":"","what":"serocalculator: Estimating Infection Rates from Serological Data — serocalculator-package","title":"serocalculator: Estimating Infection Rates from Serological Data — serocalculator-package","text":"Translates antibody levels measured cross-sectional population samples estimates frequency seroconversions (infections) occur sampled populations. Replaces previous `seroincidence` package.","code":""},{"path":[]},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/serocalculator-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"serocalculator: Estimating Infection Rates from Serological Data — serocalculator-package","text":"Maintainer: Kristina Lai kwlai@ucdavis.edu Authors: Peter Teunis p.teunis@emory.edu (Author method original code.) [copyright holder] Chris Orwa Kristen Aiemjoy kaiemjoy@ucdavis.edu Douglas Ezra Morrison demorrison@ucdavis.edu","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/serocalculator_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to an example file — serocalculator_example","title":"Get path to an example file — serocalculator_example","text":"serocalculator package comes bundled number sample files inst/extdata directory. serocalculator_example() function make sample files easy access.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/serocalculator_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to an example file — serocalculator_example","text":"","code":"serocalculator_example(file = NULL)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/serocalculator_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path to an example file — serocalculator_example","text":"file Name file. NULL, example files listed.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/serocalculator_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get path to an example file — serocalculator_example","text":"character string providing path file specified file, vector available files file = NULL.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/serocalculator_example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get path to an example file — serocalculator_example","text":"Adapted readr::readr_example() following guidance https://r-pkgs.org/data.html#sec-data-example-path-helper.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/serocalculator_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to an example file — serocalculator_example","text":"","code":"serocalculator_example() #> [1] \"example_curve_params.csv\" \"example_curve_params.rds\" #> [3] \"example_noise_params.csv\" \"example_noise_params.rds\" #> [5] \"example_pop_data.csv\"     \"example_pop_data.rds\"     serocalculator_example(\"example_pop_data.csv\") #> /home/runner/work/_temp/Library/serocalculator/extdata/example_pop_data.csv"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sim.cs.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a cross-sectional serosurvey with noise — sim.cs","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"sim.cs() renamed sim_pop_data() create consistent API.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sim.cs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a cross-sectional serosurvey with noise — sim.cs","text":"","code":"sim.cs(...)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sim.cs.multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate multiple data sets — sim.cs.multi","title":"Simulate multiple data sets — sim.cs.multi","text":"sim.cs.multi() renamed sim_pop_data_multi() create consistent API.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sim.cs.multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate multiple data sets — sim.cs.multi","text":"","code":"sim.cs.multi(...)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sim_pop_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a cross-sectional serosurvey with noise — sim_pop_data","title":"Simulate a cross-sectional serosurvey with noise — sim_pop_data","text":"Makes cross-sectional data set (age, y(t) set) adds noise, desired.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sim_pop_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a cross-sectional serosurvey with noise — sim_pop_data","text":"","code":"sim_pop_data(   lambda = 0.1,   n_samples = 100,   age_range = c(0, 20),   age_fixed = NA,   antigen_isos = intersect(get_biomarker_levels(curve_params), rownames(noise_limits)),   n_mcmc_samples = 0,   renew_params = FALSE,   add_noise = FALSE,   curve_params,   noise_limits,   format = \"wide\",   verbose = FALSE,   ... )"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sim_pop_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a cross-sectional serosurvey with noise — sim_pop_data","text":"lambda numeric() scalar indicating incidence rate (events per person-years) n_samples number samples simulate age_range age range sampled individuals, years age_fixed specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n_mcmc_samples many MCMC samples use: n_mcmc_samples 1:4000 fixed posterior sample used n_mcmc_samples = 0, random sample chosen renew_params whether generate new parameter set infection renew_params = TRUE generates new parameter set infection renew_params = FALSE keeps one selected birth, updates baseline y0 add_noise logical() indicating whether add biological measurement noise curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) verbose logical: TRUE, print verbose log information console ... Arguments passed simcs.tinf","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sim_pop_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a cross-sectional serosurvey with noise — sim_pop_data","text":"tibble::tbl_df containing simulated cross-sectional serosurvey data, columns: age: age (days) one column element antigen_iso input argument","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sim_pop_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a cross-sectional serosurvey with noise — sim_pop_data","text":"","code":"# Load curve parameters dmcmc <- typhoid_curves_nostrat_100  # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  # Set seed to reproduce results set.seed(54321)  # Simulated incidence rate per person-year lambda <- 0.2 # Range covered in simulations lifespan <- c(0, 10) # Cross-sectional sample size nrep <- 100  # Biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) )  # Generate cross-sectional data csdata <- sim_pop_data(   curve_params = dmcmc,   lambda = lambda,   n_samples = nrep,   age_range = lifespan,   antigen_isos = antibodies,   n_mcmc_samples = 0,   renew_params = TRUE,   add_noise = TRUE,   noise_limits = dlims,   format = \"long\" )"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sim_pop_data_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate multiple data sets — sim_pop_data_multi","title":"Simulate multiple data sets — sim_pop_data_multi","text":"Simulate multiple data sets","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sim_pop_data_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate multiple data sets — sim_pop_data_multi","text":"","code":"sim_pop_data_multi(   nclus = 10,   lambdas = c(0.05, 0.1, 0.15, 0.2, 0.3),   num_cores = max(1, parallel::detectCores() - 1),   rng_seed = 1234,   verbose = FALSE,   ... )"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sim_pop_data_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate multiple data sets — sim_pop_data_multi","text":"nclus number clusters lambdas #incidence rate, events/person*year num_cores number cores use parallel computations rng_seed starting seed random number generator, passed rngtools::RNGseq() verbose whether report verbose information ... Arguments passed sim_pop_data lambda numeric() scalar indicating incidence rate (events per person-years) n_samples number samples simulate age_range age range sampled individuals, years age_fixed specify curve parameters use age (nothing present?) antigen_isos Character vector one antibody names. Values must match curve_params. n_mcmc_samples many MCMC samples use: n_mcmc_samples 1:4000 fixed posterior sample used n_mcmc_samples = 0, random sample chosen renew_params whether generate new parameter set infection renew_params = TRUE generates new parameter set infection renew_params = FALSE keeps one selected birth, updates baseline y0 add_noise logical() indicating whether add biological measurement noise noise_limits biologic noise distribution parameters format character() variable, containing either: \"long\" (one measurement per row) \"wide\" (one serum sample per row) curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sim_pop_data_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate multiple data sets — sim_pop_data_multi","text":"tibble::tibble()","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sim_pop_data_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate multiple data sets — sim_pop_data_multi","text":"","code":"# Load curve parameters dmcmc <- typhoid_curves_nostrat_100  # Specify the antibody-isotype responses to include in analyses antibodies <- c(\"HlyE_IgA\", \"HlyE_IgG\")  # Set seed to reproduce results set.seed(54321)  # Simulated incidence rate per person-year lambdas = c(.05, .1, .15, .2, .3)  # Range covered in simulations lifespan <- c(0, 10);  # Cross-sectional sample size nrep <- 100  # Biologic noise distribution dlims <- rbind(   \"HlyE_IgA\" = c(min = 0, max = 0.5),   \"HlyE_IgG\" = c(min = 0, max = 0.5) )  sim_pop_data_multi(   curve_params = dmcmc,   lambdas = lambdas,   n_samples = nrep,   age_range = lifespan,   antigen_isos = antibodies,   n_mcmc_samples = 0,   renew_params = TRUE,   add_noise = TRUE,   noise_limits = dlims,   format = \"long\",   nclus = 10) #> # A tibble: 10,000 × 6 #>      age id    antigen_iso value lambda.sim cluster #>    <dbl> <chr> <chr>       <dbl>      <dbl>   <int> #>  1  3.53 1     HlyE_IgA    0.757       0.05       1 #>  2  3.53 1     HlyE_IgG    0.520       0.05       1 #>  3  2.27 2     HlyE_IgA    0.819       0.05       1 #>  4  2.27 2     HlyE_IgG    0.707       0.05       1 #>  5  9.05 3     HlyE_IgA    0.150       0.05       1 #>  6  9.05 3     HlyE_IgG    0.506       0.05       1 #>  7  5.94 4     HlyE_IgA    0.837       0.05       1 #>  8  5.94 4     HlyE_IgG    0.870       0.05       1 #>  9  9.88 5     HlyE_IgA    0.297       0.05       1 #> 10  9.88 5     HlyE_IgG    0.272       0.05       1 #> # ℹ 9,990 more rows"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/simcs.tinf.html","id":null,"dir":"Reference","previous_headings":"","what":"collect cross-sectional data — simcs.tinf","title":"collect cross-sectional data — simcs.tinf","text":"collect cross-sectional data","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/simcs.tinf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"collect cross-sectional data — simcs.tinf","text":"","code":"simcs.tinf(   lambda,   n_samples,   age_range,   age_fixed = NA,   antigen_isos,   n_mcmc_samples = 0,   renew_params = FALSE,   ... )"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/simcs.tinf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"collect cross-sectional data — simcs.tinf","text":"lambda seroconversion rate (events/person-day) n_samples number samples n_samples (= nr simulated records) age_range age range use simulating data, days age_fixed age_fixed parameter sample (age_fixed = NA age infection) antigen_isos character vector one antibody names. Values must match curve_params. n_mcmc_samples n_mcmc_samples 1:4000, fixed posterior sample used n_mcmc_samples = 0 random sample chosen renew_params renew_params = TRUE generates new parameter set infection renew_params = FALSE keeps one selected birth, updates baseline y0 ... Arguments passed simresp.tinf predpar array() dimensions named: antigen_iso parameter obs","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/simcs.tinf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"collect cross-sectional data — simcs.tinf","text":"array() dimensions n_samples, length(antigen_isos) + 1, rows observations columns age biomarkers y(t)","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/simresp.tinf.html","id":null,"dir":"Reference","previous_headings":"","what":"simulate antibody kinetics of y over a time interval — simresp.tinf","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"simulate antibody kinetics y time interval","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/simresp.tinf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"","code":"simresp.tinf(   lambda,   t_end,   age_fixed,   antigen_isos,   n_mcmc_samples = 0,   renew_params,   predpar,   ... )"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/simresp.tinf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"lambda seroconversion rate (1/days), t_end end time interval (beginning time 0) days(?) age_fixed parameter estimates fixed age (age_fixed years) . age_fixed = NA age infection used. antigen_isos antigen isotypes n_mcmc_samples posterior sample may selected (1:4000), n_mcmc_samples = 0 posterior sample chosen random. renew_params infection, new parameter sample may generated (renew_params = TRUE). Otherwise (renew_params = FALSE), sample generated birth kept, baseline y0 carried prior infections. predpar array() dimensions named: antigen_iso parameter obs ... Arguments passed ldpar, ab, mk_baseline age age infection nmc mcmc sample use npar number parameters t numeric vector elapsed times since start infection par numeric matrix model parameters: rows parameters columns biomarkers kab integer indicating row read blims n number observations blims range possible baseline antibody levels","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/simresp.tinf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"simulate antibody kinetics of y over a time interval — simresp.tinf","text":"list : t = times (days, birth day 0), b = bacteria level, antibody signal (used; probably meaningless), y = antibody level, antibody signal smp = whether infection involves big jump small jump t.inf = times infections occurred.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/strata.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract strata from an object — strata","title":"Extract strata from an object — strata","text":"Generic method extracting strata objects. See strata.seroincidence.()","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/strata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract strata from an object — strata","text":"","code":"strata(x)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/strata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract strata from an object — strata","text":"x object","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/strata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract strata from an object — strata","text":"strata x","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/strata.seroincidence.by.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"Extract Strata attribute object, present","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/strata.seroincidence.by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' strata(x)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/strata.seroincidence.by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"x R object","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/strata.seroincidence.by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the Strata attribute from an object, if present — strata.seroincidence.by","text":"tibble::tibble() strata rows, NULL x \"strata\" attribute","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/stratify_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split data by stratum — stratify_data","title":"Split data by stratum — stratify_data","text":"Split biomarker data, decay curve parameters, noise parameters prepare stratified incidence estimation.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/stratify_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split data by stratum — stratify_data","text":"","code":"stratify_data(   data,   curve_params,   noise_params,   strata_varnames = \"\",   curve_strata_varnames = NULL,   noise_strata_varnames = NULL,   antigen_isos = data %>% get_biomarker_levels() )"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/stratify_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split data by stratum — stratify_data","text":"curve_params data.frame() containing MCMC samples parameters Bayesian posterior distribution longitudinal decay curve model. parameter columns must named: antigen_iso: character() vector indicating antigen-isotype combinations iter: integer() vector indicating MCMC sampling iterations y0: baseline antibody level $t=0$ ($y(t=0)$) y1: antibody peak level (ELISA units) t1: duration infection alpha: antibody decay rate (1/days current longitudinal parameter sets) r: shape factor antibody decay noise_params data.frame() (tibble::tibble()) containing following variables, specifying noise parameters antigen isotype: antigen_iso: antigen isotype whose noise parameters specified row nu: biological noise eps: measurement noise y.low: lower limit detection current antigen isotype y.high: upper limit detection current antigen isotype strata_varnames character() vector names variables data stratify curve_strata_varnames subset strata. Values must variable names curve_params. Default = \"\". noise_strata_varnames subset strata. Values must variable names noise_params. Default = \"\". antigen_isos Character vector one antibody names. Values must match pop_data","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/stratify_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split data by stratum — stratify_data","text":"\"biomarker_data_and_params.list\" object (list extra attributes \"strata\", \"antigen_isos\", etc)","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/stratify_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split data by stratum — stratify_data","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 %>%   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  stratified_data =   stratify_data(    data = xs_data,    curve_params = curve,    noise_params = noise,    strata_varnames = \"catchment\",    curve_strata_varnames = NULL,    noise_strata_varnames = NULL    ) } # }"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sub-.seroincidence.by.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"Extract replace parts seroincidence.object","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sub-.seroincidence.by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"","code":"# S3 method for class 'seroincidence.by' x[i, ...]"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sub-.seroincidence.by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"x object subset/replace elements indices subset/replace ... passed [.list","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/sub-.seroincidence.by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract or replace parts of a seroincidence.by object — [.seroincidence.by","text":"subset specified","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/summary.pop_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize cross-sectional antibody survey data — summary.pop_data","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary() method pop_data objects","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/summary.pop_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"# S3 method for class 'pop_data' summary(object, strata = NULL, ...)  # S3 method for class 'summary.pop_data' print(x, ...)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/summary.pop_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"object pop_data object (as_pop_data()) strata character() specifying grouping column(s) ... unused x object class \"summary.pop_data\"; usually, result call summary.pop_data()","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/summary.pop_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"summary.pop_data object, list containing two summary tables: age_summary summarizing age ab_summary summarizing value, stratified antigen_iso","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/summary.pop_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize cross-sectional antibody survey data — summary.pop_data","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100 summary(xs_data, strata = \"catchment\") #>  #> n = 200  #>  #> Distribution of age:  #>  #> # A tibble: 2 × 8 #>   catchment     n   min first_quartile median  mean third_quartile   max #>   <chr>     <int> <dbl>          <dbl>  <dbl> <dbl>          <dbl> <dbl> #> 1 kgh          94   2.3           6.85     11  11.6           15.9    24 #> 2 aku         106   2.3           6.6      12  11.8           16      23 #>  #> Distributions of antigen-isotype measurements: #>  #> # A tibble: 4 × 8 #>   antigen_iso catchment    Min `1st Qu.` Median `3rd Qu.`   Max `# NAs` #>   <fct>       <chr>      <dbl>     <dbl>  <dbl>     <dbl> <dbl>   <int> #> 1 HlyE_IgA    kgh       0          1.55    2.90      3.99  45.6       0 #> 2 HlyE_IgA    aku       0.0308     1.20    2.00      5.74  69.9       0 #> 3 HlyE_IgG    kgh       0.362      1.99    2.79      8.06  64.5       0 #> 4 HlyE_IgG    aku       0.217      0.983   2.12      5.78  33.6       0 #>"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/summary.seroincidence.by.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for ","title":"Summary Method for ","text":"Calculate seroincidence output seroincidence calculator est.incidence.().","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/summary.seroincidence.by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for ","text":"","code":"# S3 method for class 'seroincidence.by' summary(   object,   confidence_level = 0.95,   show_deviance = TRUE,   show_convergence = TRUE,   verbose = FALSE,   ... )"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/summary.seroincidence.by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for ","text":"object dataframe containing output function est.incidence.(). confidence_level desired confidence interval coverage probability show_deviance Logical flag (FALSE/TRUE) reporting deviance (-2*log(likelihood) estimated seroincidence. Default = TRUE. show_convergence Logical flag (FALSE/TRUE) reporting convergence (see help optim() details). Default = FALSE. verbose logical scalar indicating whether print verbose messages console ... Additional arguments affecting summary produced.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/summary.seroincidence.by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for ","text":"summary.seroincidence.object, tibble::tibble, following columns: incidence.rate maximum likelihood estimate lambda (seroincidence) CI.lwr lower confidence bound lambda CI.upr upper confidence bound lambda Deviance (included show_deviance = TRUE) Negative log likelihood (NLL) estimated (maximum likelihood) lambda) nlm.convergence.code (included show_convergence = TRUE) Convergence information returned stats::nlm() object also following metadata (accessible base::attr()): antigen_isos Character vector names input antigen isotypes used est.incidence.() Strata Character names strata used est.incidence.()","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/summary.seroincidence.by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Method for ","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 |>   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  # estimate seroincidence est2 <- est.incidence.by(   strata = c(\"catchment\"),   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"),   # num_cores = 8 # Allow for parallel processing to decrease run time ) #> Warning: curve_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Warning: noise_params is missing all strata variables, and will be used unstratified. #>  #> To avoid this warning, specify the desired set of stratifying variables in the `curve_strata_varnames` and `noise_strata_varnames` arguments to `est.incidence.by()`. #> Error in (function (pop_data, curve_params, noise_params, antigen_isos = pop_data$antigen_iso %>%     unique(), lambda_start = 0.1, stepmin = 1e-08, stepmax = 3,     verbose = FALSE, build_graph = FALSE, print_graph = build_graph &         verbose, ...) {    if (verbose > 1) {        message(\"inputs to `est.incidence()`:\")        print(environment() %>% as.list())    }    .errorCheck(data = pop_data, antigen_isos = antigen_isos,         curve_params = curve_params)    pop_data <- pop_data %>% dplyr::filter(.data$antigen_iso %in%         antigen_isos) %>% dplyr::select(pop_data %>% get_value_var(),         pop_data %>% get_age_var(), \"antigen_iso\") %>% filter(if_all(everything(),         ~!is.na(.x)))    curve_params <- curve_params %>% ungroup() %>% dplyr::mutate(alpha = .data$alpha *         365.25, d = .data$r - 1) %>% dplyr::filter(.data$antigen_iso %in%         antigen_isos) %>% dplyr::select(\"y1\", \"alpha\", \"d\", \"antigen_iso\") %>%         droplevels()    noise_params <- noise_params %>% dplyr::filter(.data$antigen_iso %in%         antigen_isos) %>% droplevels()    if (nrow(pop_data) == 0) {        stop(\"No data provided.\")    }    if (verbose) {        message(\"nrow(curve_params) = \", nrow(curve_params))    }    if (nrow(noise_params) != length(antigen_isos)) {        stop(\"too many rows of noise parameters.\")    }    pop_data <- pop_data %>% split(~antigen_iso)    curve_params <- curve_params %>% split(~antigen_iso)    noise_params <- noise_params %>% split(~antigen_iso)    res <- .nll(pop_data = pop_data, log.lambda = log(lambda_start),         antigen_isos = antigen_isos, curve_params = curve_params,         noise_params = noise_params, verbose = verbose, ...)    if (is.na(res)) {        warning(\"Could not calculate the log-likelihood with starting parameter value.\")        return(NULL)    }    if (verbose) {        message(\"Initial negative log-likelihood: \", res)    }    if (build_graph) {        if (verbose)             message(\"building likelihood graph\")        graph <- graph_loglik(highlight_points = lambda_start,             highlight_point_names = \"lambda_start\", pop_data = pop_data,             antigen_isos = antigen_isos, curve_params = curve_params,             noise_params = noise_params)        if (print_graph) {            print(graph + ggplot2::scale_x_log10(labels = scales::label_comma()))        }    }    else {        graph <- NULL    }    if (verbose)         message(\"about to call `nlm()`\")    time <- {        fit <- nlm(f = .nll, p = log(lambda_start), pop_data = pop_data,             antigen_isos = antigen_isos, curve_params = curve_params,             noise_params = noise_params, hessian = TRUE, stepmax = stepmax,             steptol = stepmin, verbose = verbose, print.level = ifelse(verbose,                 2, 0), ...)    } %>% system.time()    code_text <- nlm_exit_codes[fit$code]    message1 <- \"\\n`nlm()` completed with the following convergence code:\\n\"    if (fit$code %in% 3:5) {        warning(\"`nlm()` may not have reached the maximum likelihood estimate.\",             message1, code_text)    }    if (verbose) {        message(\"\\nElapsed time: \")        print(time)    }    if (build_graph) {        graph <- graph %>% add_point_to_graph(fit = fit, pop_data = pop_data,             antigen_isos = antigen_isos, curve_params = curve_params,             noise_params = noise_params)        if (print_graph) {            print(graph + ggplot2::scale_x_log10(labels = scales::label_comma()))        }    }    fit <- fit %>% structure(class = union(\"seroincidence\", class(fit)),         lambda_start = lambda_start, antigen_isos = antigen_isos,         ll_graph = graph)    return(fit)})(pop_data = structure(list(value = c(5.686082087, 1.228468773, 1.08478637, 1.429250766, 3.061925394, 3.10341076, 0.030783008, 6.39056873, 0.240410018, 3.454038997, 0.583069732, 1.203041652, 14.45068664, 13.67451493, 9.75485189, 1.854591567, 13.47695391, 3.915196534, 0.581800446, 0.464968826, 0.804765886, 0.170707915, 1.37100964, 3.117010281, 0.631406531, 0.457043221, 2.425332461, 1.706190158, 3.637831218, 69.89535911, 2.34926128, 2.421981965, 5.959094924, 1.208630376, 21.66881837, 1.980702589, 6.947747503, 0.326101424, 1.746848591, 5.743808809, 66.36882517, 8.592622525, 9.559545113, 1.463210702, 1.675724638, 2.001794061, 1.963263676, 0.144000922, 2.640976902, 2.639804308, 14.97160989, 0.581763723, 1.597643699, 4.211346348, 3.001945296, 0.216909126, 0.956437161, 9.571740156, 1.354560173, 1.019806649, 33.61421131, 0.234319736, 1.969896519, 1.97546336, 0.369090624, 3.81341291, 6.564569311, 7.044133815, 2.419830229, 5.613969982, 0.677328316, 0.430965682, 0.982963924, 0.3471668, 0.678930651, 1.373231907, 1.358157942, 1.607816553, 0.661695355, 3.73191269, 2.028698664, 3.084281709, 16.42857143, 4.100071759, 19.97064837, 8.296130952, 14.04425829, 6.958705357, 3.523065476, 9.819568452, 0.252788832, 0.875601873, 1.08911496, 6.30952381, 5.780099594, 5.30809886, 1.083906829, 0.807305453, 13.32860629, 0.53330289, 1.402155499, 6.947698519, 4.527529762, 1.970971466, 4.871499117, 2.123841957), age = c(18, 7.3, 2.6, 3.9, 13, 14.4, 3.4, 22, 4, 14.8, 15.1, 13, 15.6, 18, 18.7, 7.5, 23, 4, 2.3, 9.8, 21, 14.7, 4, 18.1, 11.2, 3.8, 11.5, 17.2, 17, 12, 11, 16, 5, 12, 20, 14, 7.3, 2.5, 10.5, 4.4, 11.2, 13.4, 14, 14.6, 19.2, 10, 5, 4.9, 9.2, 15.8, 18, 21, 6.6, 18, 7.3, 2.6, 3.9, 13, 14.4, 3.4, 22, 4, 14.8, 15.1, 13, 15.6, 18, 18.7, 7.5, 23, 4, 2.3, 9.8, 21, 14.7, 4, 18.1, 11.2, 3.8, 11.5, 17.2, 17, 12, 11, 16, 5, 12, 20, 14, 7.3, 2.5, 10.5, 4.4, 11.2, 13.4, 14, 14.6, 19.2, 10, 5, 4.9, 9.2, 15.8, 18, 21, 6.6), antigen_iso = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), levels = c(\"HlyE_IgA\", \"HlyE_IgG\"), class = \"factor\")), row.names = c(NA, -106L), class = c(\"pop_data\", \"tbl_df\", \"tbl\", \"data.frame\"), antigen_isos = structure(1:2, levels = c(\"HlyE_IgA\", \"HlyE_IgG\"), class = \"factor\"), age_var = \"age\", value_var = \"value\", id_var = \"id\", biomarker_var = \"antigen_iso\"),     antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\"), curve_params = structure(list(        y1 = c(63.4814181747235, 163.892554798255, 288.162064918977,         153.628916105779, 431.819308863086, 143.455366610532,         30.5523468510691, 53.3082414171847, 160.248521898273,         557.057672849571, 524.750289905931, 957.183975655821,         30.7757024960889, 696.885680249965, 41.3351250925557,         49.696304772494, 248.45349985843, 284.238616409023, 319.258088721929,         55.1973083368717, 9.85590602194967, 142.48248989252,         58.569079122574, 125.103468262329, 23.5781354491369,         154.134822731266, 195.272088240338, 512.685734719332,         15.2392432670215, 367.675521980743, 138.597844051858,         94.054499427184, 17.7002608315275, 420.52048494015, 34.6297552188594,         117.116522186164, 670.782356315421, 139.74457140291,         350.389335470867, 280.773133101888, 524.805205039604,         341.875466132432, 21.7419806650667, 807.973583062943,         54.648570130211, 161.138851467563, 62.4626331974805,         345.012549159694, 13.5263909774471, 287.580231401241,         404.641741222692, 329.62595529365, 127.460080376226,         119.698649885564, 47.6743496395363, 53.3427557637164,         4.86255586452024, 93.6129541009416, 217.262169334863,         55.1129621346739, 35.0985002310083, 118.566555662152,         1098.49716393263, 54.1079875304336, 58.9629133595119,         135.952389154747, 42.1086528807225, 260.595389430244,         34.7560167599678, 257.405675946662, 179.060328314574,         153.694462686078, 24.6668810561169, 49.4445183661751,         574.894674464689, 105.684016008491, 16.5510503302757,         60.2041812390575, 11.0453659443594, 462.717062144179,         329.450591149241, 382.551153691391, 134.232955969569,         239.461396134792, 14.3719137242382, 264.590126446701,         40.6802550135182, 57.5144029967135, 88.2747290650814,         430.319125620458, 10.6130205814949, 558.11559324373,         32.0135413405647, 24.0384935132398, 38.0504292985456,         77.8837709668701, 126.820466076145, 159.918844849729,         69.8997358428869, 262.882882182499, 354.532775056227,         412.676482549134, 114.923006872123, 120.873465623906,         132.600241082824, 103.468186139286, 447.006072553703,         1085.2206115645, 33.5210558211561, 253.133868952307,         130.757054116255, 66.9218148382036, 374.582473744296,         139.536904862498, 39.3988388717891, 96.9165448765317,         179.919538402879, 1493.88241008644, 14.8008942224083,         404.839466898054, 532.707197471499, 46.4587352210946,         24.4858328538187, 49.4642193897299, 95.0227133002871,         93.9690584818973, 260.176071822173, 141.989238850102,         39.9773724835592, 782.954380644115, 29.4107109741128,         516.645589158684, 211.572242009836, 1822.2130872245,         52.509809995604, 13.151025358795, 19.3857150727236, 35.2409166828083,         80.9687188700813, 177.173315875654, 26.3645555024978,         117.225011423899, 87.0261479522951, 126.950596752532,         27.2083356730063, 83.8209553654887, 65.4624630013765,         60.5914219180724, 50.5312183443017, 220.403393063456,         57.8814946339193, 321.339218295469, 112.331004619454,         214.114844173551, 46.2663050252167, 253.087688470067,         75.8950087172145, 364.707374884755, 21.9277543373803,         342.0606126627, 72.882860491943, 41.3783165219195, 44.191172297619,         74.7393669070667, 50.8282443896275, 265.44382427441,         228.249964982196, 150.22058930907, 137.733518575792,         282.081550999412, 225.506262502798, 31.1882936999509,         163.565411792614, 182.312164883095, 468.092763349791,         26.948324983628, 47.0627893374153, 265.595229664979,         11.1704463639473, 172.041567739628, 161.068053764295,         432.516403298317, 89.2366348763595, 93.0637657208957,         867.380852022527, 402.754319315464, 17.8792209899537,         288.905665377172, 21.9097654634741, 48.8445971425635,         21.8483966121941, 183.574641774107, 42.8450651248465,         392.445793775464, 11.3934815053904, 323.545778561326,         120.315053250724, 164.404167510907, 249.551023456624,         41.4554723971584), alpha = c(0.000580750108201723, 0.00457307241085562,         0.000459482362967931, 0.000920576917699969, 0.000277272439231206,         0.00293646148218711, 0.00126803096870046, 0.000185056384174521,         0.00139768218010029, 0.000505440617097379, 0.0002940737416904,         0.000654669519525582, 0.00459319232964828, 0.000887688202447749,         0.00233809215626583, 0.000209870475682425, 4.67002985675705e-05,         0.00104003594908331, 0.000448299061620713, 0.000207443820402452,         0.00184390439817354, 0.000541774876402651, 0.000165952326601835,         0.00322191298857545, 0.000801608679478142, 0.00117192216751816,         0.00212248013302342, 0.000976984276211827, 0.00206185338337752,         0.000384579510907555, 0.000520896079311473, 0.0010065164190521,         0.00110520990806848, 0.000183194889839954, 0.000503901371757611,         0.000228263475932955, 0.00194228531845488, 0.000171501250472504,         0.000369695819464055, 0.00104853639157351, 0.000697205747962488,         0.000311385146127225, 0.000354295233312761, 0.00124573445413704,         0.000423939415887257, 0.000801256049243512, 0.00120645375923901,         0.00237756125361664, 0.00123608024365872, 0.000358006290675028,         0.000494140830213741, 0.000156002269928014, 0.00245664175975264,         0.000841503824065256, 0.00193807512902148, 0.000497129501207083,         0.0054332923652717, 0.00127310051929336, 0.000551300789665394,         0.00063403271748031, 0.00174555975196488, 0.000377066120482253,         0.000483383608036441, 0.000338217966168421, 0.00219483150170641,         0.00140321394275048, 0.00108547239461618, 0.00102792815759423,         0.00349137373455354, 0.000352559907428524, 0.00162066292577739,         0.00279808506815644, 0.0019601191828733, 0.000330547561933239,         0.000355786402556068, 0.000438855656341692, 0.00124273584887326,         0.000552763674223956, 0.00186976972015624, 0.000333069293847281,         0.00110379614438794, 0.00146362360047569, 0.000139360006251701,         0.000397180389049223, 0.00114211896576467, 0.00100256857212561,         0.00109121884614163, 0.00126819582344172, 0.000987731162476162,         0.00128987495424607, 0.00282261928684757, 0.000374791757339121,         0.00113865219626825, 0.000532967559301844, 0.000513638935226,         0.000359459156219103, 0.000275859190991226, 0.000354699360187289,         0.0026713535164984, 0.00279347203459326, 0.000128197309556073,         0.00596927380308968, 0.00705294513320615, 0.00202300752718538,         0.00162192753599336, 0.00037424870310045, 0.00026754841964219,         0.000730493664235532, 0.00153178738489586, 0.00325308988648181,         0.000483857556168969, 0.000588331496127102, 0.000298345006855044,         0.00112620692068216, 0.00168651670227233, 0.000204975520121039,         0.00193362267850561, 0.00142648771405165, 0.00134562054578092,         0.000208857156789975, 0.00062536817604273, 0.00133456484375557,         0.00938643234422778, 0.000937138007517452, 0.000608514388479188,         0.00264210323257104, 0.00039208182606313, 0.0033181097851919,         0.00185906798532453, 0.000907043634868749, 0.00115294008901915,         0.000245596650454221, 0.00108389960019551, 0.00201213285019601,         0.00190943097530246, 0.000408867260930471, 0.000791381820969645,         0.00201466973548936, 0.00171498662024685, 0.00140127884303538,         0.00100416392412402, 0.000519205915058319, 0.00167112203653147,         0.000838815315735768, 0.000721650217325436, 0.000505339539082098,         0.000909450488173269, 0.00121178596919844, 0.000826864269791345,         0.00292640667315851, 0.000304137699570372, 0.00113983701054901,         0.000389736378485822, 0.00298474787407907, 0.000841259823338093,         0.00368059814723494, 0.000421837664169578, 0.00123986844219214,         0.000760625071667979, 0.00148555030442975, 0.000832930793734274,         0.000300251530379406, 0.00191957782487084, 0.000394689964996692,         0.00267988874066063, 0.00153195589077585, 0.00122125043306422,         0.000373008257684936, 0.00134318717545753, 0.00069797309624943,         0.000766596477494754, 0.000245039778346658, 0.000872995636865741,         0.00712119308128448, 4.98002775826703e-05, 0.000948299668165794,         0.000521991110458308, 0.00125413398046824, 0.000780668464134002,         0.002049580788824, 5.11867422438249e-05, 0.00561075492929095,         0.000808839543407316, 0.000713355973905716, 0.00085947398602869,         0.0021832078345804, 0.00180421443138756, 0.00058909093348889,         0.000599760589426105, 0.00135466647345608, 0.00143236264326595,         0.000494961785196012, 0.000608033851949211, 0.00451563256019836,         0.00337223348145991, 0.000362658114803346, 8.99092256955004e-05,         0.000361336825504191, 0.000266811004105529, 0.00308982754595651        ), r = c(1.74503804112011, 1.17416885836092, 2.66300631906146,         1.297476514491, 1.61055432802302, 1.13118326027234, 1.87013752944932,         2.12891387733085, 1.3974520424861, 1.97493702481855,         2.26045907519679, 1.73951774586965, 1.54839140734894,         1.28946525686499, 1.47712107228344, 1.60869619166956,         8.49637822070033, 1.22786543992899, 1.74930137992105,         2.09051460553557, 1.25152824238038, 1.6479440039637,         1.87839842610789, 1.1688001176233, 1.27395812849041,         1.42241923931779, 1.60775344339114, 1.22367302575217,         1.13545307616552, 1.4528247924265, 1.83738947009373,         1.38484985799107, 1.33445598250036, 2.21809845578665,         2.87854398365401, 2.95589130494591, 1.37775176705415,         1.78770312896554, 3.42523396464135, 1.21637549019504,         1.48417977755664, 2.43501743648731, 1.36792322142982,         1.47888442241868, 1.51608025120621, 1.19711459871732,         2.80191321923623, 1.11128063778834, 1.29719404599601,         1.56958115730821, 1.40645421035182, 2.02055071677547,         1.58553635830427, 1.31900452223899, 1.22922069635161,         1.65815487698244, 1.55892554941562, 1.26151595080374,         1.37707355668328, 1.74441842726501, 1.20180972115458,         1.44365502023906, 2.38510091527588, 1.88284644056197,         1.60597957384943, 1.34867326455727, 1.62070645876627,         1.31154857933272, 2.12645665211127, 1.65075568439601,         1.48036454239674, 1.19982166204518, 2.00237147751504,         1.70487485680804, 1.8706623806063, 1.67166807264746,         1.92194113718141, 1.61005143847568, 1.35004974710959,         2.25841123408653, 1.43335501102913, 1.55790365098244,         4.72154907642204, 2.58282464355033, 1.4444685411938,         1.1934183150664, 2.03619132144836, 1.50070658907823,         1.70535433471468, 1.30762000737011, 1.35345821652327,         2.11594435320902, 1.93343793924938, 1.40636886392934,         1.64717599789262, 3.07065710721104, 1.64913472189956,         1.56811466820133, 1.3743054888023, 1.32153142343595,         1.75972177367333, 1.0321394831503, 1.19619621962556,         1.12522664793909, 2.54761339632466, 1.65664548682786,         1.84384875557502, 1.37448370062602, 1.3397178020426,         1.10640954472882, 2.19064717043815, 1.57332473216103,         1.69127262231831, 1.27894797055983, 1.43991225166163,         3.51828219391506, 1.46683565487797, 1.34968938149023,         1.47588549995483, 1.77726961029852, 1.98675568807676,         1.24408225496149, 1.17673214459276, 1.24982115428208,         1.93255112801193, 1.27076878883401, 2.15156743349361,         1.09741062383505, 1.56474555183983, 1.26556384404366,         1.49417874265552, 1.86821491243254, 1.6685112860065,         1.13876686280646, 3.89157113577646, 2.26881576887324,         1.98350653159569, 1.11306753318267, 1.30383514829675,         1.12087842385809, 1.33146601283398, 1.93446154806597,         1.37443801640134, 1.5782031508516, 2.36840523534241,         1.90640359775196, 1.71299918615934, 1.43614740844928,         2.37312340146821, 1.16058369630921, 1.93968496829668,         1.20625335236676, 1.24209864788451, 1.11020753598308,         1.2758632519492, 1.15080012417002, 2.14686026015812,         1.27879180342719, 2.22148215191972, 1.28974327693987,         1.42731834708861, 2.32334947011738, 1.61955363733894,         1.47492898090976, 1.5350794705679, 1.2441188700458, 1.23133925719503,         1.99038276427008, 1.51776282933421, 1.31925025031428,         1.61304802616839, 1.31460732660273, 1.42961019701532,         1.03565806252171, 4.80132617777742, 1.38736960114353,         1.55863107325236, 1.52666057929324, 2.28991200129968,         1.15325838364272, 6.2383156195126, 1.09899855746642,         1.65867700079462, 1.5005684131288, 1.95624425662808,         1.15457745212576, 1.46923995980707, 1.39171137447131,         1.65402676714906, 1.26867038104759, 2.67952161518617,         1.98222310689708, 2.32213915915393, 1.09182873618516,         2.14613567346721, 1.79173305163522, 2.56558099827198,         1.82633749444038, 2.24145862650252, 1.14228545396753),         antigen_iso = structure(clevels = c(\"HlyE_IgA\",         \"HlyE_IgG\", \"LPS_IgA\", \"LPS_IgG\", \"Vi_IgG\"), class = \"factor\")), row.names = c(NA,     -200L), class = c(\"curve_params\", \"tbl_df\", \"tbl\", \"data.frame\"    ), antigen_isos = structure(1:5, levels = c(\"HlyE_IgA\", \"HlyE_IgG\",     \"LPS_IgA\", \"LPS_IgG\", \"Vi_IgG\"), class = \"factor\"), biomarker_var = \"antigen_iso\"),     noise_params = structure(list(nu = c(2.59560775795, 2.3600514143    ), eps = c(0.2793208827, 0.1456403573), y.low = c(0.508452309,     1.594575648), y.high = c(5e+06, 5e+06), antigen_iso = c(\"HlyE_IgA\",     \"HlyE_IgG\")), row.names = c(NA, -2L), class = c(\"noise_params\",     \"tbl_df\", \"tbl\", \"data.frame\"), antigen_isos = c(\"HlyE_IgA\",     \"HlyE_IgG\", \"LPS_IgA\", \"LPS_IgG\")), lambda_start = 0.1, antigen_isos = c(\"HlyE_IgG\",     \"HlyE_IgA\"), build_graph = FALSE, print_graph = FALSE, verbose = FALSE): formal argument \"antigen_isos\" matched by multiple actual arguments #> Timing stopped at: 0.002 0 0.002  # calculate summary statistics for the seroincidence object summary(est2) #> Error: object 'est2' not found"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/summary.seroincidence.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizing fitted seroincidence models — summary.seroincidence","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"function summary() method seroincidence objects.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/summary.seroincidence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"# S3 method for class 'seroincidence' summary(object, coverage = 0.95, verbose = TRUE, ...)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/summary.seroincidence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"object list(), outputted stats::nlm() est.incidence() coverage desired confidence interval coverage probability verbose whether produce verbose messaging ... unused","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/summary.seroincidence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"tibble::tibble() containing following: est.start: starting guess incidence rate ageCat: age category analyzing incidence.rate: estimated incidence rate, per person year CI.lwr: lower limit confidence interval incidence rate CI.upr: upper limit confidence interval incidence rate coverage: coverage probability log.lik: log-likelihood data used call est.incidence(), evaluated maximum-likelihood estimate lambda (.e., incidence.rate) iterations: number iterations used antigen_isos: list antigen isotypes used analysis nlm.convergence.code: information convergence likelihood maximization procedure performed nlm() (see \"Value\" section stats::nlm(), component code); codes 3-5 indicate issues: 1: relative gradient close zero, current iterate probably solution. 2: successive iterates within tolerance, current iterate probably solution. 3: Last global step failed locate point lower x. Either x approximate local minimum function, function non-linear algorithm, stepmin est.incidence() (.k.., steptol stats::nlm()) large. 4: iteration limit exceeded; increase iterlim. 5: maximum step size stepmax exceeded five consecutive times. Either function unbounded , becomes asymptotic finite value direction, stepmax small.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/summary.seroincidence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarizing fitted seroincidence models — summary.seroincidence","text":"","code":"library(dplyr)  xs_data <-   sees_pop_data_pk_100  curve <-   typhoid_curves_nostrat_100 |>   filter(antigen_iso %in% c(\"HlyE_IgA\", \"HlyE_IgG\"))  noise <-   example_noise_params_pk  est1 <- est.incidence(   pop_data = xs_data,   curve_params = curve,   noise_params = noise,   antigen_isos = c(\"HlyE_IgG\", \"HlyE_IgA\") )  summary(est1) #> # A tibble: 1 × 10 #>   est.start incidence.rate     SE CI.lwr CI.upr coverage log.lik iterations #>       <dbl>          <dbl>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>      <int> #> 1       0.1          0.166 0.0178  0.135  0.205     0.95   -524.          5 #> # ℹ 2 more variables: antigen.isos <chr>, nlm.convergence.code <ord>"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/typhoid_curves_nostrat_100.html","id":null,"dir":"Reference","previous_headings":"","what":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"subset data SEES study, examples testing.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/typhoid_curves_nostrat_100.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"","code":"typhoid_curves_nostrat_100"},{"path":[]},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/typhoid_curves_nostrat_100.html","id":"typhoid-curves-nostrat-","dir":"Reference","previous_headings":"","what":"typhoid_curves_nostrat_100","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"curve_params object (as_curve_params()) 500 rows 7 columns: antigen_iso antigen isotype measured (data long format) iter MCMC iteration y0 Antibody concentration t = 0 (start active infection) y1 Antibody concentration t = t1 (end active infection) t1 Duration active infection alpha Antibody decay rate coefficient r Antibody decay rate exponent parameter","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/typhoid_curves_nostrat_100.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Small example of antibody response curve parameters for typhoid — typhoid_curves_nostrat_100","text":"https://osf.io/rtw5k","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/warn.missing.strata.html","id":null,"dir":"Reference","previous_headings":"","what":"Warn about missing stratifying variables in a dataset — warn.missing.strata","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"Warn missing stratifying variables dataset","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/warn.missing.strata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"warn.missing.strata(data, strata, dataname)"},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/warn.missing.strata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"data dataset contain strata strata data.frame() showing strata levels expected dataset dataname name dataset, use warning messages strata missing.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/warn.missing.strata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"character() vector subset stratifying variables present pop_data","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/reference/warn.missing.strata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Warn about missing stratifying variables in a dataset — warn.missing.strata","text":"","code":"if (FALSE) { # \\dontrun{ expected_strata <- data.frame(Species = \"banana\", type = \"orchid\")  warn.missing.strata(iris, expected_strata, dataname = \"iris\") } # }"},{"path":[]},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/news/index.html","id":"new-features-development-version","dir":"Changelog","previous_headings":"","what":"New features","title":"serocalculator (development version)","text":"Split dev release websites : release: https://ucd-serg.github.io/serocalculator/ dev: https://ucd-serg.github.io/serocalculator/dev/ Fixed citations methodology.qmd article (#360) Added outline pkgdown website (#353) Added verbose option summary.seroincidence() summary.seroincidence.() (#348) Extended simulate_xsectionalData.Rmd article explore renew_params = TRUE vs renew_params = FALSE (#348) Renamed variables consistency (#281): sim.cs() -> sim_pop_data() sim.cs.multi() -> sim_pop_data_multi()","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/news/index.html","id":"internal-changes-development-version","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"serocalculator (development version)","text":"switched pkgdown GHA ::pkgdown r-lib/pkgdown (.e., dev version) (#359) added test summary.seroincidence.() (#352) Started checking use base pipe instead magrittr pipe linter (#347) Removed ldpar() API (#345) Added test sim.cs() (#344) Added test internal function ab() (#342) Reverted name change ldpar()-> row_longitudinal_parameter() (#343)","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/news/index.html","id":"serocalculator-130","dir":"Changelog","previous_headings":"","what":"serocalculator 1.3.0","title":"serocalculator 1.3.0","text":"CRAN release: 2025-01-25","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/news/index.html","id":"new-features-1-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"serocalculator 1.3.0","text":"Removed function ‘get_additional_data()’ (#332) Updated documentation examples include csv files (#328) Added csv files use documentation examples (#329) Added serocalculator_example() function help locate example data files (#329) Fixed bug computing antibody response curve r=1r=1 (#323) Added example datasets documentation examples testing (#314) Improved error messaging autoplot.pop_data() (#234). Clarified package installation instructions scrub typhus vignette (#234). Add as_noise_params (#228) Updated simulate_xsectionalData.Rmd (linting, removing deprecated functions) (#289) Added default value antigen_isos argument log_likelihood() (#286) Updated enteric fever example article upgraded code visualizations (#290) Added Methodology vignette (#284, #302, #303) Added template reporting Issues (usethis::use_tidy_issue_template()) (#270) Added template pull requests (https://github.com/bcgov/ssdtools) (#265)","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/news/index.html","id":"internal-changes-1-3-0","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"serocalculator 1.3.0","text":"Updated documentation align previous CRAN feedback (#328) Updated tests use internal testing datasets instead external links (#328) Updated test-coverage.yml GHA action current r-lib standard (#330) Change default pipe setting (#312) Add test missing strata est.incidence.(#227) Added snapshot_value test est.incidence() (#315) Sped lint-changed-files GitHub Action (#317) Added online preview builds PRs change pkgdown website (#309) Added test-autoplot.pop_data test (#234) initialized lintr lintr::use_lint() (#278) created unit test df_to_array() (#276) fixed dplyr::select() deprecation warning df_to_array() (#276) Added devtag package (using devtag::use_devtag()) (#292) Added @dev tag ?df_to_array() (#292) Generalized get_() set_() methods general-purpose (S3 class-specific methods needed yet) (#274). Updated GitHub Action files reformatted DESCRIPTION (#268) Added .gitattributes file (https://git-scm.com/docs/gitattributes) copied https://github.com/tidyverse/ggplot2 Added QR code README.qmd Added additional automated checks GitHub actions, including: check README.qmd still compiles (advice preventive-r-package-care) (#259) check NEWS.md updated change log (#257) lint changed files (#256)","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/news/index.html","id":"serocalculator-120","dir":"Changelog","previous_headings":"","what":"serocalculator 1.2.0","title":"serocalculator 1.2.0","text":"Added test-summary.pop_data test Modified test-est.incidence test Added stratification summary.pop_data Added verbose option check_pop_data(), changing default behavior avoid printing OK message.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/news/index.html","id":"serocalculator-110","dir":"Changelog","previous_headings":"","what":"serocalculator 1.1.0","title":"serocalculator 1.1.0","text":"Renamed llik() log_likelihood() Renamed fdev() f_dev() Renamed df..array() df_to_array() Renamed getAdditionalData() get_additional_data() Removed clean_pop_data() function Remove clean_pop_data() dependency functions documentation examples Added age, value, id standardize arguments load_pop_data() Added following methods pop_data class: set_age() set_value() set_id() get_age() get_value() get_id() get_age_var() get_value_var() get_id_var() Added additional warnings load_pop_data() Added scales::pseudo_log_trans() autoplot.pop_data() avoid log 0 Added test-est.incidence-status.R test check output standardize option FALSE load_pop_data() Replaced column name comparison check_pop_data() use attribute name pop_data class","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/news/index.html","id":"serocalculator-101","dir":"Changelog","previous_headings":"","what":"serocalculator 1.0.1","title":"serocalculator 1.0.1","text":"added n_points argument plot_curve_params_one_ab() Added type = \"age-scatter\" option autoplot.pop_data()","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/news/index.html","id":"serocalculator-1-0-1","dir":"Changelog","previous_headings":"","what":"serocalculator 1.0.0","title":"serocalculator 1.0.1","text":"Moved underlying methods serocalculator vignette","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/news/index.html","id":"serocalculator-1-0-1-1","dir":"Changelog","previous_headings":"","what":"serocalculator 0.5.0","title":"serocalculator 1.0.1","text":"Spell-checking function documentation tutorial articles. Added functions methods: load_pop_data() check_pop_data() summary.pop_data() autoplot.pop_data() load_curve_params() Renamed graph.decay.curves.() autoplot.curve_params()","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/news/index.html","id":"serocalculator-1-0-1-2","dir":"Changelog","previous_headings":"","what":"serocalculator 0.4.0","title":"serocalculator 1.0.1","text":"plot() methods renamed autoplot(), matching general convention ggplot2-based graphics. added visualization curve parameters sim.cs() now format argument specify long wide format output.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/news/index.html","id":"serocalculator-1-0-1-3","dir":"Changelog","previous_headings":"serocalculator 0.4.0","what":"serocalculator 0.3.2","title":"serocalculator 1.0.1","text":"Fixed bug passing antigen_isos est.incidence.() est.incidence().","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/news/index.html","id":"serocalculator-1-0-1-4","dir":"Changelog","previous_headings":"serocalculator 0.4.0","what":"serocalculator 0.3.1","title":"serocalculator 1.0.1","text":"Rolled back required R version 4.2 4.1","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/news/index.html","id":"serocalculator-1-0-1-5","dir":"Changelog","previous_headings":"","what":"serocalculator 0.3.0","title":"serocalculator 1.0.1","text":"Fixed stability documentation-clarity issues initial tester feedback.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/news/index.html","id":"serocalculator-never-formally-incremented-in-description-1-0-1","dir":"Changelog","previous_headings":"","what":"serocalculator 0.2.0 (never formally incremented in DESCRIPTION)","title":"serocalculator 1.0.1","text":"Added new vignettes.","code":""},{"path":"https:/ucd-serg.github.io/serocalculator/preview/pr168/news/index.html","id":"serocalculator-1-0-1-6","dir":"Changelog","previous_headings":"","what":"serocalculator 0.1.0","title":"serocalculator 1.0.1","text":"Forking seroincidence package adding Teunis et al 2020 approach.","code":""}]
