---
title: "Generate a simulated cross-sectional sample and estimate seroincidence"
subtitle: "Simulation of Enteric Fever using HlyE IgG and/or HlyE IgA"
description: "A demonstration of the accuracy of the estimation approach"
bibliography: ../references.bib
---


This vignette shows how to simulate a cross-sectional sample of 
seroresponses for incident infections as a Poisson process with 
frequency `lambda`. 
Responses are generated for the antibodies given in the `antigen_isos` 
argument.

Age range of the simulated cross-sectional record is `lifespan`.

The size of the sample is `nrep`.

Each individual is simulated separately, but different antibodies are
modelled jointly.

Longitudinal parameters are calculated for an age: `age_fixed` (fixed age).
However, when `age_fixed` is set to NA then the age at infection is used.

The boolean `renew_params` determines whether each infection uses a
new set of longitudinal parameters, sampled at random from the
posterior predictive output of  the longitudinal model. 
If set to `FALSE`,
a parameter set is chosen at birth and kept, but:

1. the baseline antibody levels (`y0`) are updated with the simulated level
(just) prior to infection, and

2. when `age_fixed = NA`, 
the selected parameter sample is updated for the
age when infection occurs.

For our initial simulations, we will set `renew_params = FALSE`:

```{r}
renew_params <- FALSE
```


There is also a variable `n_mcmc_samples`: 
when `n_mcmc_samples==0` then a random MC
sample is chosen out of the posterior set (1:4000). 
When `n_mcmc_samples` is
given a value in 1:4000, 
the chosen number is fixed and reused
in any subsequent infection. 
This is for diagnostic purposes.


```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.width = 7,
  fig.height = 5
)
```

# Simulate a single dataset

## load model parameters

Here we load in longitudinal parameters;
these are modeled from all SEES cases across all ages and countries:

```{r setup}
library(serocalculator)
library(tidyverse)
library(ggbeeswarm) # for plotting
library(dplyr)
dmcmc <-
  "https://osf.io/download/rtw5k" |>
  load_curve_params() |>
  dplyr::filter(iter < 500) # reduce number of mcmc samples for speed
```

## visualize antibody decay model

We can graph individual MCMC samples from the posterior distribution 
of model parameters using a `autoplot.curve_params()` method for the 
`autoplot()` function:

```{r}
dmcmc |> autoplot(n_curves = 50)
```

We can use a logarithmic scale for the x-axis if desired:

```{r}
dmcmc |> autoplot(log_x = TRUE, n_curves = 50)
```

We can graph the median, 10%, and 90% quantiles of the model using the `graph.curve.params()` function:

```{r, "graph-curve-params"}
# Specify the antibody-isotype responses to include in analyses
antibodies <- c("HlyE_IgA", "HlyE_IgG")

dmcmc |>
  graph.curve.params(antigen_isos = antibodies) |>
  print()
```


## Simulate cross-sectional data

```{r "sim_pop_data"}
# set seed to reproduce results
set.seed(54321)

# simulated incidence rate per person-year
lambda <- 0.2
# range covered in simulations
lifespan <- c(0, 10)
# cross-sectional sample size
nrep <- 100

# biologic noise distribution
dlims <- rbind(
  "HlyE_IgA" = c(min = 0, max = 0.5),
  "HlyE_IgG" = c(min = 0, max = 0.5)
)
```

```{r}

verbose <- FALSE # whether to print verbose updates as the function runs

# generate cross-sectional data
csdata <- sim_pop_data_2(
  curve_params = dmcmc,
  lambda = lambda,
  n_samples = nrep,
  age_range = lifespan,
  antigen_isos = antibodies,
  n_mcmc_samples = 0,
  renew_params = renew_params,
  add_noise = TRUE,
  noise_limits = dlims,
  format = "long"
)
```

## Noise parameters

We need to provide noise parameters for the analysis; here, 
we define them directly in our code:

```{r "noise"}
library(tibble)
cond <- tibble(
  antigen_iso = c("HlyE_IgG", "HlyE_IgA"),
  nu = c(0.5, 0.5), # Biologic noise (nu)
  eps = c(0, 0), # M noise (eps)
  y.low = c(1, 1), # low cutoff (llod)
  y.high = c(5e6, 5e6)
) # high cutoff (y.high)
```


## Visualize data

We can plot the distribution of the antibody responses in the simulated data.

```{r}
csdata |>
  ggplot() +
  aes(x = as.factor(antigen_iso),
      y = value) +
  geom_beeswarm(
    size = .2,
    alpha = .3,
    aes(color = antigen_iso),
    show.legend = FALSE
  ) +
  geom_boxplot(outlier.colour = NA, fill = NA) +
  scale_y_log10() +
  theme_linedraw() +
  labs(x = "antigen - isotype")
```

## calculate log-likelihood

We can calculate the log-likelihood of the data as a function of the incidence rate directly:

```{r}
ll_a <-
  log_likelihood(
    pop_data = csdata,
    curve_params = dmcmc,
    noise_params = cond,
    antigen_isos = "HlyE_IgA",
    lambda = 0.1
  ) |>
  print()

ll_g <-
  log_likelihood(
    pop_data = csdata,
    curve_params = dmcmc,
    noise_params = cond,
    antigen_isos = "HlyE_IgG",
    lambda = 0.1
  ) |>
  print()

ll_ag <-
  log_likelihood(
    pop_data = csdata,
    curve_params = dmcmc,
    noise_params = cond,
    antigen_isos = c("HlyE_IgG", "HlyE_IgA"),
    lambda = 0.1
  ) |>
  print()

print(ll_a + ll_g)
```

## graph log-likelihood

We can also graph the log-likelihoods, even without finding the MLEs, using `graph_loglik()`:

```{r}
lik_HlyE_IgA <-
  graph_loglik(
    pop_data = csdata,
    curve_params = dmcmc,
    noise_params = cond,
    antigen_isos = "HlyE_IgA",
    log_x = TRUE
  )

lik_HlyE_IgG <- graph_loglik(
  previous_plot = lik_HlyE_IgA,
  pop_data = csdata,
  curve_params = dmcmc,
  noise_params = cond,
  antigen_isos = "HlyE_IgG",
  log_x = TRUE
)

lik_both <- graph_loglik(
  previous_plot = lik_HlyE_IgG,
  pop_data = csdata,
  curve_params = dmcmc,
  noise_params = cond,
  antigen_isos = c("HlyE_IgG", "HlyE_IgA"),
  log_x = TRUE
)

print(lik_both)
```

## estimate incidence

We can estimate incidence with `est.incidence()`:

```{r "est.incidence"}
est1 <- est.incidence(
  pop_data = csdata,
  curve_params = dmcmc,
  noise_params = cond,
  lambda_start = .1,
  build_graph = TRUE,
  verbose = verbose,
  print_graph = FALSE, # display the log-likelihood curve while
  #`est.incidence()` is running
  antigen_isos = antibodies
)
```

We can extract summary statistics with `summary()`:

```{r "summary.est.incidence"}
summary(est1)
```

We can plot the log-likelihood curve with `autoplot()`:

```{r}
autoplot(est1)
```

We can set the x-axis to a logarithmic scale:

```{r}
autoplot(est1, log_x = TRUE)
```

# Simulate multiple clusters with different lambdas

```{r "init-parallel"}
library(parallel)
n_cores <- max(1, parallel::detectCores() - 1)
print(n_cores)
```

In the preceding code chunk, we have determined that we can use `r n_cores` CPU cores to run computations in parallel.

```{r "do-parallel"}
# number of clusters
nclus <- 20
# cross-sectional sample size
nrep <- 100

# incidence rate in e
lambdas <- c(.05, .1, .15, .2, .5, .8)

sim_df <-
  sim_pop_data_multi(
    sim_function = sim_pop_data_2,
    n_cores = n_cores,
    lambdas = lambdas,
    nclus = nclus,
    n_samples = nrep,
    age_range = lifespan,
    antigen_isos = antibodies,
    renew_params = renew_params,
    add_noise = TRUE,
    curve_params = dmcmc,
    noise_limits = dlims,
    format = "long"
  )

print(sim_df)
```

We can plot the distributions of the simulated responses:

```{r}
sim_df |>
  ggplot() +
  aes(
    x = as.factor(cluster),
    y = value
  ) +
  geom_beeswarm(size = .2, alpha = .3, aes(color = antigen_iso)) +
  geom_boxplot(outlier.colour = NA, fill = NA) +
  scale_y_log10() +
  facet_wrap(~ antigen_iso + lambda.sim, nrow = 2) +
  theme_linedraw()
```

## Estimate incidence in each cluster

```{r, "est-by-stratum"}
ests <-
  est.incidence.by(
    pop_data = sim_df,
    curve_params = dmcmc,
    noise_params = cond,
    num_cores = n_cores,
    strata = c("lambda.sim", "cluster"),
    curve_strata_varnames = NULL,
    noise_strata_varnames = NULL,
    verbose = verbose,
    build_graph = TRUE, # slows down the function substantially
    antigen_isos = c("HlyE_IgG", "HlyE_IgA")
  )
```

`summary(ests)` produces a `tibble()` with some extra meta-data:

```{r}
ests_summary <- ests |> summary() |> print()
```

We can explore the summary table interactively using `DT::datatable()`

```{r}
library(DT)
ests_summary |>
  DT::datatable(options = list(scrollX = TRUE)) |>
  DT::formatRound(
    columns = c(
      "incidence.rate",
      "SE",
      "CI.lwr",
      "CI.upr",
      "log.lik"
    )
  )
```


We can plot the likelihood for a single simulated cluster 
by subsetting that simulation in `ests` and calling `plot()`:

```{r}
autoplot(ests[1])
```

We can also plot log-likelihood curves for several clusters at once (your computer might struggle to plot many at once):

```{r "plot-multiple", fig.height = 7}
autoplot(ests[1:5])
```

The `log_x` argument also works here:

```{r "plot-multiple-log", fig.height = 7}
autoplot(ests[1:5], log_x = TRUE)
```

### `nlm()` convergence codes

Make sure to check the `nlm()` exit codes (codes 3-5 indicate possible non-convergence):

```{r "check-codes"}
ests_summary |>
  as_tibble() |> # removes extra meta-data
  select(Stratum, nlm.convergence.code) |>
  filter(nlm.convergence.code > 2)
```

Solutions to `nlm()` exit codes 3-5:

* 3: decrease the `stepmin` argument to `est.incidence()`/`est.incidence.by()`
* 4: increase the `iterlim` argument to `est.incidence()`/`est.incidence.by()`
* 5: increase the `stepmax` argument to `est.incidence()`/`est.incidence.by()`

We can extract the indices of problematic strata, if there are any:

```{r}
problem_strata <-
  which(ests_summary$nlm.convergence.code > 2) |>
  print()
```

If any clusters had problems, we can take a look:

```{r, fig.height = 7}
if (length(problem_strata) > 0) {
  autoplot(ests[problem_strata], log_x = TRUE)
}
```

If any of the fits don't appear to be at the maximum likelihood, 
we should re-run those clusters, 
adjusting the `nlm()` settings appropriately, to be sure.

## plot distribution of estimates by simulated incidence rate

Finally, we can look at our simulation results:

```{r, "graph"}

library(ggplot2)
ests_summary |>
  autoplot(xvar = "lambda.sim", 
           CI = TRUE, 
           dodge_width = .05) +
  ggplot2::geom_function(
    fun = function(x) x,
    col = "red",
    aes(linetype = "data-generating incidence rate")
  ) +
  labs(linetype = "") +
  scale_x_log10()

```

## Effect of `renew_params`

Setting `renew_params = TRUE` is more realistic, 
but not is accounted for by the current method; 
for population samples from populations with high incidence rates,
there may be bias:

```{r}
sim_df_renew <-
  sim_pop_data_multi(
    sim_function = sim_pop_data_2,
    n_cores = n_cores,
    lambdas = lambdas,
    nclus = nclus,
    n_samples = nrep,
    age_range = lifespan,
    antigen_isos = antibodies,
    renew_params = TRUE,
    add_noise = TRUE,
    curve_params = dmcmc,
    noise_limits = dlims,
    format = "long"
  )

ests_renew <-
  est.incidence.by(
    pop_data = sim_df_renew,
    curve_params = dmcmc,
    noise_params = cond,
    num_cores = n_cores,
    strata = c("lambda.sim", "cluster"),
    curve_strata_varnames = NULL,
    noise_strata_varnames = NULL,
    verbose = verbose,
    build_graph = TRUE, # slows down the function substantially
    antigen_isos = c("HlyE_IgG", "HlyE_IgA")
  )
ests_renew_summary <-
  ests_renew |> summary()



```

```{r, "graph_renew"}

ests_renew_summary |>
  autoplot(xvar = "lambda.sim",
           CI = TRUE, 
           dodge_width = .05) +
  ggplot2::geom_function(
    fun = function(x) x,
    col = "red",
    aes(linetype = "data-generating incidence rate")
  ) +
  labs(linetype = "") +
  scale_x_log10()
```
